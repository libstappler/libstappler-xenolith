/**
 Copyright (c) 2023 Stappler LLC <admin@stappler.dev>

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 **/

// Autogenerated with 'headergen' script

namespace stappler::xenolith::vk {

#if VK_HOOK_DEBUG

struct InstanceTableHookInfo {
	void (*preCall) (void *, const char *, PFN_vkVoidFunction);
	void (*postCall) (void *, const char *, PFN_vkVoidFunction);
	const InstanceTable *table;
	const InstanceTable *replace;
	void *ctx;
};

struct DeviceTableHookInfo {
	void (*preCall) (void *, const char *, PFN_vkVoidFunction);
	void (*postCall) (void *, const char *, PFN_vkVoidFunction);
	const DeviceTable *table;
	const DeviceTable *replace;
	void *ctx;
};

thread_local InstanceTableHookInfo tl_instanceHookTable;
thread_local DeviceTableHookInfo tl_deviceHookTable;

void setInstanceHookThreadContext(
		void (*pre) (void *, const char *, PFN_vkVoidFunction),
		void (*post) (void *, const char *, PFN_vkVoidFunction),
		const InstanceTable *t, const InstanceTable *r, void *c) {
	tl_instanceHookTable.preCall = pre;
	tl_instanceHookTable.postCall = post;
	tl_instanceHookTable.table = t;
	tl_instanceHookTable.replace = r;
	tl_instanceHookTable.ctx = c;
}

void setDeviceHookThreadContext(
		void (*pre) (void *ctx, const char *, PFN_vkVoidFunction),
		void (*post) (void *ctx, const char *, PFN_vkVoidFunction),
		const DeviceTable *t, const DeviceTable *r, void *c) {
	tl_deviceHookTable.preCall = pre;
	tl_deviceHookTable.postCall = post;
	tl_deviceHookTable.table = t;
	tl_deviceHookTable.replace = r;
	tl_deviceHookTable.ctx = c;
}

#endif /* VK_HOOK_DEBUG */

static PFN_vkVoidFunction loadInstanceAliased(PFN_vkGetInstanceProcAddr addr, VkInstance instance, const char *name,
		std::initializer_list<const char *> aliases) {
	auto ret = addr(instance, name);
	if (!ret) {
		for (auto it : aliases) {
			ret = addr(instance, it);
		}
	}
	return ret;
}

static PFN_vkVoidFunction loadDeviceAliased(PFN_vkGetDeviceProcAddr addr, VkDevice instance, const char *name,
		std::initializer_list<const char *> aliases) {
	auto ret = addr(instance, name);
	if (!ret) {
		for (auto it : aliases) {
			ret = addr(instance, it);
		}
	}
	return ret;
}

LoaderTable::LoaderTable(PFN_vkGetInstanceProcAddr addr)
#if defined(VK_VERSION_1_0)
: vkGetInstanceProcAddr(addr)
, vkCreateInstance((PFN_vkCreateInstance)addr(nullptr, "vkCreateInstance"))
, vkEnumerateInstanceExtensionProperties((PFN_vkEnumerateInstanceExtensionProperties)addr(nullptr, "vkEnumerateInstanceExtensionProperties"))
, vkEnumerateInstanceLayerProperties((PFN_vkEnumerateInstanceLayerProperties)addr(nullptr, "vkEnumerateInstanceLayerProperties"))
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
, vkEnumerateInstanceVersion((PFN_vkEnumerateInstanceVersion)addr(nullptr, "vkEnumerateInstanceVersion"))
#endif /* defined(VK_VERSION_1_1) */
{ }

InstanceTable::InstanceTable(PFN_vkGetInstanceProcAddr addr, VkInstance instance)
#if defined(VK_VERSION_1_0)
: vkGetInstanceProcAddr(addr)
, vkDestroyInstance((PFN_vkDestroyInstance)addr(instance, "vkDestroyInstance"))
, vkEnumeratePhysicalDevices((PFN_vkEnumeratePhysicalDevices)addr(instance, "vkEnumeratePhysicalDevices"))
, vkGetPhysicalDeviceFeatures((PFN_vkGetPhysicalDeviceFeatures)addr(instance, "vkGetPhysicalDeviceFeatures"))
, vkGetPhysicalDeviceFormatProperties((PFN_vkGetPhysicalDeviceFormatProperties)addr(instance, "vkGetPhysicalDeviceFormatProperties"))
, vkGetPhysicalDeviceImageFormatProperties((PFN_vkGetPhysicalDeviceImageFormatProperties)addr(instance, "vkGetPhysicalDeviceImageFormatProperties"))
, vkGetPhysicalDeviceProperties((PFN_vkGetPhysicalDeviceProperties)addr(instance, "vkGetPhysicalDeviceProperties"))
, vkGetPhysicalDeviceQueueFamilyProperties((PFN_vkGetPhysicalDeviceQueueFamilyProperties)addr(instance, "vkGetPhysicalDeviceQueueFamilyProperties"))
, vkGetPhysicalDeviceMemoryProperties((PFN_vkGetPhysicalDeviceMemoryProperties)addr(instance, "vkGetPhysicalDeviceMemoryProperties"))
, vkGetDeviceProcAddr((PFN_vkGetDeviceProcAddr)addr(instance, "vkGetDeviceProcAddr"))
, vkCreateDevice((PFN_vkCreateDevice)addr(instance, "vkCreateDevice"))
, vkEnumerateDeviceExtensionProperties((PFN_vkEnumerateDeviceExtensionProperties)addr(instance, "vkEnumerateDeviceExtensionProperties"))
, vkEnumerateDeviceLayerProperties((PFN_vkEnumerateDeviceLayerProperties)addr(instance, "vkEnumerateDeviceLayerProperties"))
, vkGetPhysicalDeviceSparseImageFormatProperties((PFN_vkGetPhysicalDeviceSparseImageFormatProperties)addr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties"))
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
, vkEnumeratePhysicalDeviceGroups((PFN_vkEnumeratePhysicalDeviceGroups)loadInstanceAliased(addr, instance, "vkEnumeratePhysicalDeviceGroups", {"vkEnumeratePhysicalDeviceGroupsKHR"}))
, vkGetPhysicalDeviceFeatures2((PFN_vkGetPhysicalDeviceFeatures2)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceFeatures2", {"vkGetPhysicalDeviceFeatures2KHR"}))
, vkGetPhysicalDeviceProperties2((PFN_vkGetPhysicalDeviceProperties2)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceProperties2", {"vkGetPhysicalDeviceProperties2KHR"}))
, vkGetPhysicalDeviceFormatProperties2((PFN_vkGetPhysicalDeviceFormatProperties2)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceFormatProperties2", {"vkGetPhysicalDeviceFormatProperties2KHR"}))
, vkGetPhysicalDeviceImageFormatProperties2((PFN_vkGetPhysicalDeviceImageFormatProperties2)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceImageFormatProperties2", {"vkGetPhysicalDeviceImageFormatProperties2KHR"}))
, vkGetPhysicalDeviceQueueFamilyProperties2((PFN_vkGetPhysicalDeviceQueueFamilyProperties2)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceQueueFamilyProperties2", {"vkGetPhysicalDeviceQueueFamilyProperties2KHR"}))
, vkGetPhysicalDeviceMemoryProperties2((PFN_vkGetPhysicalDeviceMemoryProperties2)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceMemoryProperties2", {"vkGetPhysicalDeviceMemoryProperties2KHR"}))
, vkGetPhysicalDeviceSparseImageFormatProperties2((PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceSparseImageFormatProperties2", {"vkGetPhysicalDeviceSparseImageFormatProperties2KHR"}))
, vkGetPhysicalDeviceExternalBufferProperties((PFN_vkGetPhysicalDeviceExternalBufferProperties)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceExternalBufferProperties", {"vkGetPhysicalDeviceExternalBufferPropertiesKHR"}))
, vkGetPhysicalDeviceExternalFenceProperties((PFN_vkGetPhysicalDeviceExternalFenceProperties)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceExternalFenceProperties", {"vkGetPhysicalDeviceExternalFencePropertiesKHR"}))
, vkGetPhysicalDeviceExternalSemaphoreProperties((PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceExternalSemaphoreProperties", {"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"}))
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
, vkGetPhysicalDeviceToolProperties((PFN_vkGetPhysicalDeviceToolProperties)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceToolProperties", {"vkGetPhysicalDeviceToolPropertiesEXT"}))
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_KHR_surface)
, vkDestroySurfaceKHR((PFN_vkDestroySurfaceKHR)addr(instance, "vkDestroySurfaceKHR"))
, vkGetPhysicalDeviceSurfaceSupportKHR((PFN_vkGetPhysicalDeviceSurfaceSupportKHR)addr(instance, "vkGetPhysicalDeviceSurfaceSupportKHR"))
, vkGetPhysicalDeviceSurfaceCapabilitiesKHR((PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)addr(instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"))
, vkGetPhysicalDeviceSurfaceFormatsKHR((PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)addr(instance, "vkGetPhysicalDeviceSurfaceFormatsKHR"))
, vkGetPhysicalDeviceSurfacePresentModesKHR((PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)addr(instance, "vkGetPhysicalDeviceSurfacePresentModesKHR"))
#endif /* defined(VK_KHR_surface) */
#if (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
, vkGetPhysicalDevicePresentRectanglesKHR((PFN_vkGetPhysicalDevicePresentRectanglesKHR)addr(instance, "vkGetPhysicalDevicePresentRectanglesKHR"))
#endif /* (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) */
#if defined(VK_KHR_display)
, vkGetPhysicalDeviceDisplayPropertiesKHR((PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)addr(instance, "vkGetPhysicalDeviceDisplayPropertiesKHR"))
, vkGetPhysicalDeviceDisplayPlanePropertiesKHR((PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)addr(instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"))
, vkGetDisplayPlaneSupportedDisplaysKHR((PFN_vkGetDisplayPlaneSupportedDisplaysKHR)addr(instance, "vkGetDisplayPlaneSupportedDisplaysKHR"))
, vkGetDisplayModePropertiesKHR((PFN_vkGetDisplayModePropertiesKHR)addr(instance, "vkGetDisplayModePropertiesKHR"))
, vkCreateDisplayModeKHR((PFN_vkCreateDisplayModeKHR)addr(instance, "vkCreateDisplayModeKHR"))
, vkGetDisplayPlaneCapabilitiesKHR((PFN_vkGetDisplayPlaneCapabilitiesKHR)addr(instance, "vkGetDisplayPlaneCapabilitiesKHR"))
, vkCreateDisplayPlaneSurfaceKHR((PFN_vkCreateDisplayPlaneSurfaceKHR)addr(instance, "vkCreateDisplayPlaneSurfaceKHR"))
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_xlib_surface)
, vkCreateXlibSurfaceKHR((PFN_vkCreateXlibSurfaceKHR)addr(instance, "vkCreateXlibSurfaceKHR"))
, vkGetPhysicalDeviceXlibPresentationSupportKHR((PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)addr(instance, "vkGetPhysicalDeviceXlibPresentationSupportKHR"))
#endif /* defined(VK_KHR_xlib_surface) */
#if defined(VK_KHR_xcb_surface)
, vkCreateXcbSurfaceKHR((PFN_vkCreateXcbSurfaceKHR)addr(instance, "vkCreateXcbSurfaceKHR"))
, vkGetPhysicalDeviceXcbPresentationSupportKHR((PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)addr(instance, "vkGetPhysicalDeviceXcbPresentationSupportKHR"))
#endif /* defined(VK_KHR_xcb_surface) */
#if defined(VK_KHR_wayland_surface)
, vkCreateWaylandSurfaceKHR((PFN_vkCreateWaylandSurfaceKHR)addr(instance, "vkCreateWaylandSurfaceKHR"))
, vkGetPhysicalDeviceWaylandPresentationSupportKHR((PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)addr(instance, "vkGetPhysicalDeviceWaylandPresentationSupportKHR"))
#endif /* defined(VK_KHR_wayland_surface) */
#if defined(VK_KHR_android_surface)
, vkCreateAndroidSurfaceKHR((PFN_vkCreateAndroidSurfaceKHR)addr(instance, "vkCreateAndroidSurfaceKHR"))
#endif /* defined(VK_KHR_android_surface) */
#if defined(VK_KHR_win32_surface)
, vkCreateWin32SurfaceKHR((PFN_vkCreateWin32SurfaceKHR)addr(instance, "vkCreateWin32SurfaceKHR"))
, vkGetPhysicalDeviceWin32PresentationSupportKHR((PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)addr(instance, "vkGetPhysicalDeviceWin32PresentationSupportKHR"))
#endif /* defined(VK_KHR_win32_surface) */
#if defined(VK_EXT_debug_report)
, vkCreateDebugReportCallbackEXT((PFN_vkCreateDebugReportCallbackEXT)addr(instance, "vkCreateDebugReportCallbackEXT"))
, vkDestroyDebugReportCallbackEXT((PFN_vkDestroyDebugReportCallbackEXT)addr(instance, "vkDestroyDebugReportCallbackEXT"))
, vkDebugReportMessageEXT((PFN_vkDebugReportMessageEXT)addr(instance, "vkDebugReportMessageEXT"))
#endif /* defined(VK_EXT_debug_report) */
#if defined(VK_KHR_video_queue)
, vkGetPhysicalDeviceVideoCapabilitiesKHR((PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)addr(instance, "vkGetPhysicalDeviceVideoCapabilitiesKHR"))
, vkGetPhysicalDeviceVideoFormatPropertiesKHR((PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)addr(instance, "vkGetPhysicalDeviceVideoFormatPropertiesKHR"))
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_GGP_stream_descriptor_surface)
, vkCreateStreamDescriptorSurfaceGGP((PFN_vkCreateStreamDescriptorSurfaceGGP)addr(instance, "vkCreateStreamDescriptorSurfaceGGP"))
#endif /* defined(VK_GGP_stream_descriptor_surface) */
#if defined(VK_NV_external_memory_capabilities)
, vkGetPhysicalDeviceExternalImageFormatPropertiesNV((PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)addr(instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"))
#endif /* defined(VK_NV_external_memory_capabilities) */
#if defined(VK_KHR_get_physical_device_properties2)
, vkGetPhysicalDeviceFeatures2KHR((PFN_vkGetPhysicalDeviceFeatures2KHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceFeatures2", {"vkGetPhysicalDeviceFeatures2KHR"}))
, vkGetPhysicalDeviceProperties2KHR((PFN_vkGetPhysicalDeviceProperties2KHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceProperties2", {"vkGetPhysicalDeviceProperties2KHR"}))
, vkGetPhysicalDeviceFormatProperties2KHR((PFN_vkGetPhysicalDeviceFormatProperties2KHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceFormatProperties2", {"vkGetPhysicalDeviceFormatProperties2KHR"}))
, vkGetPhysicalDeviceImageFormatProperties2KHR((PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceImageFormatProperties2", {"vkGetPhysicalDeviceImageFormatProperties2KHR"}))
, vkGetPhysicalDeviceQueueFamilyProperties2KHR((PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceQueueFamilyProperties2", {"vkGetPhysicalDeviceQueueFamilyProperties2KHR"}))
, vkGetPhysicalDeviceMemoryProperties2KHR((PFN_vkGetPhysicalDeviceMemoryProperties2KHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceMemoryProperties2", {"vkGetPhysicalDeviceMemoryProperties2KHR"}))
, vkGetPhysicalDeviceSparseImageFormatProperties2KHR((PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceSparseImageFormatProperties2", {"vkGetPhysicalDeviceSparseImageFormatProperties2KHR"}))
#endif /* defined(VK_KHR_get_physical_device_properties2) */
#if defined(VK_NN_vi_surface)
, vkCreateViSurfaceNN((PFN_vkCreateViSurfaceNN)addr(instance, "vkCreateViSurfaceNN"))
#endif /* defined(VK_NN_vi_surface) */
#if defined(VK_KHR_device_group_creation)
, vkEnumeratePhysicalDeviceGroupsKHR((PFN_vkEnumeratePhysicalDeviceGroupsKHR)loadInstanceAliased(addr, instance, "vkEnumeratePhysicalDeviceGroups", {"vkEnumeratePhysicalDeviceGroupsKHR"}))
#endif /* defined(VK_KHR_device_group_creation) */
#if defined(VK_KHR_external_memory_capabilities)
, vkGetPhysicalDeviceExternalBufferPropertiesKHR((PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceExternalBufferProperties", {"vkGetPhysicalDeviceExternalBufferPropertiesKHR"}))
#endif /* defined(VK_KHR_external_memory_capabilities) */
#if defined(VK_KHR_external_semaphore_capabilities)
, vkGetPhysicalDeviceExternalSemaphorePropertiesKHR((PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceExternalSemaphoreProperties", {"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"}))
#endif /* defined(VK_KHR_external_semaphore_capabilities) */
#if defined(VK_EXT_direct_mode_display)
, vkReleaseDisplayEXT((PFN_vkReleaseDisplayEXT)addr(instance, "vkReleaseDisplayEXT"))
#endif /* defined(VK_EXT_direct_mode_display) */
#if defined(VK_EXT_acquire_xlib_display)
, vkAcquireXlibDisplayEXT((PFN_vkAcquireXlibDisplayEXT)addr(instance, "vkAcquireXlibDisplayEXT"))
, vkGetRandROutputDisplayEXT((PFN_vkGetRandROutputDisplayEXT)addr(instance, "vkGetRandROutputDisplayEXT"))
#endif /* defined(VK_EXT_acquire_xlib_display) */
#if defined(VK_EXT_display_surface_counter)
, vkGetPhysicalDeviceSurfaceCapabilities2EXT((PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)addr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT"))
#endif /* defined(VK_EXT_display_surface_counter) */
#if defined(VK_KHR_external_fence_capabilities)
, vkGetPhysicalDeviceExternalFencePropertiesKHR((PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceExternalFenceProperties", {"vkGetPhysicalDeviceExternalFencePropertiesKHR"}))
#endif /* defined(VK_KHR_external_fence_capabilities) */
#if defined(VK_KHR_performance_query)
, vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR((PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)addr(instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"))
, vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR((PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)addr(instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"))
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_KHR_get_surface_capabilities2)
, vkGetPhysicalDeviceSurfaceCapabilities2KHR((PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)addr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR"))
, vkGetPhysicalDeviceSurfaceFormats2KHR((PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)addr(instance, "vkGetPhysicalDeviceSurfaceFormats2KHR"))
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_KHR_get_display_properties2)
, vkGetPhysicalDeviceDisplayProperties2KHR((PFN_vkGetPhysicalDeviceDisplayProperties2KHR)addr(instance, "vkGetPhysicalDeviceDisplayProperties2KHR"))
, vkGetPhysicalDeviceDisplayPlaneProperties2KHR((PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)addr(instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"))
, vkGetDisplayModeProperties2KHR((PFN_vkGetDisplayModeProperties2KHR)addr(instance, "vkGetDisplayModeProperties2KHR"))
, vkGetDisplayPlaneCapabilities2KHR((PFN_vkGetDisplayPlaneCapabilities2KHR)addr(instance, "vkGetDisplayPlaneCapabilities2KHR"))
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_MVK_ios_surface)
, vkCreateIOSSurfaceMVK((PFN_vkCreateIOSSurfaceMVK)addr(instance, "vkCreateIOSSurfaceMVK"))
#endif /* defined(VK_MVK_ios_surface) */
#if defined(VK_MVK_macos_surface)
, vkCreateMacOSSurfaceMVK((PFN_vkCreateMacOSSurfaceMVK)addr(instance, "vkCreateMacOSSurfaceMVK"))
#endif /* defined(VK_MVK_macos_surface) */
#if defined(VK_EXT_debug_utils)
, vkSetDebugUtilsObjectNameEXT((PFN_vkSetDebugUtilsObjectNameEXT)addr(instance, "vkSetDebugUtilsObjectNameEXT"))
, vkSetDebugUtilsObjectTagEXT((PFN_vkSetDebugUtilsObjectTagEXT)addr(instance, "vkSetDebugUtilsObjectTagEXT"))
, vkQueueBeginDebugUtilsLabelEXT((PFN_vkQueueBeginDebugUtilsLabelEXT)addr(instance, "vkQueueBeginDebugUtilsLabelEXT"))
, vkQueueEndDebugUtilsLabelEXT((PFN_vkQueueEndDebugUtilsLabelEXT)addr(instance, "vkQueueEndDebugUtilsLabelEXT"))
, vkQueueInsertDebugUtilsLabelEXT((PFN_vkQueueInsertDebugUtilsLabelEXT)addr(instance, "vkQueueInsertDebugUtilsLabelEXT"))
, vkCmdBeginDebugUtilsLabelEXT((PFN_vkCmdBeginDebugUtilsLabelEXT)addr(instance, "vkCmdBeginDebugUtilsLabelEXT"))
, vkCmdEndDebugUtilsLabelEXT((PFN_vkCmdEndDebugUtilsLabelEXT)addr(instance, "vkCmdEndDebugUtilsLabelEXT"))
, vkCmdInsertDebugUtilsLabelEXT((PFN_vkCmdInsertDebugUtilsLabelEXT)addr(instance, "vkCmdInsertDebugUtilsLabelEXT"))
, vkCreateDebugUtilsMessengerEXT((PFN_vkCreateDebugUtilsMessengerEXT)addr(instance, "vkCreateDebugUtilsMessengerEXT"))
, vkDestroyDebugUtilsMessengerEXT((PFN_vkDestroyDebugUtilsMessengerEXT)addr(instance, "vkDestroyDebugUtilsMessengerEXT"))
, vkSubmitDebugUtilsMessageEXT((PFN_vkSubmitDebugUtilsMessageEXT)addr(instance, "vkSubmitDebugUtilsMessageEXT"))
#endif /* defined(VK_EXT_debug_utils) */
#if defined(VK_EXT_sample_locations)
, vkGetPhysicalDeviceMultisamplePropertiesEXT((PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)addr(instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT"))
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_calibrated_timestamps)
, vkGetPhysicalDeviceCalibrateableTimeDomainsEXT((PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)addr(instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"))
#endif /* defined(VK_EXT_calibrated_timestamps) */
#if defined(VK_FUCHSIA_imagepipe_surface)
, vkCreateImagePipeSurfaceFUCHSIA((PFN_vkCreateImagePipeSurfaceFUCHSIA)addr(instance, "vkCreateImagePipeSurfaceFUCHSIA"))
#endif /* defined(VK_FUCHSIA_imagepipe_surface) */
#if defined(VK_EXT_metal_surface)
, vkCreateMetalSurfaceEXT((PFN_vkCreateMetalSurfaceEXT)addr(instance, "vkCreateMetalSurfaceEXT"))
#endif /* defined(VK_EXT_metal_surface) */
#if defined(VK_KHR_fragment_shading_rate)
, vkGetPhysicalDeviceFragmentShadingRatesKHR((PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)addr(instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR"))
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_EXT_tooling_info)
, vkGetPhysicalDeviceToolPropertiesEXT((PFN_vkGetPhysicalDeviceToolPropertiesEXT)loadInstanceAliased(addr, instance, "vkGetPhysicalDeviceToolProperties", {"vkGetPhysicalDeviceToolPropertiesEXT"}))
#endif /* defined(VK_EXT_tooling_info) */
#if defined(VK_NV_cooperative_matrix)
, vkGetPhysicalDeviceCooperativeMatrixPropertiesNV((PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)addr(instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"))
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_NV_coverage_reduction_mode)
, vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV((PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)addr(instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"))
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_EXT_full_screen_exclusive)
, vkGetPhysicalDeviceSurfacePresentModes2EXT((PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT)addr(instance, "vkGetPhysicalDeviceSurfacePresentModes2EXT"))
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_EXT_headless_surface)
, vkCreateHeadlessSurfaceEXT((PFN_vkCreateHeadlessSurfaceEXT)addr(instance, "vkCreateHeadlessSurfaceEXT"))
#endif /* defined(VK_EXT_headless_surface) */
#if defined(VK_EXT_acquire_drm_display)
, vkAcquireDrmDisplayEXT((PFN_vkAcquireDrmDisplayEXT)addr(instance, "vkAcquireDrmDisplayEXT"))
, vkGetDrmDisplayEXT((PFN_vkGetDrmDisplayEXT)addr(instance, "vkGetDrmDisplayEXT"))
#endif /* defined(VK_EXT_acquire_drm_display) */
#if defined(VK_KHR_video_encode_queue)
, vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR((PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)addr(instance, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"))
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_object_refresh)
, vkGetPhysicalDeviceRefreshableObjectTypesKHR((PFN_vkGetPhysicalDeviceRefreshableObjectTypesKHR)addr(instance, "vkGetPhysicalDeviceRefreshableObjectTypesKHR"))
#endif /* defined(VK_KHR_object_refresh) */
#if defined(VK_NV_acquire_winrt_display)
, vkAcquireWinrtDisplayNV((PFN_vkAcquireWinrtDisplayNV)addr(instance, "vkAcquireWinrtDisplayNV"))
, vkGetWinrtDisplayNV((PFN_vkGetWinrtDisplayNV)addr(instance, "vkGetWinrtDisplayNV"))
#endif /* defined(VK_NV_acquire_winrt_display) */
#if defined(VK_EXT_directfb_surface)
, vkCreateDirectFBSurfaceEXT((PFN_vkCreateDirectFBSurfaceEXT)addr(instance, "vkCreateDirectFBSurfaceEXT"))
, vkGetPhysicalDeviceDirectFBPresentationSupportEXT((PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT)addr(instance, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT"))
#endif /* defined(VK_EXT_directfb_surface) */
#if defined(VK_NV_external_sci_sync)
, vkGetPhysicalDeviceSciSyncAttributesNV((PFN_vkGetPhysicalDeviceSciSyncAttributesNV)addr(instance, "vkGetPhysicalDeviceSciSyncAttributesNV"))
#endif /* defined(VK_NV_external_sci_sync) */
#if defined(VK_NV_external_memory_sci_buf)
, vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV((PFN_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV)addr(instance, "vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV"))
, vkGetPhysicalDeviceSciBufAttributesNV((PFN_vkGetPhysicalDeviceSciBufAttributesNV)addr(instance, "vkGetPhysicalDeviceSciBufAttributesNV"))
#endif /* defined(VK_NV_external_memory_sci_buf) */
#if defined(VK_QNX_screen_surface)
, vkCreateScreenSurfaceQNX((PFN_vkCreateScreenSurfaceQNX)addr(instance, "vkCreateScreenSurfaceQNX"))
, vkGetPhysicalDeviceScreenPresentationSupportQNX((PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX)addr(instance, "vkGetPhysicalDeviceScreenPresentationSupportQNX"))
#endif /* defined(VK_QNX_screen_surface) */
#if defined(VK_NV_optical_flow)
, vkGetPhysicalDeviceOpticalFlowImageFormatsNV((PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)addr(instance, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV"))
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_KHR_cooperative_matrix)
, vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR((PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)addr(instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"))
#endif /* defined(VK_KHR_cooperative_matrix) */
{ }

DeviceTable::DeviceTable(PFN_vkGetDeviceProcAddr addr, VkDevice device)
#if defined(VK_VERSION_1_0)
: vkGetDeviceProcAddr(addr)
, vkDestroyDevice((PFN_vkDestroyDevice)addr(device, "vkDestroyDevice"))
, vkGetDeviceQueue((PFN_vkGetDeviceQueue)addr(device, "vkGetDeviceQueue"))
, vkQueueSubmit((PFN_vkQueueSubmit)addr(device, "vkQueueSubmit"))
, vkQueueWaitIdle((PFN_vkQueueWaitIdle)addr(device, "vkQueueWaitIdle"))
, vkDeviceWaitIdle((PFN_vkDeviceWaitIdle)addr(device, "vkDeviceWaitIdle"))
, vkAllocateMemory((PFN_vkAllocateMemory)addr(device, "vkAllocateMemory"))
, vkFreeMemory((PFN_vkFreeMemory)addr(device, "vkFreeMemory"))
, vkMapMemory((PFN_vkMapMemory)addr(device, "vkMapMemory"))
, vkUnmapMemory((PFN_vkUnmapMemory)addr(device, "vkUnmapMemory"))
, vkFlushMappedMemoryRanges((PFN_vkFlushMappedMemoryRanges)addr(device, "vkFlushMappedMemoryRanges"))
, vkInvalidateMappedMemoryRanges((PFN_vkInvalidateMappedMemoryRanges)addr(device, "vkInvalidateMappedMemoryRanges"))
, vkGetDeviceMemoryCommitment((PFN_vkGetDeviceMemoryCommitment)addr(device, "vkGetDeviceMemoryCommitment"))
, vkBindBufferMemory((PFN_vkBindBufferMemory)addr(device, "vkBindBufferMemory"))
, vkBindImageMemory((PFN_vkBindImageMemory)addr(device, "vkBindImageMemory"))
, vkGetBufferMemoryRequirements((PFN_vkGetBufferMemoryRequirements)addr(device, "vkGetBufferMemoryRequirements"))
, vkGetImageMemoryRequirements((PFN_vkGetImageMemoryRequirements)addr(device, "vkGetImageMemoryRequirements"))
, vkGetImageSparseMemoryRequirements((PFN_vkGetImageSparseMemoryRequirements)addr(device, "vkGetImageSparseMemoryRequirements"))
, vkQueueBindSparse((PFN_vkQueueBindSparse)addr(device, "vkQueueBindSparse"))
, vkCreateFence((PFN_vkCreateFence)addr(device, "vkCreateFence"))
, vkDestroyFence((PFN_vkDestroyFence)addr(device, "vkDestroyFence"))
, vkResetFences((PFN_vkResetFences)addr(device, "vkResetFences"))
, vkGetFenceStatus((PFN_vkGetFenceStatus)addr(device, "vkGetFenceStatus"))
, vkWaitForFences((PFN_vkWaitForFences)addr(device, "vkWaitForFences"))
, vkCreateSemaphore((PFN_vkCreateSemaphore)addr(device, "vkCreateSemaphore"))
, vkDestroySemaphore((PFN_vkDestroySemaphore)addr(device, "vkDestroySemaphore"))
, vkCreateEvent((PFN_vkCreateEvent)addr(device, "vkCreateEvent"))
, vkDestroyEvent((PFN_vkDestroyEvent)addr(device, "vkDestroyEvent"))
, vkGetEventStatus((PFN_vkGetEventStatus)addr(device, "vkGetEventStatus"))
, vkSetEvent((PFN_vkSetEvent)addr(device, "vkSetEvent"))
, vkResetEvent((PFN_vkResetEvent)addr(device, "vkResetEvent"))
, vkCreateQueryPool((PFN_vkCreateQueryPool)addr(device, "vkCreateQueryPool"))
, vkDestroyQueryPool((PFN_vkDestroyQueryPool)addr(device, "vkDestroyQueryPool"))
, vkGetQueryPoolResults((PFN_vkGetQueryPoolResults)addr(device, "vkGetQueryPoolResults"))
, vkCreateBuffer((PFN_vkCreateBuffer)addr(device, "vkCreateBuffer"))
, vkDestroyBuffer((PFN_vkDestroyBuffer)addr(device, "vkDestroyBuffer"))
, vkCreateBufferView((PFN_vkCreateBufferView)addr(device, "vkCreateBufferView"))
, vkDestroyBufferView((PFN_vkDestroyBufferView)addr(device, "vkDestroyBufferView"))
, vkCreateImage((PFN_vkCreateImage)addr(device, "vkCreateImage"))
, vkDestroyImage((PFN_vkDestroyImage)addr(device, "vkDestroyImage"))
, vkGetImageSubresourceLayout((PFN_vkGetImageSubresourceLayout)addr(device, "vkGetImageSubresourceLayout"))
, vkCreateImageView((PFN_vkCreateImageView)addr(device, "vkCreateImageView"))
, vkDestroyImageView((PFN_vkDestroyImageView)addr(device, "vkDestroyImageView"))
, vkCreateShaderModule((PFN_vkCreateShaderModule)addr(device, "vkCreateShaderModule"))
, vkDestroyShaderModule((PFN_vkDestroyShaderModule)addr(device, "vkDestroyShaderModule"))
, vkCreatePipelineCache((PFN_vkCreatePipelineCache)addr(device, "vkCreatePipelineCache"))
, vkDestroyPipelineCache((PFN_vkDestroyPipelineCache)addr(device, "vkDestroyPipelineCache"))
, vkGetPipelineCacheData((PFN_vkGetPipelineCacheData)addr(device, "vkGetPipelineCacheData"))
, vkMergePipelineCaches((PFN_vkMergePipelineCaches)addr(device, "vkMergePipelineCaches"))
, vkCreateGraphicsPipelines((PFN_vkCreateGraphicsPipelines)addr(device, "vkCreateGraphicsPipelines"))
, vkCreateComputePipelines((PFN_vkCreateComputePipelines)addr(device, "vkCreateComputePipelines"))
, vkDestroyPipeline((PFN_vkDestroyPipeline)addr(device, "vkDestroyPipeline"))
, vkCreatePipelineLayout((PFN_vkCreatePipelineLayout)addr(device, "vkCreatePipelineLayout"))
, vkDestroyPipelineLayout((PFN_vkDestroyPipelineLayout)addr(device, "vkDestroyPipelineLayout"))
, vkCreateSampler((PFN_vkCreateSampler)addr(device, "vkCreateSampler"))
, vkDestroySampler((PFN_vkDestroySampler)addr(device, "vkDestroySampler"))
, vkCreateDescriptorSetLayout((PFN_vkCreateDescriptorSetLayout)addr(device, "vkCreateDescriptorSetLayout"))
, vkDestroyDescriptorSetLayout((PFN_vkDestroyDescriptorSetLayout)addr(device, "vkDestroyDescriptorSetLayout"))
, vkCreateDescriptorPool((PFN_vkCreateDescriptorPool)addr(device, "vkCreateDescriptorPool"))
, vkDestroyDescriptorPool((PFN_vkDestroyDescriptorPool)addr(device, "vkDestroyDescriptorPool"))
, vkResetDescriptorPool((PFN_vkResetDescriptorPool)addr(device, "vkResetDescriptorPool"))
, vkAllocateDescriptorSets((PFN_vkAllocateDescriptorSets)addr(device, "vkAllocateDescriptorSets"))
, vkFreeDescriptorSets((PFN_vkFreeDescriptorSets)addr(device, "vkFreeDescriptorSets"))
, vkUpdateDescriptorSets((PFN_vkUpdateDescriptorSets)addr(device, "vkUpdateDescriptorSets"))
, vkCreateFramebuffer((PFN_vkCreateFramebuffer)addr(device, "vkCreateFramebuffer"))
, vkDestroyFramebuffer((PFN_vkDestroyFramebuffer)addr(device, "vkDestroyFramebuffer"))
, vkCreateRenderPass((PFN_vkCreateRenderPass)addr(device, "vkCreateRenderPass"))
, vkDestroyRenderPass((PFN_vkDestroyRenderPass)addr(device, "vkDestroyRenderPass"))
, vkGetRenderAreaGranularity((PFN_vkGetRenderAreaGranularity)addr(device, "vkGetRenderAreaGranularity"))
, vkCreateCommandPool((PFN_vkCreateCommandPool)addr(device, "vkCreateCommandPool"))
, vkDestroyCommandPool((PFN_vkDestroyCommandPool)addr(device, "vkDestroyCommandPool"))
, vkResetCommandPool((PFN_vkResetCommandPool)addr(device, "vkResetCommandPool"))
, vkAllocateCommandBuffers((PFN_vkAllocateCommandBuffers)addr(device, "vkAllocateCommandBuffers"))
, vkFreeCommandBuffers((PFN_vkFreeCommandBuffers)addr(device, "vkFreeCommandBuffers"))
, vkBeginCommandBuffer((PFN_vkBeginCommandBuffer)addr(device, "vkBeginCommandBuffer"))
, vkEndCommandBuffer((PFN_vkEndCommandBuffer)addr(device, "vkEndCommandBuffer"))
, vkResetCommandBuffer((PFN_vkResetCommandBuffer)addr(device, "vkResetCommandBuffer"))
, vkCmdBindPipeline((PFN_vkCmdBindPipeline)addr(device, "vkCmdBindPipeline"))
, vkCmdSetViewport((PFN_vkCmdSetViewport)addr(device, "vkCmdSetViewport"))
, vkCmdSetScissor((PFN_vkCmdSetScissor)addr(device, "vkCmdSetScissor"))
, vkCmdSetLineWidth((PFN_vkCmdSetLineWidth)addr(device, "vkCmdSetLineWidth"))
, vkCmdSetDepthBias((PFN_vkCmdSetDepthBias)addr(device, "vkCmdSetDepthBias"))
, vkCmdSetBlendConstants((PFN_vkCmdSetBlendConstants)addr(device, "vkCmdSetBlendConstants"))
, vkCmdSetDepthBounds((PFN_vkCmdSetDepthBounds)addr(device, "vkCmdSetDepthBounds"))
, vkCmdSetStencilCompareMask((PFN_vkCmdSetStencilCompareMask)addr(device, "vkCmdSetStencilCompareMask"))
, vkCmdSetStencilWriteMask((PFN_vkCmdSetStencilWriteMask)addr(device, "vkCmdSetStencilWriteMask"))
, vkCmdSetStencilReference((PFN_vkCmdSetStencilReference)addr(device, "vkCmdSetStencilReference"))
, vkCmdBindDescriptorSets((PFN_vkCmdBindDescriptorSets)addr(device, "vkCmdBindDescriptorSets"))
, vkCmdBindIndexBuffer((PFN_vkCmdBindIndexBuffer)addr(device, "vkCmdBindIndexBuffer"))
, vkCmdBindVertexBuffers((PFN_vkCmdBindVertexBuffers)addr(device, "vkCmdBindVertexBuffers"))
, vkCmdDraw((PFN_vkCmdDraw)addr(device, "vkCmdDraw"))
, vkCmdDrawIndexed((PFN_vkCmdDrawIndexed)addr(device, "vkCmdDrawIndexed"))
, vkCmdDrawIndirect((PFN_vkCmdDrawIndirect)addr(device, "vkCmdDrawIndirect"))
, vkCmdDrawIndexedIndirect((PFN_vkCmdDrawIndexedIndirect)addr(device, "vkCmdDrawIndexedIndirect"))
, vkCmdDispatch((PFN_vkCmdDispatch)addr(device, "vkCmdDispatch"))
, vkCmdDispatchIndirect((PFN_vkCmdDispatchIndirect)addr(device, "vkCmdDispatchIndirect"))
, vkCmdCopyBuffer((PFN_vkCmdCopyBuffer)addr(device, "vkCmdCopyBuffer"))
, vkCmdCopyImage((PFN_vkCmdCopyImage)addr(device, "vkCmdCopyImage"))
, vkCmdBlitImage((PFN_vkCmdBlitImage)addr(device, "vkCmdBlitImage"))
, vkCmdCopyBufferToImage((PFN_vkCmdCopyBufferToImage)addr(device, "vkCmdCopyBufferToImage"))
, vkCmdCopyImageToBuffer((PFN_vkCmdCopyImageToBuffer)addr(device, "vkCmdCopyImageToBuffer"))
, vkCmdUpdateBuffer((PFN_vkCmdUpdateBuffer)addr(device, "vkCmdUpdateBuffer"))
, vkCmdFillBuffer((PFN_vkCmdFillBuffer)addr(device, "vkCmdFillBuffer"))
, vkCmdClearColorImage((PFN_vkCmdClearColorImage)addr(device, "vkCmdClearColorImage"))
, vkCmdClearDepthStencilImage((PFN_vkCmdClearDepthStencilImage)addr(device, "vkCmdClearDepthStencilImage"))
, vkCmdClearAttachments((PFN_vkCmdClearAttachments)addr(device, "vkCmdClearAttachments"))
, vkCmdResolveImage((PFN_vkCmdResolveImage)addr(device, "vkCmdResolveImage"))
, vkCmdSetEvent((PFN_vkCmdSetEvent)addr(device, "vkCmdSetEvent"))
, vkCmdResetEvent((PFN_vkCmdResetEvent)addr(device, "vkCmdResetEvent"))
, vkCmdWaitEvents((PFN_vkCmdWaitEvents)addr(device, "vkCmdWaitEvents"))
, vkCmdPipelineBarrier((PFN_vkCmdPipelineBarrier)addr(device, "vkCmdPipelineBarrier"))
, vkCmdBeginQuery((PFN_vkCmdBeginQuery)addr(device, "vkCmdBeginQuery"))
, vkCmdEndQuery((PFN_vkCmdEndQuery)addr(device, "vkCmdEndQuery"))
, vkCmdResetQueryPool((PFN_vkCmdResetQueryPool)addr(device, "vkCmdResetQueryPool"))
, vkCmdWriteTimestamp((PFN_vkCmdWriteTimestamp)addr(device, "vkCmdWriteTimestamp"))
, vkCmdCopyQueryPoolResults((PFN_vkCmdCopyQueryPoolResults)addr(device, "vkCmdCopyQueryPoolResults"))
, vkCmdPushConstants((PFN_vkCmdPushConstants)addr(device, "vkCmdPushConstants"))
, vkCmdBeginRenderPass((PFN_vkCmdBeginRenderPass)addr(device, "vkCmdBeginRenderPass"))
, vkCmdNextSubpass((PFN_vkCmdNextSubpass)addr(device, "vkCmdNextSubpass"))
, vkCmdEndRenderPass((PFN_vkCmdEndRenderPass)addr(device, "vkCmdEndRenderPass"))
, vkCmdExecuteCommands((PFN_vkCmdExecuteCommands)addr(device, "vkCmdExecuteCommands"))
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
, vkBindBufferMemory2((PFN_vkBindBufferMemory2)loadDeviceAliased(addr, device, "vkBindBufferMemory2", {"vkBindBufferMemory2KHR"}))
, vkBindImageMemory2((PFN_vkBindImageMemory2)loadDeviceAliased(addr, device, "vkBindImageMemory2", {"vkBindImageMemory2KHR"}))
, vkGetDeviceGroupPeerMemoryFeatures((PFN_vkGetDeviceGroupPeerMemoryFeatures)loadDeviceAliased(addr, device, "vkGetDeviceGroupPeerMemoryFeatures", {"vkGetDeviceGroupPeerMemoryFeaturesKHR"}))
, vkCmdSetDeviceMask((PFN_vkCmdSetDeviceMask)loadDeviceAliased(addr, device, "vkCmdSetDeviceMask", {"vkCmdSetDeviceMaskKHR"}))
, vkCmdDispatchBase((PFN_vkCmdDispatchBase)loadDeviceAliased(addr, device, "vkCmdDispatchBase", {"vkCmdDispatchBaseKHR"}))
, vkGetImageMemoryRequirements2((PFN_vkGetImageMemoryRequirements2)loadDeviceAliased(addr, device, "vkGetImageMemoryRequirements2", {"vkGetImageMemoryRequirements2KHR"}))
, vkGetBufferMemoryRequirements2((PFN_vkGetBufferMemoryRequirements2)loadDeviceAliased(addr, device, "vkGetBufferMemoryRequirements2", {"vkGetBufferMemoryRequirements2KHR"}))
, vkGetImageSparseMemoryRequirements2((PFN_vkGetImageSparseMemoryRequirements2)loadDeviceAliased(addr, device, "vkGetImageSparseMemoryRequirements2", {"vkGetImageSparseMemoryRequirements2KHR"}))
, vkTrimCommandPool((PFN_vkTrimCommandPool)loadDeviceAliased(addr, device, "vkTrimCommandPool", {"vkTrimCommandPoolKHR"}))
, vkGetDeviceQueue2((PFN_vkGetDeviceQueue2)addr(device, "vkGetDeviceQueue2"))
, vkCreateSamplerYcbcrConversion((PFN_vkCreateSamplerYcbcrConversion)loadDeviceAliased(addr, device, "vkCreateSamplerYcbcrConversion", {"vkCreateSamplerYcbcrConversionKHR"}))
, vkDestroySamplerYcbcrConversion((PFN_vkDestroySamplerYcbcrConversion)loadDeviceAliased(addr, device, "vkDestroySamplerYcbcrConversion", {"vkDestroySamplerYcbcrConversionKHR"}))
, vkCreateDescriptorUpdateTemplate((PFN_vkCreateDescriptorUpdateTemplate)loadDeviceAliased(addr, device, "vkCreateDescriptorUpdateTemplate", {"vkCreateDescriptorUpdateTemplateKHR"}))
, vkDestroyDescriptorUpdateTemplate((PFN_vkDestroyDescriptorUpdateTemplate)loadDeviceAliased(addr, device, "vkDestroyDescriptorUpdateTemplate", {"vkDestroyDescriptorUpdateTemplateKHR"}))
, vkUpdateDescriptorSetWithTemplate((PFN_vkUpdateDescriptorSetWithTemplate)loadDeviceAliased(addr, device, "vkUpdateDescriptorSetWithTemplate", {"vkUpdateDescriptorSetWithTemplateKHR"}))
, vkGetDescriptorSetLayoutSupport((PFN_vkGetDescriptorSetLayoutSupport)loadDeviceAliased(addr, device, "vkGetDescriptorSetLayoutSupport", {"vkGetDescriptorSetLayoutSupportKHR"}))
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
, vkCmdDrawIndirectCount((PFN_vkCmdDrawIndirectCount)loadDeviceAliased(addr, device, "vkCmdDrawIndirectCount", {"vkCmdDrawIndirectCountAMD", "vkCmdDrawIndirectCountKHR"}))
, vkCmdDrawIndexedIndirectCount((PFN_vkCmdDrawIndexedIndirectCount)loadDeviceAliased(addr, device, "vkCmdDrawIndexedIndirectCount", {"vkCmdDrawIndexedIndirectCountAMD", "vkCmdDrawIndexedIndirectCountKHR"}))
, vkCreateRenderPass2((PFN_vkCreateRenderPass2)loadDeviceAliased(addr, device, "vkCreateRenderPass2", {"vkCreateRenderPass2KHR"}))
, vkCmdBeginRenderPass2((PFN_vkCmdBeginRenderPass2)loadDeviceAliased(addr, device, "vkCmdBeginRenderPass2", {"vkCmdBeginRenderPass2KHR"}))
, vkCmdNextSubpass2((PFN_vkCmdNextSubpass2)loadDeviceAliased(addr, device, "vkCmdNextSubpass2", {"vkCmdNextSubpass2KHR"}))
, vkCmdEndRenderPass2((PFN_vkCmdEndRenderPass2)loadDeviceAliased(addr, device, "vkCmdEndRenderPass2", {"vkCmdEndRenderPass2KHR"}))
, vkResetQueryPool((PFN_vkResetQueryPool)loadDeviceAliased(addr, device, "vkResetQueryPool", {"vkResetQueryPoolEXT"}))
, vkGetSemaphoreCounterValue((PFN_vkGetSemaphoreCounterValue)loadDeviceAliased(addr, device, "vkGetSemaphoreCounterValue", {"vkGetSemaphoreCounterValueKHR"}))
, vkWaitSemaphores((PFN_vkWaitSemaphores)loadDeviceAliased(addr, device, "vkWaitSemaphores", {"vkWaitSemaphoresKHR"}))
, vkSignalSemaphore((PFN_vkSignalSemaphore)loadDeviceAliased(addr, device, "vkSignalSemaphore", {"vkSignalSemaphoreKHR"}))
, vkGetBufferDeviceAddress((PFN_vkGetBufferDeviceAddress)loadDeviceAliased(addr, device, "vkGetBufferDeviceAddress", {"vkGetBufferDeviceAddressEXT", "vkGetBufferDeviceAddressKHR"}))
, vkGetBufferOpaqueCaptureAddress((PFN_vkGetBufferOpaqueCaptureAddress)loadDeviceAliased(addr, device, "vkGetBufferOpaqueCaptureAddress", {"vkGetBufferOpaqueCaptureAddressKHR"}))
, vkGetDeviceMemoryOpaqueCaptureAddress((PFN_vkGetDeviceMemoryOpaqueCaptureAddress)loadDeviceAliased(addr, device, "vkGetDeviceMemoryOpaqueCaptureAddress", {"vkGetDeviceMemoryOpaqueCaptureAddressKHR"}))
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
, vkCreatePrivateDataSlot((PFN_vkCreatePrivateDataSlot)loadDeviceAliased(addr, device, "vkCreatePrivateDataSlot", {"vkCreatePrivateDataSlotEXT"}))
, vkDestroyPrivateDataSlot((PFN_vkDestroyPrivateDataSlot)loadDeviceAliased(addr, device, "vkDestroyPrivateDataSlot", {"vkDestroyPrivateDataSlotEXT"}))
, vkSetPrivateData((PFN_vkSetPrivateData)loadDeviceAliased(addr, device, "vkSetPrivateData", {"vkSetPrivateDataEXT"}))
, vkGetPrivateData((PFN_vkGetPrivateData)loadDeviceAliased(addr, device, "vkGetPrivateData", {"vkGetPrivateDataEXT"}))
, vkCmdSetEvent2((PFN_vkCmdSetEvent2)loadDeviceAliased(addr, device, "vkCmdSetEvent2", {"vkCmdSetEvent2KHR"}))
, vkCmdResetEvent2((PFN_vkCmdResetEvent2)loadDeviceAliased(addr, device, "vkCmdResetEvent2", {"vkCmdResetEvent2KHR"}))
, vkCmdWaitEvents2((PFN_vkCmdWaitEvents2)loadDeviceAliased(addr, device, "vkCmdWaitEvents2", {"vkCmdWaitEvents2KHR"}))
, vkCmdPipelineBarrier2((PFN_vkCmdPipelineBarrier2)loadDeviceAliased(addr, device, "vkCmdPipelineBarrier2", {"vkCmdPipelineBarrier2KHR"}))
, vkCmdWriteTimestamp2((PFN_vkCmdWriteTimestamp2)loadDeviceAliased(addr, device, "vkCmdWriteTimestamp2", {"vkCmdWriteTimestamp2KHR"}))
, vkQueueSubmit2((PFN_vkQueueSubmit2)loadDeviceAliased(addr, device, "vkQueueSubmit2", {"vkQueueSubmit2KHR"}))
, vkCmdCopyBuffer2((PFN_vkCmdCopyBuffer2)loadDeviceAliased(addr, device, "vkCmdCopyBuffer2", {"vkCmdCopyBuffer2KHR"}))
, vkCmdCopyImage2((PFN_vkCmdCopyImage2)loadDeviceAliased(addr, device, "vkCmdCopyImage2", {"vkCmdCopyImage2KHR"}))
, vkCmdCopyBufferToImage2((PFN_vkCmdCopyBufferToImage2)loadDeviceAliased(addr, device, "vkCmdCopyBufferToImage2", {"vkCmdCopyBufferToImage2KHR"}))
, vkCmdCopyImageToBuffer2((PFN_vkCmdCopyImageToBuffer2)loadDeviceAliased(addr, device, "vkCmdCopyImageToBuffer2", {"vkCmdCopyImageToBuffer2KHR"}))
, vkCmdBlitImage2((PFN_vkCmdBlitImage2)loadDeviceAliased(addr, device, "vkCmdBlitImage2", {"vkCmdBlitImage2KHR"}))
, vkCmdResolveImage2((PFN_vkCmdResolveImage2)loadDeviceAliased(addr, device, "vkCmdResolveImage2", {"vkCmdResolveImage2KHR"}))
, vkCmdBeginRendering((PFN_vkCmdBeginRendering)loadDeviceAliased(addr, device, "vkCmdBeginRendering", {"vkCmdBeginRenderingKHR"}))
, vkCmdEndRendering((PFN_vkCmdEndRendering)loadDeviceAliased(addr, device, "vkCmdEndRendering", {"vkCmdEndRenderingKHR"}))
, vkCmdSetCullMode((PFN_vkCmdSetCullMode)loadDeviceAliased(addr, device, "vkCmdSetCullMode", {"vkCmdSetCullModeEXT"}))
, vkCmdSetFrontFace((PFN_vkCmdSetFrontFace)loadDeviceAliased(addr, device, "vkCmdSetFrontFace", {"vkCmdSetFrontFaceEXT"}))
, vkCmdSetPrimitiveTopology((PFN_vkCmdSetPrimitiveTopology)loadDeviceAliased(addr, device, "vkCmdSetPrimitiveTopology", {"vkCmdSetPrimitiveTopologyEXT"}))
, vkCmdSetViewportWithCount((PFN_vkCmdSetViewportWithCount)loadDeviceAliased(addr, device, "vkCmdSetViewportWithCount", {"vkCmdSetViewportWithCountEXT"}))
, vkCmdSetScissorWithCount((PFN_vkCmdSetScissorWithCount)loadDeviceAliased(addr, device, "vkCmdSetScissorWithCount", {"vkCmdSetScissorWithCountEXT"}))
, vkCmdBindVertexBuffers2((PFN_vkCmdBindVertexBuffers2)loadDeviceAliased(addr, device, "vkCmdBindVertexBuffers2", {"vkCmdBindVertexBuffers2EXT"}))
, vkCmdSetDepthTestEnable((PFN_vkCmdSetDepthTestEnable)loadDeviceAliased(addr, device, "vkCmdSetDepthTestEnable", {"vkCmdSetDepthTestEnableEXT"}))
, vkCmdSetDepthWriteEnable((PFN_vkCmdSetDepthWriteEnable)loadDeviceAliased(addr, device, "vkCmdSetDepthWriteEnable", {"vkCmdSetDepthWriteEnableEXT"}))
, vkCmdSetDepthCompareOp((PFN_vkCmdSetDepthCompareOp)loadDeviceAliased(addr, device, "vkCmdSetDepthCompareOp", {"vkCmdSetDepthCompareOpEXT"}))
, vkCmdSetDepthBoundsTestEnable((PFN_vkCmdSetDepthBoundsTestEnable)loadDeviceAliased(addr, device, "vkCmdSetDepthBoundsTestEnable", {"vkCmdSetDepthBoundsTestEnableEXT"}))
, vkCmdSetStencilTestEnable((PFN_vkCmdSetStencilTestEnable)loadDeviceAliased(addr, device, "vkCmdSetStencilTestEnable", {"vkCmdSetStencilTestEnableEXT"}))
, vkCmdSetStencilOp((PFN_vkCmdSetStencilOp)loadDeviceAliased(addr, device, "vkCmdSetStencilOp", {"vkCmdSetStencilOpEXT"}))
, vkCmdSetRasterizerDiscardEnable((PFN_vkCmdSetRasterizerDiscardEnable)loadDeviceAliased(addr, device, "vkCmdSetRasterizerDiscardEnable", {"vkCmdSetRasterizerDiscardEnableEXT"}))
, vkCmdSetDepthBiasEnable((PFN_vkCmdSetDepthBiasEnable)loadDeviceAliased(addr, device, "vkCmdSetDepthBiasEnable", {"vkCmdSetDepthBiasEnableEXT"}))
, vkCmdSetPrimitiveRestartEnable((PFN_vkCmdSetPrimitiveRestartEnable)loadDeviceAliased(addr, device, "vkCmdSetPrimitiveRestartEnable", {"vkCmdSetPrimitiveRestartEnableEXT"}))
, vkGetDeviceBufferMemoryRequirements((PFN_vkGetDeviceBufferMemoryRequirements)loadDeviceAliased(addr, device, "vkGetDeviceBufferMemoryRequirements", {"vkGetDeviceBufferMemoryRequirementsKHR"}))
, vkGetDeviceImageMemoryRequirements((PFN_vkGetDeviceImageMemoryRequirements)loadDeviceAliased(addr, device, "vkGetDeviceImageMemoryRequirements", {"vkGetDeviceImageMemoryRequirementsKHR"}))
, vkGetDeviceImageSparseMemoryRequirements((PFN_vkGetDeviceImageSparseMemoryRequirements)loadDeviceAliased(addr, device, "vkGetDeviceImageSparseMemoryRequirements", {"vkGetDeviceImageSparseMemoryRequirementsKHR"}))
#endif /* defined(VK_VERSION_1_3) */
#if defined(VKSC_VERSION_1_0)
, vkGetCommandPoolMemoryConsumption((PFN_vkGetCommandPoolMemoryConsumption)addr(device, "vkGetCommandPoolMemoryConsumption"))
, vkGetFaultData((PFN_vkGetFaultData)addr(device, "vkGetFaultData"))
#endif /* defined(VKSC_VERSION_1_0) */
#if defined(VK_KHR_swapchain)
, vkCreateSwapchainKHR((PFN_vkCreateSwapchainKHR)addr(device, "vkCreateSwapchainKHR"))
, vkDestroySwapchainKHR((PFN_vkDestroySwapchainKHR)addr(device, "vkDestroySwapchainKHR"))
, vkGetSwapchainImagesKHR((PFN_vkGetSwapchainImagesKHR)addr(device, "vkGetSwapchainImagesKHR"))
, vkAcquireNextImageKHR((PFN_vkAcquireNextImageKHR)addr(device, "vkAcquireNextImageKHR"))
, vkQueuePresentKHR((PFN_vkQueuePresentKHR)addr(device, "vkQueuePresentKHR"))
#endif /* defined(VK_KHR_swapchain) */
#if (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
, vkGetDeviceGroupPresentCapabilitiesKHR((PFN_vkGetDeviceGroupPresentCapabilitiesKHR)addr(device, "vkGetDeviceGroupPresentCapabilitiesKHR"))
, vkGetDeviceGroupSurfacePresentModesKHR((PFN_vkGetDeviceGroupSurfacePresentModesKHR)addr(device, "vkGetDeviceGroupSurfacePresentModesKHR"))
#endif /* (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) */
#if (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain))
, vkAcquireNextImage2KHR((PFN_vkAcquireNextImage2KHR)addr(device, "vkAcquireNextImage2KHR"))
#endif /* (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) */
#if defined(VK_KHR_display_swapchain)
, vkCreateSharedSwapchainsKHR((PFN_vkCreateSharedSwapchainsKHR)addr(device, "vkCreateSharedSwapchainsKHR"))
#endif /* defined(VK_KHR_display_swapchain) */
#if defined(VK_EXT_debug_marker)
, vkDebugMarkerSetObjectTagEXT((PFN_vkDebugMarkerSetObjectTagEXT)addr(device, "vkDebugMarkerSetObjectTagEXT"))
, vkDebugMarkerSetObjectNameEXT((PFN_vkDebugMarkerSetObjectNameEXT)addr(device, "vkDebugMarkerSetObjectNameEXT"))
, vkCmdDebugMarkerBeginEXT((PFN_vkCmdDebugMarkerBeginEXT)addr(device, "vkCmdDebugMarkerBeginEXT"))
, vkCmdDebugMarkerEndEXT((PFN_vkCmdDebugMarkerEndEXT)addr(device, "vkCmdDebugMarkerEndEXT"))
, vkCmdDebugMarkerInsertEXT((PFN_vkCmdDebugMarkerInsertEXT)addr(device, "vkCmdDebugMarkerInsertEXT"))
#endif /* defined(VK_EXT_debug_marker) */
#if defined(VK_KHR_video_queue)
, vkCreateVideoSessionKHR((PFN_vkCreateVideoSessionKHR)addr(device, "vkCreateVideoSessionKHR"))
, vkDestroyVideoSessionKHR((PFN_vkDestroyVideoSessionKHR)addr(device, "vkDestroyVideoSessionKHR"))
, vkGetVideoSessionMemoryRequirementsKHR((PFN_vkGetVideoSessionMemoryRequirementsKHR)addr(device, "vkGetVideoSessionMemoryRequirementsKHR"))
, vkBindVideoSessionMemoryKHR((PFN_vkBindVideoSessionMemoryKHR)addr(device, "vkBindVideoSessionMemoryKHR"))
, vkCreateVideoSessionParametersKHR((PFN_vkCreateVideoSessionParametersKHR)addr(device, "vkCreateVideoSessionParametersKHR"))
, vkUpdateVideoSessionParametersKHR((PFN_vkUpdateVideoSessionParametersKHR)addr(device, "vkUpdateVideoSessionParametersKHR"))
, vkDestroyVideoSessionParametersKHR((PFN_vkDestroyVideoSessionParametersKHR)addr(device, "vkDestroyVideoSessionParametersKHR"))
, vkCmdBeginVideoCodingKHR((PFN_vkCmdBeginVideoCodingKHR)addr(device, "vkCmdBeginVideoCodingKHR"))
, vkCmdEndVideoCodingKHR((PFN_vkCmdEndVideoCodingKHR)addr(device, "vkCmdEndVideoCodingKHR"))
, vkCmdControlVideoCodingKHR((PFN_vkCmdControlVideoCodingKHR)addr(device, "vkCmdControlVideoCodingKHR"))
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_decode_queue)
, vkCmdDecodeVideoKHR((PFN_vkCmdDecodeVideoKHR)addr(device, "vkCmdDecodeVideoKHR"))
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_EXT_transform_feedback)
, vkCmdBindTransformFeedbackBuffersEXT((PFN_vkCmdBindTransformFeedbackBuffersEXT)addr(device, "vkCmdBindTransformFeedbackBuffersEXT"))
, vkCmdBeginTransformFeedbackEXT((PFN_vkCmdBeginTransformFeedbackEXT)addr(device, "vkCmdBeginTransformFeedbackEXT"))
, vkCmdEndTransformFeedbackEXT((PFN_vkCmdEndTransformFeedbackEXT)addr(device, "vkCmdEndTransformFeedbackEXT"))
, vkCmdBeginQueryIndexedEXT((PFN_vkCmdBeginQueryIndexedEXT)addr(device, "vkCmdBeginQueryIndexedEXT"))
, vkCmdEndQueryIndexedEXT((PFN_vkCmdEndQueryIndexedEXT)addr(device, "vkCmdEndQueryIndexedEXT"))
, vkCmdDrawIndirectByteCountEXT((PFN_vkCmdDrawIndirectByteCountEXT)addr(device, "vkCmdDrawIndirectByteCountEXT"))
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_NVX_binary_import)
, vkCreateCuModuleNVX((PFN_vkCreateCuModuleNVX)addr(device, "vkCreateCuModuleNVX"))
, vkCreateCuFunctionNVX((PFN_vkCreateCuFunctionNVX)addr(device, "vkCreateCuFunctionNVX"))
, vkDestroyCuModuleNVX((PFN_vkDestroyCuModuleNVX)addr(device, "vkDestroyCuModuleNVX"))
, vkDestroyCuFunctionNVX((PFN_vkDestroyCuFunctionNVX)addr(device, "vkDestroyCuFunctionNVX"))
, vkCmdCuLaunchKernelNVX((PFN_vkCmdCuLaunchKernelNVX)addr(device, "vkCmdCuLaunchKernelNVX"))
#endif /* defined(VK_NVX_binary_import) */
#if defined(VK_NVX_image_view_handle)
, vkGetImageViewHandleNVX((PFN_vkGetImageViewHandleNVX)addr(device, "vkGetImageViewHandleNVX"))
, vkGetImageViewAddressNVX((PFN_vkGetImageViewAddressNVX)addr(device, "vkGetImageViewAddressNVX"))
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_AMD_draw_indirect_count)
, vkCmdDrawIndirectCountAMD((PFN_vkCmdDrawIndirectCountAMD)loadDeviceAliased(addr, device, "vkCmdDrawIndirectCount", {"vkCmdDrawIndirectCountAMD", "vkCmdDrawIndirectCountKHR"}))
, vkCmdDrawIndexedIndirectCountAMD((PFN_vkCmdDrawIndexedIndirectCountAMD)loadDeviceAliased(addr, device, "vkCmdDrawIndexedIndirectCount", {"vkCmdDrawIndexedIndirectCountAMD", "vkCmdDrawIndexedIndirectCountKHR"}))
#endif /* defined(VK_AMD_draw_indirect_count) */
#if defined(VK_AMD_shader_info)
, vkGetShaderInfoAMD((PFN_vkGetShaderInfoAMD)addr(device, "vkGetShaderInfoAMD"))
#endif /* defined(VK_AMD_shader_info) */
#if defined(VK_KHR_dynamic_rendering)
, vkCmdBeginRenderingKHR((PFN_vkCmdBeginRenderingKHR)loadDeviceAliased(addr, device, "vkCmdBeginRendering", {"vkCmdBeginRenderingKHR"}))
, vkCmdEndRenderingKHR((PFN_vkCmdEndRenderingKHR)loadDeviceAliased(addr, device, "vkCmdEndRendering", {"vkCmdEndRenderingKHR"}))
#endif /* defined(VK_KHR_dynamic_rendering) */
#if defined(VK_NV_external_memory_win32)
, vkGetMemoryWin32HandleNV((PFN_vkGetMemoryWin32HandleNV)addr(device, "vkGetMemoryWin32HandleNV"))
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_KHR_device_group)
, vkGetDeviceGroupPeerMemoryFeaturesKHR((PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)loadDeviceAliased(addr, device, "vkGetDeviceGroupPeerMemoryFeatures", {"vkGetDeviceGroupPeerMemoryFeaturesKHR"}))
, vkCmdSetDeviceMaskKHR((PFN_vkCmdSetDeviceMaskKHR)loadDeviceAliased(addr, device, "vkCmdSetDeviceMask", {"vkCmdSetDeviceMaskKHR"}))
, vkCmdDispatchBaseKHR((PFN_vkCmdDispatchBaseKHR)loadDeviceAliased(addr, device, "vkCmdDispatchBase", {"vkCmdDispatchBaseKHR"}))
#endif /* defined(VK_KHR_device_group) */
#if defined(VK_KHR_maintenance1)
, vkTrimCommandPoolKHR((PFN_vkTrimCommandPoolKHR)loadDeviceAliased(addr, device, "vkTrimCommandPool", {"vkTrimCommandPoolKHR"}))
#endif /* defined(VK_KHR_maintenance1) */
#if defined(VK_KHR_external_memory_win32)
, vkGetMemoryWin32HandleKHR((PFN_vkGetMemoryWin32HandleKHR)addr(device, "vkGetMemoryWin32HandleKHR"))
, vkGetMemoryWin32HandlePropertiesKHR((PFN_vkGetMemoryWin32HandlePropertiesKHR)addr(device, "vkGetMemoryWin32HandlePropertiesKHR"))
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_KHR_external_memory_fd)
, vkGetMemoryFdKHR((PFN_vkGetMemoryFdKHR)addr(device, "vkGetMemoryFdKHR"))
, vkGetMemoryFdPropertiesKHR((PFN_vkGetMemoryFdPropertiesKHR)addr(device, "vkGetMemoryFdPropertiesKHR"))
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_KHR_external_semaphore_win32)
, vkImportSemaphoreWin32HandleKHR((PFN_vkImportSemaphoreWin32HandleKHR)addr(device, "vkImportSemaphoreWin32HandleKHR"))
, vkGetSemaphoreWin32HandleKHR((PFN_vkGetSemaphoreWin32HandleKHR)addr(device, "vkGetSemaphoreWin32HandleKHR"))
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_KHR_external_semaphore_fd)
, vkImportSemaphoreFdKHR((PFN_vkImportSemaphoreFdKHR)addr(device, "vkImportSemaphoreFdKHR"))
, vkGetSemaphoreFdKHR((PFN_vkGetSemaphoreFdKHR)addr(device, "vkGetSemaphoreFdKHR"))
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_push_descriptor)
, vkCmdPushDescriptorSetKHR((PFN_vkCmdPushDescriptorSetKHR)addr(device, "vkCmdPushDescriptorSetKHR"))
#endif /* defined(VK_KHR_push_descriptor) */
#if (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) || (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor))
, vkCmdPushDescriptorSetWithTemplateKHR((PFN_vkCmdPushDescriptorSetWithTemplateKHR)addr(device, "vkCmdPushDescriptorSetWithTemplateKHR"))
#endif /* (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) || (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) */
#if defined(VK_EXT_conditional_rendering)
, vkCmdBeginConditionalRenderingEXT((PFN_vkCmdBeginConditionalRenderingEXT)addr(device, "vkCmdBeginConditionalRenderingEXT"))
, vkCmdEndConditionalRenderingEXT((PFN_vkCmdEndConditionalRenderingEXT)addr(device, "vkCmdEndConditionalRenderingEXT"))
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_KHR_descriptor_update_template)
, vkCreateDescriptorUpdateTemplateKHR((PFN_vkCreateDescriptorUpdateTemplateKHR)loadDeviceAliased(addr, device, "vkCreateDescriptorUpdateTemplate", {"vkCreateDescriptorUpdateTemplateKHR"}))
, vkDestroyDescriptorUpdateTemplateKHR((PFN_vkDestroyDescriptorUpdateTemplateKHR)loadDeviceAliased(addr, device, "vkDestroyDescriptorUpdateTemplate", {"vkDestroyDescriptorUpdateTemplateKHR"}))
, vkUpdateDescriptorSetWithTemplateKHR((PFN_vkUpdateDescriptorSetWithTemplateKHR)loadDeviceAliased(addr, device, "vkUpdateDescriptorSetWithTemplate", {"vkUpdateDescriptorSetWithTemplateKHR"}))
#endif /* defined(VK_KHR_descriptor_update_template) */
#if defined(VK_NV_clip_space_w_scaling)
, vkCmdSetViewportWScalingNV((PFN_vkCmdSetViewportWScalingNV)addr(device, "vkCmdSetViewportWScalingNV"))
#endif /* defined(VK_NV_clip_space_w_scaling) */
#if defined(VK_EXT_display_control)
, vkDisplayPowerControlEXT((PFN_vkDisplayPowerControlEXT)addr(device, "vkDisplayPowerControlEXT"))
, vkRegisterDeviceEventEXT((PFN_vkRegisterDeviceEventEXT)addr(device, "vkRegisterDeviceEventEXT"))
, vkRegisterDisplayEventEXT((PFN_vkRegisterDisplayEventEXT)addr(device, "vkRegisterDisplayEventEXT"))
, vkGetSwapchainCounterEXT((PFN_vkGetSwapchainCounterEXT)addr(device, "vkGetSwapchainCounterEXT"))
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_GOOGLE_display_timing)
, vkGetRefreshCycleDurationGOOGLE((PFN_vkGetRefreshCycleDurationGOOGLE)addr(device, "vkGetRefreshCycleDurationGOOGLE"))
, vkGetPastPresentationTimingGOOGLE((PFN_vkGetPastPresentationTimingGOOGLE)addr(device, "vkGetPastPresentationTimingGOOGLE"))
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_EXT_discard_rectangles)
, vkCmdSetDiscardRectangleEXT((PFN_vkCmdSetDiscardRectangleEXT)addr(device, "vkCmdSetDiscardRectangleEXT"))
#if (VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION == 2)
, vkCmdSetDiscardRectangleEnableEXT((PFN_vkCmdSetDiscardRectangleEnableEXT)addr(device, "vkCmdSetDiscardRectangleEnableEXT"))
, vkCmdSetDiscardRectangleModeEXT((PFN_vkCmdSetDiscardRectangleModeEXT)addr(device, "vkCmdSetDiscardRectangleModeEXT"))
#endif
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_EXT_hdr_metadata)
, vkSetHdrMetadataEXT((PFN_vkSetHdrMetadataEXT)addr(device, "vkSetHdrMetadataEXT"))
#endif /* defined(VK_EXT_hdr_metadata) */
#if defined(VK_KHR_create_renderpass2)
, vkCreateRenderPass2KHR((PFN_vkCreateRenderPass2KHR)loadDeviceAliased(addr, device, "vkCreateRenderPass2", {"vkCreateRenderPass2KHR"}))
, vkCmdBeginRenderPass2KHR((PFN_vkCmdBeginRenderPass2KHR)loadDeviceAliased(addr, device, "vkCmdBeginRenderPass2", {"vkCmdBeginRenderPass2KHR"}))
, vkCmdNextSubpass2KHR((PFN_vkCmdNextSubpass2KHR)loadDeviceAliased(addr, device, "vkCmdNextSubpass2", {"vkCmdNextSubpass2KHR"}))
, vkCmdEndRenderPass2KHR((PFN_vkCmdEndRenderPass2KHR)loadDeviceAliased(addr, device, "vkCmdEndRenderPass2", {"vkCmdEndRenderPass2KHR"}))
#endif /* defined(VK_KHR_create_renderpass2) */
#if defined(VK_KHR_shared_presentable_image)
, vkGetSwapchainStatusKHR((PFN_vkGetSwapchainStatusKHR)addr(device, "vkGetSwapchainStatusKHR"))
#endif /* defined(VK_KHR_shared_presentable_image) */
#if defined(VK_KHR_external_fence_win32)
, vkImportFenceWin32HandleKHR((PFN_vkImportFenceWin32HandleKHR)addr(device, "vkImportFenceWin32HandleKHR"))
, vkGetFenceWin32HandleKHR((PFN_vkGetFenceWin32HandleKHR)addr(device, "vkGetFenceWin32HandleKHR"))
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_KHR_external_fence_fd)
, vkImportFenceFdKHR((PFN_vkImportFenceFdKHR)addr(device, "vkImportFenceFdKHR"))
, vkGetFenceFdKHR((PFN_vkGetFenceFdKHR)addr(device, "vkGetFenceFdKHR"))
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_performance_query)
, vkAcquireProfilingLockKHR((PFN_vkAcquireProfilingLockKHR)addr(device, "vkAcquireProfilingLockKHR"))
, vkReleaseProfilingLockKHR((PFN_vkReleaseProfilingLockKHR)addr(device, "vkReleaseProfilingLockKHR"))
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
, vkGetAndroidHardwareBufferPropertiesANDROID((PFN_vkGetAndroidHardwareBufferPropertiesANDROID)addr(device, "vkGetAndroidHardwareBufferPropertiesANDROID"))
, vkGetMemoryAndroidHardwareBufferANDROID((PFN_vkGetMemoryAndroidHardwareBufferANDROID)addr(device, "vkGetMemoryAndroidHardwareBufferANDROID"))
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_AMDX_shader_enqueue)
, vkCreateExecutionGraphPipelinesAMDX((PFN_vkCreateExecutionGraphPipelinesAMDX)addr(device, "vkCreateExecutionGraphPipelinesAMDX"))
, vkGetExecutionGraphPipelineScratchSizeAMDX((PFN_vkGetExecutionGraphPipelineScratchSizeAMDX)addr(device, "vkGetExecutionGraphPipelineScratchSizeAMDX"))
, vkGetExecutionGraphPipelineNodeIndexAMDX((PFN_vkGetExecutionGraphPipelineNodeIndexAMDX)addr(device, "vkGetExecutionGraphPipelineNodeIndexAMDX"))
, vkCmdInitializeGraphScratchMemoryAMDX((PFN_vkCmdInitializeGraphScratchMemoryAMDX)addr(device, "vkCmdInitializeGraphScratchMemoryAMDX"))
, vkCmdDispatchGraphAMDX((PFN_vkCmdDispatchGraphAMDX)addr(device, "vkCmdDispatchGraphAMDX"))
, vkCmdDispatchGraphIndirectAMDX((PFN_vkCmdDispatchGraphIndirectAMDX)addr(device, "vkCmdDispatchGraphIndirectAMDX"))
, vkCmdDispatchGraphIndirectCountAMDX((PFN_vkCmdDispatchGraphIndirectCountAMDX)addr(device, "vkCmdDispatchGraphIndirectCountAMDX"))
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_EXT_sample_locations)
, vkCmdSetSampleLocationsEXT((PFN_vkCmdSetSampleLocationsEXT)addr(device, "vkCmdSetSampleLocationsEXT"))
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_KHR_get_memory_requirements2)
, vkGetImageMemoryRequirements2KHR((PFN_vkGetImageMemoryRequirements2KHR)loadDeviceAliased(addr, device, "vkGetImageMemoryRequirements2", {"vkGetImageMemoryRequirements2KHR"}))
, vkGetBufferMemoryRequirements2KHR((PFN_vkGetBufferMemoryRequirements2KHR)loadDeviceAliased(addr, device, "vkGetBufferMemoryRequirements2", {"vkGetBufferMemoryRequirements2KHR"}))
, vkGetImageSparseMemoryRequirements2KHR((PFN_vkGetImageSparseMemoryRequirements2KHR)loadDeviceAliased(addr, device, "vkGetImageSparseMemoryRequirements2", {"vkGetImageSparseMemoryRequirements2KHR"}))
#endif /* defined(VK_KHR_get_memory_requirements2) */
#if defined(VK_KHR_acceleration_structure)
, vkCreateAccelerationStructureKHR((PFN_vkCreateAccelerationStructureKHR)addr(device, "vkCreateAccelerationStructureKHR"))
, vkDestroyAccelerationStructureKHR((PFN_vkDestroyAccelerationStructureKHR)addr(device, "vkDestroyAccelerationStructureKHR"))
, vkCmdBuildAccelerationStructuresKHR((PFN_vkCmdBuildAccelerationStructuresKHR)addr(device, "vkCmdBuildAccelerationStructuresKHR"))
, vkCmdBuildAccelerationStructuresIndirectKHR((PFN_vkCmdBuildAccelerationStructuresIndirectKHR)addr(device, "vkCmdBuildAccelerationStructuresIndirectKHR"))
, vkBuildAccelerationStructuresKHR((PFN_vkBuildAccelerationStructuresKHR)addr(device, "vkBuildAccelerationStructuresKHR"))
, vkCopyAccelerationStructureKHR((PFN_vkCopyAccelerationStructureKHR)addr(device, "vkCopyAccelerationStructureKHR"))
, vkCopyAccelerationStructureToMemoryKHR((PFN_vkCopyAccelerationStructureToMemoryKHR)addr(device, "vkCopyAccelerationStructureToMemoryKHR"))
, vkCopyMemoryToAccelerationStructureKHR((PFN_vkCopyMemoryToAccelerationStructureKHR)addr(device, "vkCopyMemoryToAccelerationStructureKHR"))
, vkWriteAccelerationStructuresPropertiesKHR((PFN_vkWriteAccelerationStructuresPropertiesKHR)addr(device, "vkWriteAccelerationStructuresPropertiesKHR"))
, vkCmdCopyAccelerationStructureKHR((PFN_vkCmdCopyAccelerationStructureKHR)addr(device, "vkCmdCopyAccelerationStructureKHR"))
, vkCmdCopyAccelerationStructureToMemoryKHR((PFN_vkCmdCopyAccelerationStructureToMemoryKHR)addr(device, "vkCmdCopyAccelerationStructureToMemoryKHR"))
, vkCmdCopyMemoryToAccelerationStructureKHR((PFN_vkCmdCopyMemoryToAccelerationStructureKHR)addr(device, "vkCmdCopyMemoryToAccelerationStructureKHR"))
, vkGetAccelerationStructureDeviceAddressKHR((PFN_vkGetAccelerationStructureDeviceAddressKHR)addr(device, "vkGetAccelerationStructureDeviceAddressKHR"))
, vkCmdWriteAccelerationStructuresPropertiesKHR((PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)addr(device, "vkCmdWriteAccelerationStructuresPropertiesKHR"))
, vkGetDeviceAccelerationStructureCompatibilityKHR((PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)addr(device, "vkGetDeviceAccelerationStructureCompatibilityKHR"))
, vkGetAccelerationStructureBuildSizesKHR((PFN_vkGetAccelerationStructureBuildSizesKHR)addr(device, "vkGetAccelerationStructureBuildSizesKHR"))
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_KHR_ray_tracing_pipeline)
, vkCmdTraceRaysKHR((PFN_vkCmdTraceRaysKHR)addr(device, "vkCmdTraceRaysKHR"))
, vkCreateRayTracingPipelinesKHR((PFN_vkCreateRayTracingPipelinesKHR)addr(device, "vkCreateRayTracingPipelinesKHR"))
, vkGetRayTracingShaderGroupHandlesKHR((PFN_vkGetRayTracingShaderGroupHandlesKHR)loadDeviceAliased(addr, device, "vkGetRayTracingShaderGroupHandlesKHR", {"vkGetRayTracingShaderGroupHandlesNV"}))
, vkGetRayTracingCaptureReplayShaderGroupHandlesKHR((PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)addr(device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"))
, vkCmdTraceRaysIndirectKHR((PFN_vkCmdTraceRaysIndirectKHR)addr(device, "vkCmdTraceRaysIndirectKHR"))
, vkGetRayTracingShaderGroupStackSizeKHR((PFN_vkGetRayTracingShaderGroupStackSizeKHR)addr(device, "vkGetRayTracingShaderGroupStackSizeKHR"))
, vkCmdSetRayTracingPipelineStackSizeKHR((PFN_vkCmdSetRayTracingPipelineStackSizeKHR)addr(device, "vkCmdSetRayTracingPipelineStackSizeKHR"))
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_sampler_ycbcr_conversion)
, vkCreateSamplerYcbcrConversionKHR((PFN_vkCreateSamplerYcbcrConversionKHR)loadDeviceAliased(addr, device, "vkCreateSamplerYcbcrConversion", {"vkCreateSamplerYcbcrConversionKHR"}))
, vkDestroySamplerYcbcrConversionKHR((PFN_vkDestroySamplerYcbcrConversionKHR)loadDeviceAliased(addr, device, "vkDestroySamplerYcbcrConversion", {"vkDestroySamplerYcbcrConversionKHR"}))
#endif /* defined(VK_KHR_sampler_ycbcr_conversion) */
#if defined(VK_KHR_bind_memory2)
, vkBindBufferMemory2KHR((PFN_vkBindBufferMemory2KHR)loadDeviceAliased(addr, device, "vkBindBufferMemory2", {"vkBindBufferMemory2KHR"}))
, vkBindImageMemory2KHR((PFN_vkBindImageMemory2KHR)loadDeviceAliased(addr, device, "vkBindImageMemory2", {"vkBindImageMemory2KHR"}))
#endif /* defined(VK_KHR_bind_memory2) */
#if defined(VK_EXT_image_drm_format_modifier)
, vkGetImageDrmFormatModifierPropertiesEXT((PFN_vkGetImageDrmFormatModifierPropertiesEXT)addr(device, "vkGetImageDrmFormatModifierPropertiesEXT"))
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_EXT_validation_cache)
, vkCreateValidationCacheEXT((PFN_vkCreateValidationCacheEXT)addr(device, "vkCreateValidationCacheEXT"))
, vkDestroyValidationCacheEXT((PFN_vkDestroyValidationCacheEXT)addr(device, "vkDestroyValidationCacheEXT"))
, vkMergeValidationCachesEXT((PFN_vkMergeValidationCachesEXT)addr(device, "vkMergeValidationCachesEXT"))
, vkGetValidationCacheDataEXT((PFN_vkGetValidationCacheDataEXT)addr(device, "vkGetValidationCacheDataEXT"))
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_NV_shading_rate_image)
, vkCmdBindShadingRateImageNV((PFN_vkCmdBindShadingRateImageNV)addr(device, "vkCmdBindShadingRateImageNV"))
, vkCmdSetViewportShadingRatePaletteNV((PFN_vkCmdSetViewportShadingRatePaletteNV)addr(device, "vkCmdSetViewportShadingRatePaletteNV"))
, vkCmdSetCoarseSampleOrderNV((PFN_vkCmdSetCoarseSampleOrderNV)addr(device, "vkCmdSetCoarseSampleOrderNV"))
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_NV_ray_tracing)
, vkCreateAccelerationStructureNV((PFN_vkCreateAccelerationStructureNV)addr(device, "vkCreateAccelerationStructureNV"))
, vkDestroyAccelerationStructureNV((PFN_vkDestroyAccelerationStructureNV)addr(device, "vkDestroyAccelerationStructureNV"))
, vkGetAccelerationStructureMemoryRequirementsNV((PFN_vkGetAccelerationStructureMemoryRequirementsNV)addr(device, "vkGetAccelerationStructureMemoryRequirementsNV"))
, vkBindAccelerationStructureMemoryNV((PFN_vkBindAccelerationStructureMemoryNV)addr(device, "vkBindAccelerationStructureMemoryNV"))
, vkCmdBuildAccelerationStructureNV((PFN_vkCmdBuildAccelerationStructureNV)addr(device, "vkCmdBuildAccelerationStructureNV"))
, vkCmdCopyAccelerationStructureNV((PFN_vkCmdCopyAccelerationStructureNV)addr(device, "vkCmdCopyAccelerationStructureNV"))
, vkCmdTraceRaysNV((PFN_vkCmdTraceRaysNV)addr(device, "vkCmdTraceRaysNV"))
, vkCreateRayTracingPipelinesNV((PFN_vkCreateRayTracingPipelinesNV)addr(device, "vkCreateRayTracingPipelinesNV"))
, vkGetRayTracingShaderGroupHandlesNV((PFN_vkGetRayTracingShaderGroupHandlesNV)loadDeviceAliased(addr, device, "vkGetRayTracingShaderGroupHandlesKHR", {"vkGetRayTracingShaderGroupHandlesNV"}))
, vkGetAccelerationStructureHandleNV((PFN_vkGetAccelerationStructureHandleNV)addr(device, "vkGetAccelerationStructureHandleNV"))
, vkCmdWriteAccelerationStructuresPropertiesNV((PFN_vkCmdWriteAccelerationStructuresPropertiesNV)addr(device, "vkCmdWriteAccelerationStructuresPropertiesNV"))
, vkCompileDeferredNV((PFN_vkCompileDeferredNV)addr(device, "vkCompileDeferredNV"))
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_KHR_maintenance3)
, vkGetDescriptorSetLayoutSupportKHR((PFN_vkGetDescriptorSetLayoutSupportKHR)loadDeviceAliased(addr, device, "vkGetDescriptorSetLayoutSupport", {"vkGetDescriptorSetLayoutSupportKHR"}))
#endif /* defined(VK_KHR_maintenance3) */
#if defined(VK_KHR_draw_indirect_count)
, vkCmdDrawIndirectCountKHR((PFN_vkCmdDrawIndirectCountKHR)loadDeviceAliased(addr, device, "vkCmdDrawIndirectCount", {"vkCmdDrawIndirectCountAMD", "vkCmdDrawIndirectCountKHR"}))
, vkCmdDrawIndexedIndirectCountKHR((PFN_vkCmdDrawIndexedIndirectCountKHR)loadDeviceAliased(addr, device, "vkCmdDrawIndexedIndirectCount", {"vkCmdDrawIndexedIndirectCountAMD", "vkCmdDrawIndexedIndirectCountKHR"}))
#endif /* defined(VK_KHR_draw_indirect_count) */
#if defined(VK_EXT_external_memory_host)
, vkGetMemoryHostPointerPropertiesEXT((PFN_vkGetMemoryHostPointerPropertiesEXT)addr(device, "vkGetMemoryHostPointerPropertiesEXT"))
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_AMD_buffer_marker)
, vkCmdWriteBufferMarkerAMD((PFN_vkCmdWriteBufferMarkerAMD)addr(device, "vkCmdWriteBufferMarkerAMD"))
#endif /* defined(VK_AMD_buffer_marker) */
#if defined(VK_EXT_calibrated_timestamps)
, vkGetCalibratedTimestampsEXT((PFN_vkGetCalibratedTimestampsEXT)addr(device, "vkGetCalibratedTimestampsEXT"))
#endif /* defined(VK_EXT_calibrated_timestamps) */
#if defined(VK_NV_mesh_shader)
, vkCmdDrawMeshTasksNV((PFN_vkCmdDrawMeshTasksNV)addr(device, "vkCmdDrawMeshTasksNV"))
, vkCmdDrawMeshTasksIndirectNV((PFN_vkCmdDrawMeshTasksIndirectNV)addr(device, "vkCmdDrawMeshTasksIndirectNV"))
, vkCmdDrawMeshTasksIndirectCountNV((PFN_vkCmdDrawMeshTasksIndirectCountNV)addr(device, "vkCmdDrawMeshTasksIndirectCountNV"))
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_NV_scissor_exclusive)
#if (VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION == 2)
, vkCmdSetExclusiveScissorEnableNV((PFN_vkCmdSetExclusiveScissorEnableNV)addr(device, "vkCmdSetExclusiveScissorEnableNV"))
#endif
, vkCmdSetExclusiveScissorNV((PFN_vkCmdSetExclusiveScissorNV)addr(device, "vkCmdSetExclusiveScissorNV"))
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_NV_device_diagnostic_checkpoints)
, vkCmdSetCheckpointNV((PFN_vkCmdSetCheckpointNV)addr(device, "vkCmdSetCheckpointNV"))
, vkGetQueueCheckpointDataNV((PFN_vkGetQueueCheckpointDataNV)addr(device, "vkGetQueueCheckpointDataNV"))
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_KHR_timeline_semaphore)
, vkGetSemaphoreCounterValueKHR((PFN_vkGetSemaphoreCounterValueKHR)loadDeviceAliased(addr, device, "vkGetSemaphoreCounterValue", {"vkGetSemaphoreCounterValueKHR"}))
, vkWaitSemaphoresKHR((PFN_vkWaitSemaphoresKHR)loadDeviceAliased(addr, device, "vkWaitSemaphores", {"vkWaitSemaphoresKHR"}))
, vkSignalSemaphoreKHR((PFN_vkSignalSemaphoreKHR)loadDeviceAliased(addr, device, "vkSignalSemaphore", {"vkSignalSemaphoreKHR"}))
#endif /* defined(VK_KHR_timeline_semaphore) */
#if defined(VK_INTEL_performance_query)
, vkInitializePerformanceApiINTEL((PFN_vkInitializePerformanceApiINTEL)addr(device, "vkInitializePerformanceApiINTEL"))
, vkUninitializePerformanceApiINTEL((PFN_vkUninitializePerformanceApiINTEL)addr(device, "vkUninitializePerformanceApiINTEL"))
, vkCmdSetPerformanceMarkerINTEL((PFN_vkCmdSetPerformanceMarkerINTEL)addr(device, "vkCmdSetPerformanceMarkerINTEL"))
, vkCmdSetPerformanceStreamMarkerINTEL((PFN_vkCmdSetPerformanceStreamMarkerINTEL)addr(device, "vkCmdSetPerformanceStreamMarkerINTEL"))
, vkCmdSetPerformanceOverrideINTEL((PFN_vkCmdSetPerformanceOverrideINTEL)addr(device, "vkCmdSetPerformanceOverrideINTEL"))
, vkAcquirePerformanceConfigurationINTEL((PFN_vkAcquirePerformanceConfigurationINTEL)addr(device, "vkAcquirePerformanceConfigurationINTEL"))
, vkReleasePerformanceConfigurationINTEL((PFN_vkReleasePerformanceConfigurationINTEL)addr(device, "vkReleasePerformanceConfigurationINTEL"))
, vkQueueSetPerformanceConfigurationINTEL((PFN_vkQueueSetPerformanceConfigurationINTEL)addr(device, "vkQueueSetPerformanceConfigurationINTEL"))
, vkGetPerformanceParameterINTEL((PFN_vkGetPerformanceParameterINTEL)addr(device, "vkGetPerformanceParameterINTEL"))
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_AMD_display_native_hdr)
, vkSetLocalDimmingAMD((PFN_vkSetLocalDimmingAMD)addr(device, "vkSetLocalDimmingAMD"))
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_KHR_fragment_shading_rate)
, vkCmdSetFragmentShadingRateKHR((PFN_vkCmdSetFragmentShadingRateKHR)addr(device, "vkCmdSetFragmentShadingRateKHR"))
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_EXT_buffer_device_address)
, vkGetBufferDeviceAddressEXT((PFN_vkGetBufferDeviceAddressEXT)loadDeviceAliased(addr, device, "vkGetBufferDeviceAddress", {"vkGetBufferDeviceAddressEXT", "vkGetBufferDeviceAddressKHR"}))
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_KHR_present_wait)
, vkWaitForPresentKHR((PFN_vkWaitForPresentKHR)addr(device, "vkWaitForPresentKHR"))
#endif /* defined(VK_KHR_present_wait) */
#if defined(VK_EXT_full_screen_exclusive)
, vkAcquireFullScreenExclusiveModeEXT((PFN_vkAcquireFullScreenExclusiveModeEXT)addr(device, "vkAcquireFullScreenExclusiveModeEXT"))
, vkReleaseFullScreenExclusiveModeEXT((PFN_vkReleaseFullScreenExclusiveModeEXT)addr(device, "vkReleaseFullScreenExclusiveModeEXT"))
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1))
, vkGetDeviceGroupSurfacePresentModes2EXT((PFN_vkGetDeviceGroupSurfacePresentModes2EXT)addr(device, "vkGetDeviceGroupSurfacePresentModes2EXT"))
#endif /* (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1)) */
#if defined(VK_KHR_buffer_device_address)
, vkGetBufferDeviceAddressKHR((PFN_vkGetBufferDeviceAddressKHR)loadDeviceAliased(addr, device, "vkGetBufferDeviceAddress", {"vkGetBufferDeviceAddressEXT", "vkGetBufferDeviceAddressKHR"}))
, vkGetBufferOpaqueCaptureAddressKHR((PFN_vkGetBufferOpaqueCaptureAddressKHR)loadDeviceAliased(addr, device, "vkGetBufferOpaqueCaptureAddress", {"vkGetBufferOpaqueCaptureAddressKHR"}))
, vkGetDeviceMemoryOpaqueCaptureAddressKHR((PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)loadDeviceAliased(addr, device, "vkGetDeviceMemoryOpaqueCaptureAddress", {"vkGetDeviceMemoryOpaqueCaptureAddressKHR"}))
#endif /* defined(VK_KHR_buffer_device_address) */
#if defined(VK_EXT_line_rasterization)
, vkCmdSetLineStippleEXT((PFN_vkCmdSetLineStippleEXT)addr(device, "vkCmdSetLineStippleEXT"))
#endif /* defined(VK_EXT_line_rasterization) */
#if defined(VK_EXT_host_query_reset)
, vkResetQueryPoolEXT((PFN_vkResetQueryPoolEXT)loadDeviceAliased(addr, device, "vkResetQueryPool", {"vkResetQueryPoolEXT"}))
#endif /* defined(VK_EXT_host_query_reset) */
#if defined(VK_EXT_extended_dynamic_state)
, vkCmdSetCullModeEXT((PFN_vkCmdSetCullModeEXT)loadDeviceAliased(addr, device, "vkCmdSetCullMode", {"vkCmdSetCullModeEXT"}))
, vkCmdSetFrontFaceEXT((PFN_vkCmdSetFrontFaceEXT)loadDeviceAliased(addr, device, "vkCmdSetFrontFace", {"vkCmdSetFrontFaceEXT"}))
, vkCmdSetPrimitiveTopologyEXT((PFN_vkCmdSetPrimitiveTopologyEXT)loadDeviceAliased(addr, device, "vkCmdSetPrimitiveTopology", {"vkCmdSetPrimitiveTopologyEXT"}))
, vkCmdSetViewportWithCountEXT((PFN_vkCmdSetViewportWithCountEXT)loadDeviceAliased(addr, device, "vkCmdSetViewportWithCount", {"vkCmdSetViewportWithCountEXT"}))
, vkCmdSetScissorWithCountEXT((PFN_vkCmdSetScissorWithCountEXT)loadDeviceAliased(addr, device, "vkCmdSetScissorWithCount", {"vkCmdSetScissorWithCountEXT"}))
, vkCmdBindVertexBuffers2EXT((PFN_vkCmdBindVertexBuffers2EXT)loadDeviceAliased(addr, device, "vkCmdBindVertexBuffers2", {"vkCmdBindVertexBuffers2EXT"}))
, vkCmdSetDepthTestEnableEXT((PFN_vkCmdSetDepthTestEnableEXT)loadDeviceAliased(addr, device, "vkCmdSetDepthTestEnable", {"vkCmdSetDepthTestEnableEXT"}))
, vkCmdSetDepthWriteEnableEXT((PFN_vkCmdSetDepthWriteEnableEXT)loadDeviceAliased(addr, device, "vkCmdSetDepthWriteEnable", {"vkCmdSetDepthWriteEnableEXT"}))
, vkCmdSetDepthCompareOpEXT((PFN_vkCmdSetDepthCompareOpEXT)loadDeviceAliased(addr, device, "vkCmdSetDepthCompareOp", {"vkCmdSetDepthCompareOpEXT"}))
, vkCmdSetDepthBoundsTestEnableEXT((PFN_vkCmdSetDepthBoundsTestEnableEXT)loadDeviceAliased(addr, device, "vkCmdSetDepthBoundsTestEnable", {"vkCmdSetDepthBoundsTestEnableEXT"}))
, vkCmdSetStencilTestEnableEXT((PFN_vkCmdSetStencilTestEnableEXT)loadDeviceAliased(addr, device, "vkCmdSetStencilTestEnable", {"vkCmdSetStencilTestEnableEXT"}))
, vkCmdSetStencilOpEXT((PFN_vkCmdSetStencilOpEXT)loadDeviceAliased(addr, device, "vkCmdSetStencilOp", {"vkCmdSetStencilOpEXT"}))
#endif /* defined(VK_EXT_extended_dynamic_state) */
#if defined(VK_KHR_deferred_host_operations)
, vkCreateDeferredOperationKHR((PFN_vkCreateDeferredOperationKHR)addr(device, "vkCreateDeferredOperationKHR"))
, vkDestroyDeferredOperationKHR((PFN_vkDestroyDeferredOperationKHR)addr(device, "vkDestroyDeferredOperationKHR"))
, vkGetDeferredOperationMaxConcurrencyKHR((PFN_vkGetDeferredOperationMaxConcurrencyKHR)addr(device, "vkGetDeferredOperationMaxConcurrencyKHR"))
, vkGetDeferredOperationResultKHR((PFN_vkGetDeferredOperationResultKHR)addr(device, "vkGetDeferredOperationResultKHR"))
, vkDeferredOperationJoinKHR((PFN_vkDeferredOperationJoinKHR)addr(device, "vkDeferredOperationJoinKHR"))
#endif /* defined(VK_KHR_deferred_host_operations) */
#if defined(VK_KHR_pipeline_executable_properties)
, vkGetPipelineExecutablePropertiesKHR((PFN_vkGetPipelineExecutablePropertiesKHR)addr(device, "vkGetPipelineExecutablePropertiesKHR"))
, vkGetPipelineExecutableStatisticsKHR((PFN_vkGetPipelineExecutableStatisticsKHR)addr(device, "vkGetPipelineExecutableStatisticsKHR"))
, vkGetPipelineExecutableInternalRepresentationsKHR((PFN_vkGetPipelineExecutableInternalRepresentationsKHR)addr(device, "vkGetPipelineExecutableInternalRepresentationsKHR"))
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_EXT_host_image_copy)
, vkCopyMemoryToImageEXT((PFN_vkCopyMemoryToImageEXT)addr(device, "vkCopyMemoryToImageEXT"))
, vkCopyImageToMemoryEXT((PFN_vkCopyImageToMemoryEXT)addr(device, "vkCopyImageToMemoryEXT"))
, vkCopyImageToImageEXT((PFN_vkCopyImageToImageEXT)addr(device, "vkCopyImageToImageEXT"))
, vkTransitionImageLayoutEXT((PFN_vkTransitionImageLayoutEXT)addr(device, "vkTransitionImageLayoutEXT"))
, vkGetImageSubresourceLayout2EXT((PFN_vkGetImageSubresourceLayout2EXT)loadDeviceAliased(addr, device, "vkGetImageSubresourceLayout2KHR", {"vkGetImageSubresourceLayout2EXT"}))
#endif /* defined(VK_EXT_host_image_copy) */
#if defined(VK_KHR_map_memory2)
, vkMapMemory2KHR((PFN_vkMapMemory2KHR)addr(device, "vkMapMemory2KHR"))
, vkUnmapMemory2KHR((PFN_vkUnmapMemory2KHR)addr(device, "vkUnmapMemory2KHR"))
#endif /* defined(VK_KHR_map_memory2) */
#if defined(VK_EXT_swapchain_maintenance1)
, vkReleaseSwapchainImagesEXT((PFN_vkReleaseSwapchainImagesEXT)addr(device, "vkReleaseSwapchainImagesEXT"))
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_NV_device_generated_commands)
, vkGetGeneratedCommandsMemoryRequirementsNV((PFN_vkGetGeneratedCommandsMemoryRequirementsNV)addr(device, "vkGetGeneratedCommandsMemoryRequirementsNV"))
, vkCmdPreprocessGeneratedCommandsNV((PFN_vkCmdPreprocessGeneratedCommandsNV)addr(device, "vkCmdPreprocessGeneratedCommandsNV"))
, vkCmdExecuteGeneratedCommandsNV((PFN_vkCmdExecuteGeneratedCommandsNV)addr(device, "vkCmdExecuteGeneratedCommandsNV"))
, vkCmdBindPipelineShaderGroupNV((PFN_vkCmdBindPipelineShaderGroupNV)addr(device, "vkCmdBindPipelineShaderGroupNV"))
, vkCreateIndirectCommandsLayoutNV((PFN_vkCreateIndirectCommandsLayoutNV)addr(device, "vkCreateIndirectCommandsLayoutNV"))
, vkDestroyIndirectCommandsLayoutNV((PFN_vkDestroyIndirectCommandsLayoutNV)addr(device, "vkDestroyIndirectCommandsLayoutNV"))
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_depth_bias_control)
, vkCmdSetDepthBias2EXT((PFN_vkCmdSetDepthBias2EXT)addr(device, "vkCmdSetDepthBias2EXT"))
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_private_data)
, vkCreatePrivateDataSlotEXT((PFN_vkCreatePrivateDataSlotEXT)loadDeviceAliased(addr, device, "vkCreatePrivateDataSlot", {"vkCreatePrivateDataSlotEXT"}))
, vkDestroyPrivateDataSlotEXT((PFN_vkDestroyPrivateDataSlotEXT)loadDeviceAliased(addr, device, "vkDestroyPrivateDataSlot", {"vkDestroyPrivateDataSlotEXT"}))
, vkSetPrivateDataEXT((PFN_vkSetPrivateDataEXT)loadDeviceAliased(addr, device, "vkSetPrivateData", {"vkSetPrivateDataEXT"}))
, vkGetPrivateDataEXT((PFN_vkGetPrivateDataEXT)loadDeviceAliased(addr, device, "vkGetPrivateData", {"vkGetPrivateDataEXT"}))
#endif /* defined(VK_EXT_private_data) */
#if defined(VK_KHR_video_encode_queue)
, vkGetEncodedVideoSessionParametersKHR((PFN_vkGetEncodedVideoSessionParametersKHR)addr(device, "vkGetEncodedVideoSessionParametersKHR"))
, vkCmdEncodeVideoKHR((PFN_vkCmdEncodeVideoKHR)addr(device, "vkCmdEncodeVideoKHR"))
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_object_refresh)
, vkCmdRefreshObjectsKHR((PFN_vkCmdRefreshObjectsKHR)addr(device, "vkCmdRefreshObjectsKHR"))
#endif /* defined(VK_KHR_object_refresh) */
#if defined(VK_EXT_metal_objects)
, vkExportMetalObjectsEXT((PFN_vkExportMetalObjectsEXT)addr(device, "vkExportMetalObjectsEXT"))
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_KHR_synchronization2)
, vkCmdSetEvent2KHR((PFN_vkCmdSetEvent2KHR)loadDeviceAliased(addr, device, "vkCmdSetEvent2", {"vkCmdSetEvent2KHR"}))
, vkCmdResetEvent2KHR((PFN_vkCmdResetEvent2KHR)loadDeviceAliased(addr, device, "vkCmdResetEvent2", {"vkCmdResetEvent2KHR"}))
, vkCmdWaitEvents2KHR((PFN_vkCmdWaitEvents2KHR)loadDeviceAliased(addr, device, "vkCmdWaitEvents2", {"vkCmdWaitEvents2KHR"}))
, vkCmdPipelineBarrier2KHR((PFN_vkCmdPipelineBarrier2KHR)loadDeviceAliased(addr, device, "vkCmdPipelineBarrier2", {"vkCmdPipelineBarrier2KHR"}))
, vkCmdWriteTimestamp2KHR((PFN_vkCmdWriteTimestamp2KHR)loadDeviceAliased(addr, device, "vkCmdWriteTimestamp2", {"vkCmdWriteTimestamp2KHR"}))
, vkQueueSubmit2KHR((PFN_vkQueueSubmit2KHR)loadDeviceAliased(addr, device, "vkQueueSubmit2", {"vkQueueSubmit2KHR"}))
#endif /* defined(VK_KHR_synchronization2) */
#if defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker)
, vkCmdWriteBufferMarker2AMD((PFN_vkCmdWriteBufferMarker2AMD)addr(device, "vkCmdWriteBufferMarker2AMD"))
#endif /* defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker) */
#if defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints)
, vkGetQueueCheckpointData2NV((PFN_vkGetQueueCheckpointData2NV)addr(device, "vkGetQueueCheckpointData2NV"))
#endif /* defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_EXT_descriptor_buffer)
, vkGetDescriptorSetLayoutSizeEXT((PFN_vkGetDescriptorSetLayoutSizeEXT)addr(device, "vkGetDescriptorSetLayoutSizeEXT"))
, vkGetDescriptorSetLayoutBindingOffsetEXT((PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)addr(device, "vkGetDescriptorSetLayoutBindingOffsetEXT"))
, vkGetDescriptorEXT((PFN_vkGetDescriptorEXT)addr(device, "vkGetDescriptorEXT"))
, vkCmdBindDescriptorBuffersEXT((PFN_vkCmdBindDescriptorBuffersEXT)addr(device, "vkCmdBindDescriptorBuffersEXT"))
, vkCmdSetDescriptorBufferOffsetsEXT((PFN_vkCmdSetDescriptorBufferOffsetsEXT)addr(device, "vkCmdSetDescriptorBufferOffsetsEXT"))
, vkCmdBindDescriptorBufferEmbeddedSamplersEXT((PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)addr(device, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT"))
, vkGetBufferOpaqueCaptureDescriptorDataEXT((PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)addr(device, "vkGetBufferOpaqueCaptureDescriptorDataEXT"))
, vkGetImageOpaqueCaptureDescriptorDataEXT((PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)addr(device, "vkGetImageOpaqueCaptureDescriptorDataEXT"))
, vkGetImageViewOpaqueCaptureDescriptorDataEXT((PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)addr(device, "vkGetImageViewOpaqueCaptureDescriptorDataEXT"))
, vkGetSamplerOpaqueCaptureDescriptorDataEXT((PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)addr(device, "vkGetSamplerOpaqueCaptureDescriptorDataEXT"))
#endif /* defined(VK_EXT_descriptor_buffer) */
#if (defined(VK_EXT_descriptor_buffer) && defined(VK_KHR_acceleration_structure)) || (defined(VK_EXT_descriptor_buffer) && defined(VK_NV_ray_tracing))
, vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT((PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)addr(device, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"))
#endif /* (defined(VK_EXT_descriptor_buffer) && defined(VK_KHR_acceleration_structure)) || (defined(VK_EXT_descriptor_buffer) && defined(VK_NV_ray_tracing)) */
#if defined(VK_NV_fragment_shading_rate_enums)
, vkCmdSetFragmentShadingRateEnumNV((PFN_vkCmdSetFragmentShadingRateEnumNV)addr(device, "vkCmdSetFragmentShadingRateEnumNV"))
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_EXT_mesh_shader)
, vkCmdDrawMeshTasksEXT((PFN_vkCmdDrawMeshTasksEXT)addr(device, "vkCmdDrawMeshTasksEXT"))
, vkCmdDrawMeshTasksIndirectEXT((PFN_vkCmdDrawMeshTasksIndirectEXT)addr(device, "vkCmdDrawMeshTasksIndirectEXT"))
, vkCmdDrawMeshTasksIndirectCountEXT((PFN_vkCmdDrawMeshTasksIndirectCountEXT)addr(device, "vkCmdDrawMeshTasksIndirectCountEXT"))
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_KHR_copy_commands2)
, vkCmdCopyBuffer2KHR((PFN_vkCmdCopyBuffer2KHR)loadDeviceAliased(addr, device, "vkCmdCopyBuffer2", {"vkCmdCopyBuffer2KHR"}))
, vkCmdCopyImage2KHR((PFN_vkCmdCopyImage2KHR)loadDeviceAliased(addr, device, "vkCmdCopyImage2", {"vkCmdCopyImage2KHR"}))
, vkCmdCopyBufferToImage2KHR((PFN_vkCmdCopyBufferToImage2KHR)loadDeviceAliased(addr, device, "vkCmdCopyBufferToImage2", {"vkCmdCopyBufferToImage2KHR"}))
, vkCmdCopyImageToBuffer2KHR((PFN_vkCmdCopyImageToBuffer2KHR)loadDeviceAliased(addr, device, "vkCmdCopyImageToBuffer2", {"vkCmdCopyImageToBuffer2KHR"}))
, vkCmdBlitImage2KHR((PFN_vkCmdBlitImage2KHR)loadDeviceAliased(addr, device, "vkCmdBlitImage2", {"vkCmdBlitImage2KHR"}))
, vkCmdResolveImage2KHR((PFN_vkCmdResolveImage2KHR)loadDeviceAliased(addr, device, "vkCmdResolveImage2", {"vkCmdResolveImage2KHR"}))
#endif /* defined(VK_KHR_copy_commands2) */
#if defined(VK_EXT_device_fault)
, vkGetDeviceFaultInfoEXT((PFN_vkGetDeviceFaultInfoEXT)addr(device, "vkGetDeviceFaultInfoEXT"))
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_EXT_vertex_input_dynamic_state)
, vkCmdSetVertexInputEXT((PFN_vkCmdSetVertexInputEXT)addr(device, "vkCmdSetVertexInputEXT"))
#endif /* defined(VK_EXT_vertex_input_dynamic_state) */
#if defined(VK_FUCHSIA_external_memory)
, vkGetMemoryZirconHandleFUCHSIA((PFN_vkGetMemoryZirconHandleFUCHSIA)addr(device, "vkGetMemoryZirconHandleFUCHSIA"))
, vkGetMemoryZirconHandlePropertiesFUCHSIA((PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA)addr(device, "vkGetMemoryZirconHandlePropertiesFUCHSIA"))
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_FUCHSIA_external_semaphore)
, vkImportSemaphoreZirconHandleFUCHSIA((PFN_vkImportSemaphoreZirconHandleFUCHSIA)addr(device, "vkImportSemaphoreZirconHandleFUCHSIA"))
, vkGetSemaphoreZirconHandleFUCHSIA((PFN_vkGetSemaphoreZirconHandleFUCHSIA)addr(device, "vkGetSemaphoreZirconHandleFUCHSIA"))
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_FUCHSIA_buffer_collection)
, vkCreateBufferCollectionFUCHSIA((PFN_vkCreateBufferCollectionFUCHSIA)addr(device, "vkCreateBufferCollectionFUCHSIA"))
, vkSetBufferCollectionImageConstraintsFUCHSIA((PFN_vkSetBufferCollectionImageConstraintsFUCHSIA)addr(device, "vkSetBufferCollectionImageConstraintsFUCHSIA"))
, vkSetBufferCollectionBufferConstraintsFUCHSIA((PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA)addr(device, "vkSetBufferCollectionBufferConstraintsFUCHSIA"))
, vkDestroyBufferCollectionFUCHSIA((PFN_vkDestroyBufferCollectionFUCHSIA)addr(device, "vkDestroyBufferCollectionFUCHSIA"))
, vkGetBufferCollectionPropertiesFUCHSIA((PFN_vkGetBufferCollectionPropertiesFUCHSIA)addr(device, "vkGetBufferCollectionPropertiesFUCHSIA"))
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_HUAWEI_subpass_shading)
, vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI((PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)addr(device, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"))
, vkCmdSubpassShadingHUAWEI((PFN_vkCmdSubpassShadingHUAWEI)addr(device, "vkCmdSubpassShadingHUAWEI"))
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_HUAWEI_invocation_mask)
, vkCmdBindInvocationMaskHUAWEI((PFN_vkCmdBindInvocationMaskHUAWEI)addr(device, "vkCmdBindInvocationMaskHUAWEI"))
#endif /* defined(VK_HUAWEI_invocation_mask) */
#if defined(VK_NV_external_memory_rdma)
, vkGetMemoryRemoteAddressNV((PFN_vkGetMemoryRemoteAddressNV)addr(device, "vkGetMemoryRemoteAddressNV"))
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_EXT_pipeline_properties)
, vkGetPipelinePropertiesEXT((PFN_vkGetPipelinePropertiesEXT)addr(device, "vkGetPipelinePropertiesEXT"))
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_NV_external_sci_sync)
, vkGetFenceSciSyncFenceNV((PFN_vkGetFenceSciSyncFenceNV)addr(device, "vkGetFenceSciSyncFenceNV"))
, vkGetFenceSciSyncObjNV((PFN_vkGetFenceSciSyncObjNV)addr(device, "vkGetFenceSciSyncObjNV"))
, vkImportFenceSciSyncFenceNV((PFN_vkImportFenceSciSyncFenceNV)addr(device, "vkImportFenceSciSyncFenceNV"))
, vkImportFenceSciSyncObjNV((PFN_vkImportFenceSciSyncObjNV)addr(device, "vkImportFenceSciSyncObjNV"))
, vkGetSemaphoreSciSyncObjNV((PFN_vkGetSemaphoreSciSyncObjNV)addr(device, "vkGetSemaphoreSciSyncObjNV"))
, vkImportSemaphoreSciSyncObjNV((PFN_vkImportSemaphoreSciSyncObjNV)addr(device, "vkImportSemaphoreSciSyncObjNV"))
#endif /* defined(VK_NV_external_sci_sync) */
#if defined(VK_NV_external_memory_sci_buf)
, vkGetMemorySciBufNV((PFN_vkGetMemorySciBufNV)addr(device, "vkGetMemorySciBufNV"))
#endif /* defined(VK_NV_external_memory_sci_buf) */
#if defined(VK_EXT_extended_dynamic_state2)
, vkCmdSetPatchControlPointsEXT((PFN_vkCmdSetPatchControlPointsEXT)addr(device, "vkCmdSetPatchControlPointsEXT"))
, vkCmdSetRasterizerDiscardEnableEXT((PFN_vkCmdSetRasterizerDiscardEnableEXT)loadDeviceAliased(addr, device, "vkCmdSetRasterizerDiscardEnable", {"vkCmdSetRasterizerDiscardEnableEXT"}))
, vkCmdSetDepthBiasEnableEXT((PFN_vkCmdSetDepthBiasEnableEXT)loadDeviceAliased(addr, device, "vkCmdSetDepthBiasEnable", {"vkCmdSetDepthBiasEnableEXT"}))
, vkCmdSetLogicOpEXT((PFN_vkCmdSetLogicOpEXT)addr(device, "vkCmdSetLogicOpEXT"))
, vkCmdSetPrimitiveRestartEnableEXT((PFN_vkCmdSetPrimitiveRestartEnableEXT)loadDeviceAliased(addr, device, "vkCmdSetPrimitiveRestartEnable", {"vkCmdSetPrimitiveRestartEnableEXT"}))
#endif /* defined(VK_EXT_extended_dynamic_state2) */
#if defined(VK_EXT_color_write_enable)
, vkCmdSetColorWriteEnableEXT((PFN_vkCmdSetColorWriteEnableEXT)addr(device, "vkCmdSetColorWriteEnableEXT"))
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline)
, vkCmdTraceRaysIndirect2KHR((PFN_vkCmdTraceRaysIndirect2KHR)addr(device, "vkCmdTraceRaysIndirect2KHR"))
#endif /* defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_EXT_multi_draw)
, vkCmdDrawMultiEXT((PFN_vkCmdDrawMultiEXT)addr(device, "vkCmdDrawMultiEXT"))
, vkCmdDrawMultiIndexedEXT((PFN_vkCmdDrawMultiIndexedEXT)addr(device, "vkCmdDrawMultiIndexedEXT"))
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_opacity_micromap)
, vkCreateMicromapEXT((PFN_vkCreateMicromapEXT)addr(device, "vkCreateMicromapEXT"))
, vkDestroyMicromapEXT((PFN_vkDestroyMicromapEXT)addr(device, "vkDestroyMicromapEXT"))
, vkCmdBuildMicromapsEXT((PFN_vkCmdBuildMicromapsEXT)addr(device, "vkCmdBuildMicromapsEXT"))
, vkBuildMicromapsEXT((PFN_vkBuildMicromapsEXT)addr(device, "vkBuildMicromapsEXT"))
, vkCopyMicromapEXT((PFN_vkCopyMicromapEXT)addr(device, "vkCopyMicromapEXT"))
, vkCopyMicromapToMemoryEXT((PFN_vkCopyMicromapToMemoryEXT)addr(device, "vkCopyMicromapToMemoryEXT"))
, vkCopyMemoryToMicromapEXT((PFN_vkCopyMemoryToMicromapEXT)addr(device, "vkCopyMemoryToMicromapEXT"))
, vkWriteMicromapsPropertiesEXT((PFN_vkWriteMicromapsPropertiesEXT)addr(device, "vkWriteMicromapsPropertiesEXT"))
, vkCmdCopyMicromapEXT((PFN_vkCmdCopyMicromapEXT)addr(device, "vkCmdCopyMicromapEXT"))
, vkCmdCopyMicromapToMemoryEXT((PFN_vkCmdCopyMicromapToMemoryEXT)addr(device, "vkCmdCopyMicromapToMemoryEXT"))
, vkCmdCopyMemoryToMicromapEXT((PFN_vkCmdCopyMemoryToMicromapEXT)addr(device, "vkCmdCopyMemoryToMicromapEXT"))
, vkCmdWriteMicromapsPropertiesEXT((PFN_vkCmdWriteMicromapsPropertiesEXT)addr(device, "vkCmdWriteMicromapsPropertiesEXT"))
, vkGetDeviceMicromapCompatibilityEXT((PFN_vkGetDeviceMicromapCompatibilityEXT)addr(device, "vkGetDeviceMicromapCompatibilityEXT"))
, vkGetMicromapBuildSizesEXT((PFN_vkGetMicromapBuildSizesEXT)addr(device, "vkGetMicromapBuildSizesEXT"))
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_HUAWEI_cluster_culling_shader)
, vkCmdDrawClusterHUAWEI((PFN_vkCmdDrawClusterHUAWEI)addr(device, "vkCmdDrawClusterHUAWEI"))
, vkCmdDrawClusterIndirectHUAWEI((PFN_vkCmdDrawClusterIndirectHUAWEI)addr(device, "vkCmdDrawClusterIndirectHUAWEI"))
#endif /* defined(VK_HUAWEI_cluster_culling_shader) */
#if defined(VK_EXT_pageable_device_local_memory)
, vkSetDeviceMemoryPriorityEXT((PFN_vkSetDeviceMemoryPriorityEXT)addr(device, "vkSetDeviceMemoryPriorityEXT"))
#endif /* defined(VK_EXT_pageable_device_local_memory) */
#if defined(VK_KHR_maintenance4)
, vkGetDeviceBufferMemoryRequirementsKHR((PFN_vkGetDeviceBufferMemoryRequirementsKHR)loadDeviceAliased(addr, device, "vkGetDeviceBufferMemoryRequirements", {"vkGetDeviceBufferMemoryRequirementsKHR"}))
, vkGetDeviceImageMemoryRequirementsKHR((PFN_vkGetDeviceImageMemoryRequirementsKHR)loadDeviceAliased(addr, device, "vkGetDeviceImageMemoryRequirements", {"vkGetDeviceImageMemoryRequirementsKHR"}))
, vkGetDeviceImageSparseMemoryRequirementsKHR((PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)loadDeviceAliased(addr, device, "vkGetDeviceImageSparseMemoryRequirements", {"vkGetDeviceImageSparseMemoryRequirementsKHR"}))
#endif /* defined(VK_KHR_maintenance4) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
, vkGetDescriptorSetLayoutHostMappingInfoVALVE((PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)addr(device, "vkGetDescriptorSetLayoutHostMappingInfoVALVE"))
, vkGetDescriptorSetHostMappingVALVE((PFN_vkGetDescriptorSetHostMappingVALVE)addr(device, "vkGetDescriptorSetHostMappingVALVE"))
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if defined(VK_NV_copy_memory_indirect)
, vkCmdCopyMemoryIndirectNV((PFN_vkCmdCopyMemoryIndirectNV)addr(device, "vkCmdCopyMemoryIndirectNV"))
, vkCmdCopyMemoryToImageIndirectNV((PFN_vkCmdCopyMemoryToImageIndirectNV)addr(device, "vkCmdCopyMemoryToImageIndirectNV"))
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_NV_memory_decompression)
, vkCmdDecompressMemoryNV((PFN_vkCmdDecompressMemoryNV)addr(device, "vkCmdDecompressMemoryNV"))
, vkCmdDecompressMemoryIndirectCountNV((PFN_vkCmdDecompressMemoryIndirectCountNV)addr(device, "vkCmdDecompressMemoryIndirectCountNV"))
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_NV_device_generated_commands_compute)
, vkGetPipelineIndirectMemoryRequirementsNV((PFN_vkGetPipelineIndirectMemoryRequirementsNV)addr(device, "vkGetPipelineIndirectMemoryRequirementsNV"))
, vkCmdUpdatePipelineIndirectBufferNV((PFN_vkCmdUpdatePipelineIndirectBufferNV)addr(device, "vkCmdUpdatePipelineIndirectBufferNV"))
, vkGetPipelineIndirectDeviceAddressNV((PFN_vkGetPipelineIndirectDeviceAddressNV)addr(device, "vkGetPipelineIndirectDeviceAddressNV"))
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_EXT_extended_dynamic_state3)
, vkCmdSetTessellationDomainOriginEXT((PFN_vkCmdSetTessellationDomainOriginEXT)addr(device, "vkCmdSetTessellationDomainOriginEXT"))
, vkCmdSetDepthClampEnableEXT((PFN_vkCmdSetDepthClampEnableEXT)addr(device, "vkCmdSetDepthClampEnableEXT"))
, vkCmdSetPolygonModeEXT((PFN_vkCmdSetPolygonModeEXT)addr(device, "vkCmdSetPolygonModeEXT"))
, vkCmdSetRasterizationSamplesEXT((PFN_vkCmdSetRasterizationSamplesEXT)addr(device, "vkCmdSetRasterizationSamplesEXT"))
, vkCmdSetSampleMaskEXT((PFN_vkCmdSetSampleMaskEXT)addr(device, "vkCmdSetSampleMaskEXT"))
, vkCmdSetAlphaToCoverageEnableEXT((PFN_vkCmdSetAlphaToCoverageEnableEXT)addr(device, "vkCmdSetAlphaToCoverageEnableEXT"))
, vkCmdSetAlphaToOneEnableEXT((PFN_vkCmdSetAlphaToOneEnableEXT)addr(device, "vkCmdSetAlphaToOneEnableEXT"))
, vkCmdSetLogicOpEnableEXT((PFN_vkCmdSetLogicOpEnableEXT)addr(device, "vkCmdSetLogicOpEnableEXT"))
, vkCmdSetColorBlendEnableEXT((PFN_vkCmdSetColorBlendEnableEXT)addr(device, "vkCmdSetColorBlendEnableEXT"))
, vkCmdSetColorBlendEquationEXT((PFN_vkCmdSetColorBlendEquationEXT)addr(device, "vkCmdSetColorBlendEquationEXT"))
, vkCmdSetColorWriteMaskEXT((PFN_vkCmdSetColorWriteMaskEXT)addr(device, "vkCmdSetColorWriteMaskEXT"))
, vkCmdSetRasterizationStreamEXT((PFN_vkCmdSetRasterizationStreamEXT)addr(device, "vkCmdSetRasterizationStreamEXT"))
, vkCmdSetConservativeRasterizationModeEXT((PFN_vkCmdSetConservativeRasterizationModeEXT)addr(device, "vkCmdSetConservativeRasterizationModeEXT"))
, vkCmdSetExtraPrimitiveOverestimationSizeEXT((PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)addr(device, "vkCmdSetExtraPrimitiveOverestimationSizeEXT"))
, vkCmdSetDepthClipEnableEXT((PFN_vkCmdSetDepthClipEnableEXT)addr(device, "vkCmdSetDepthClipEnableEXT"))
, vkCmdSetSampleLocationsEnableEXT((PFN_vkCmdSetSampleLocationsEnableEXT)addr(device, "vkCmdSetSampleLocationsEnableEXT"))
, vkCmdSetColorBlendAdvancedEXT((PFN_vkCmdSetColorBlendAdvancedEXT)addr(device, "vkCmdSetColorBlendAdvancedEXT"))
, vkCmdSetProvokingVertexModeEXT((PFN_vkCmdSetProvokingVertexModeEXT)addr(device, "vkCmdSetProvokingVertexModeEXT"))
, vkCmdSetLineRasterizationModeEXT((PFN_vkCmdSetLineRasterizationModeEXT)addr(device, "vkCmdSetLineRasterizationModeEXT"))
, vkCmdSetLineStippleEnableEXT((PFN_vkCmdSetLineStippleEnableEXT)addr(device, "vkCmdSetLineStippleEnableEXT"))
, vkCmdSetDepthClipNegativeOneToOneEXT((PFN_vkCmdSetDepthClipNegativeOneToOneEXT)addr(device, "vkCmdSetDepthClipNegativeOneToOneEXT"))
#endif /* defined(VK_EXT_extended_dynamic_state3) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling))
, vkCmdSetViewportWScalingEnableNV((PFN_vkCmdSetViewportWScalingEnableNV)addr(device, "vkCmdSetViewportWScalingEnableNV"))
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode))
, vkCmdSetCoverageReductionModeNV((PFN_vkCmdSetCoverageReductionModeNV)addr(device, "vkCmdSetCoverageReductionModeNV"))
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
, vkCmdSetCoverageToColorEnableNV((PFN_vkCmdSetCoverageToColorEnableNV)addr(device, "vkCmdSetCoverageToColorEnableNV"))
, vkCmdSetCoverageToColorLocationNV((PFN_vkCmdSetCoverageToColorLocationNV)addr(device, "vkCmdSetCoverageToColorLocationNV"))
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
, vkCmdSetCoverageModulationModeNV((PFN_vkCmdSetCoverageModulationModeNV)addr(device, "vkCmdSetCoverageModulationModeNV"))
, vkCmdSetCoverageModulationTableEnableNV((PFN_vkCmdSetCoverageModulationTableEnableNV)addr(device, "vkCmdSetCoverageModulationTableEnableNV"))
, vkCmdSetCoverageModulationTableNV((PFN_vkCmdSetCoverageModulationTableNV)addr(device, "vkCmdSetCoverageModulationTableNV"))
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test))
, vkCmdSetRepresentativeFragmentTestEnableNV((PFN_vkCmdSetRepresentativeFragmentTestEnableNV)addr(device, "vkCmdSetRepresentativeFragmentTestEnableNV"))
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image))
, vkCmdSetShadingRateImageEnableNV((PFN_vkCmdSetShadingRateImageEnableNV)addr(device, "vkCmdSetShadingRateImageEnableNV"))
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle))
, vkCmdSetViewportSwizzleNV((PFN_vkCmdSetViewportSwizzleNV)addr(device, "vkCmdSetViewportSwizzleNV"))
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle)) */
#if defined(VK_EXT_shader_module_identifier)
, vkGetShaderModuleIdentifierEXT((PFN_vkGetShaderModuleIdentifierEXT)addr(device, "vkGetShaderModuleIdentifierEXT"))
, vkGetShaderModuleCreateInfoIdentifierEXT((PFN_vkGetShaderModuleCreateInfoIdentifierEXT)addr(device, "vkGetShaderModuleCreateInfoIdentifierEXT"))
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_NV_optical_flow)
, vkCreateOpticalFlowSessionNV((PFN_vkCreateOpticalFlowSessionNV)addr(device, "vkCreateOpticalFlowSessionNV"))
, vkDestroyOpticalFlowSessionNV((PFN_vkDestroyOpticalFlowSessionNV)addr(device, "vkDestroyOpticalFlowSessionNV"))
, vkBindOpticalFlowSessionImageNV((PFN_vkBindOpticalFlowSessionImageNV)addr(device, "vkBindOpticalFlowSessionImageNV"))
, vkCmdOpticalFlowExecuteNV((PFN_vkCmdOpticalFlowExecuteNV)addr(device, "vkCmdOpticalFlowExecuteNV"))
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_KHR_maintenance5)
, vkCmdBindIndexBuffer2KHR((PFN_vkCmdBindIndexBuffer2KHR)addr(device, "vkCmdBindIndexBuffer2KHR"))
, vkGetRenderingAreaGranularityKHR((PFN_vkGetRenderingAreaGranularityKHR)addr(device, "vkGetRenderingAreaGranularityKHR"))
, vkGetDeviceImageSubresourceLayoutKHR((PFN_vkGetDeviceImageSubresourceLayoutKHR)addr(device, "vkGetDeviceImageSubresourceLayoutKHR"))
, vkGetImageSubresourceLayout2KHR((PFN_vkGetImageSubresourceLayout2KHR)loadDeviceAliased(addr, device, "vkGetImageSubresourceLayout2KHR", {"vkGetImageSubresourceLayout2EXT"}))
#endif /* defined(VK_KHR_maintenance5) */
#if defined(VK_EXT_shader_object)
, vkCreateShadersEXT((PFN_vkCreateShadersEXT)addr(device, "vkCreateShadersEXT"))
, vkDestroyShaderEXT((PFN_vkDestroyShaderEXT)addr(device, "vkDestroyShaderEXT"))
, vkGetShaderBinaryDataEXT((PFN_vkGetShaderBinaryDataEXT)addr(device, "vkGetShaderBinaryDataEXT"))
, vkCmdBindShadersEXT((PFN_vkCmdBindShadersEXT)addr(device, "vkCmdBindShadersEXT"))
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_QCOM_tile_properties)
, vkGetFramebufferTilePropertiesQCOM((PFN_vkGetFramebufferTilePropertiesQCOM)addr(device, "vkGetFramebufferTilePropertiesQCOM"))
, vkGetDynamicRenderingTilePropertiesQCOM((PFN_vkGetDynamicRenderingTilePropertiesQCOM)addr(device, "vkGetDynamicRenderingTilePropertiesQCOM"))
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_NV_external_sci_sync2)
, vkCreateSemaphoreSciSyncPoolNV((PFN_vkCreateSemaphoreSciSyncPoolNV)addr(device, "vkCreateSemaphoreSciSyncPoolNV"))
, vkDestroySemaphoreSciSyncPoolNV((PFN_vkDestroySemaphoreSciSyncPoolNV)addr(device, "vkDestroySemaphoreSciSyncPoolNV"))
#endif /* defined(VK_NV_external_sci_sync2) */
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
, vkCmdSetAttachmentFeedbackLoopEnableEXT((PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)addr(device, "vkCmdSetAttachmentFeedbackLoopEnableEXT"))
#endif /* defined(VK_EXT_attachment_feedback_loop_dynamic_state) */
#if defined(VK_QNX_external_memory_screen_buffer)
, vkGetScreenBufferPropertiesQNX((PFN_vkGetScreenBufferPropertiesQNX)addr(device, "vkGetScreenBufferPropertiesQNX"))
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
{ }

#if VK_HOOK_DEBUG
#if defined(VK_VERSION_1_0)

static PFN_vkVoidFunction xl_hook_tl_instanceHookTable_vkGetInstanceProcAddr(VkInstance instance, const char* pName) {
	auto __fn = tl_instanceHookTable.table->vkGetInstanceProcAddr;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetInstanceProcAddr) {
		__fn = tl_instanceHookTable.replace->vkGetInstanceProcAddr;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetInstanceProcAddr", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pName);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetInstanceProcAddr", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_instanceHookTable.table->vkDestroyInstance;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkDestroyInstance) {
		__fn = tl_instanceHookTable.replace->vkDestroyInstance;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkDestroyInstance", (PFN_vkVoidFunction)__fn); }
	__fn(instance, pAllocator);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkDestroyInstance", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_instanceHookTable_vkEnumeratePhysicalDevices(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices) {
	auto __fn = tl_instanceHookTable.table->vkEnumeratePhysicalDevices;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkEnumeratePhysicalDevices) {
		__fn = tl_instanceHookTable.replace->vkEnumeratePhysicalDevices;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkEnumeratePhysicalDevices", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pPhysicalDeviceCount, pPhysicalDevices);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkEnumeratePhysicalDevices", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceFeatures;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceFeatures) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceFeatures;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFeatures", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pFeatures);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFeatures", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceFormatProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceFormatProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceFormatProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFormatProperties", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, format, pFormatProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFormatProperties", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceImageFormatProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceImageFormatProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceImageFormatProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceImageFormatProperties", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceImageFormatProperties", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceProperties", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceProperties", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceQueueFamilyProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceQueueFamilyProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceQueueFamilyProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceQueueFamilyProperties", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceQueueFamilyProperties", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceMemoryProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceMemoryProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceMemoryProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceMemoryProperties", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pMemoryProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceMemoryProperties", (PFN_vkVoidFunction)__fn); }
}

static PFN_vkVoidFunction xl_hook_tl_instanceHookTable_vkGetDeviceProcAddr(VkDevice device, const char* pName) {
	auto __fn = tl_instanceHookTable.table->vkGetDeviceProcAddr;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetDeviceProcAddr) {
		__fn = tl_instanceHookTable.replace->vkGetDeviceProcAddr;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetDeviceProcAddr", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pName);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetDeviceProcAddr", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice) {
	auto __fn = tl_instanceHookTable.table->vkCreateDevice;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateDevice) {
		__fn = tl_instanceHookTable.replace->vkCreateDevice;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateDevice", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pCreateInfo, pAllocator, pDevice);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateDevice", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkEnumerateDeviceExtensionProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkEnumerateDeviceExtensionProperties) {
		__fn = tl_instanceHookTable.replace->vkEnumerateDeviceExtensionProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkEnumerateDeviceExtensionProperties", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pLayerName, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkEnumerateDeviceExtensionProperties", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkEnumerateDeviceLayerProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkEnumerateDeviceLayerProperties) {
		__fn = tl_instanceHookTable.replace->vkEnumerateDeviceLayerProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkEnumerateDeviceLayerProperties", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkEnumerateDeviceLayerProperties", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSparseImageFormatProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSparseImageFormatProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSparseImageFormatProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSparseImageFormatProperties", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSparseImageFormatProperties", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_VERSION_1_0) */

#if defined(VK_VERSION_1_1)

static VkResult xl_hook_tl_instanceHookTable_vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties) {
	auto __fn = tl_instanceHookTable.table->vkEnumeratePhysicalDeviceGroups;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkEnumeratePhysicalDeviceGroups) {
		__fn = tl_instanceHookTable.replace->vkEnumeratePhysicalDeviceGroups;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkEnumeratePhysicalDeviceGroups", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkEnumeratePhysicalDeviceGroups", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceFeatures2;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceFeatures2) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceFeatures2;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFeatures2", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pFeatures);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFeatures2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceProperties2;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceProperties2) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceProperties2;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceProperties2", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceProperties2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceFormatProperties2;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceFormatProperties2) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceFormatProperties2;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFormatProperties2", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, format, pFormatProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFormatProperties2", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceImageFormatProperties2;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceImageFormatProperties2) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceImageFormatProperties2;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceImageFormatProperties2", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pImageFormatInfo, pImageFormatProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceImageFormatProperties2", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceQueueFamilyProperties2;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceQueueFamilyProperties2) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceQueueFamilyProperties2;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceQueueFamilyProperties2", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceQueueFamilyProperties2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceMemoryProperties2;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceMemoryProperties2) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceMemoryProperties2;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceMemoryProperties2", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pMemoryProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceMemoryProperties2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSparseImageFormatProperties2;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSparseImageFormatProperties2) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSparseImageFormatProperties2;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSparseImageFormatProperties2", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSparseImageFormatProperties2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceExternalBufferProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalBufferProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalBufferProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalBufferProperties", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalBufferProperties", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceExternalFenceProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalFenceProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalFenceProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalFenceProperties", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalFenceProperties", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceExternalSemaphoreProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalSemaphoreProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalSemaphoreProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalSemaphoreProperties", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalSemaphoreProperties", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_VERSION_1_1) */

#if defined(VK_VERSION_1_3)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceToolProperties;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceToolProperties) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceToolProperties;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceToolProperties", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pToolCount, pToolProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceToolProperties", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_VERSION_1_3) */

#if defined(VK_KHR_surface)

static void xl_hook_tl_instanceHookTable_vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_instanceHookTable.table->vkDestroySurfaceKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkDestroySurfaceKHR) {
		__fn = tl_instanceHookTable.replace->vkDestroySurfaceKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkDestroySurfaceKHR", (PFN_vkVoidFunction)__fn); }
	__fn(instance, surface, pAllocator);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkDestroySurfaceKHR", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSurfaceSupportKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceSupportKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceSupportKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceSupportKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, queueFamilyIndex, surface, pSupported);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceSupportKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceCapabilitiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, surface, pSurfaceCapabilities);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSurfaceFormatsKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceFormatsKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceFormatsKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceFormatsKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceFormatsKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSurfacePresentModesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfacePresentModesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfacePresentModesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfacePresentModesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, surface, pPresentModeCount, pPresentModes);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfacePresentModesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_surface) */

#if (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface))

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDevicePresentRectanglesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDevicePresentRectanglesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDevicePresentRectanglesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDevicePresentRectanglesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, surface, pRectCount, pRects);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDevicePresentRectanglesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) */

#if defined(VK_KHR_display)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceDisplayPropertiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceDisplayPropertiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceDisplayPropertiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDisplayPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDisplayPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceDisplayPlanePropertiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays) {
	auto __fn = tl_instanceHookTable.table->vkGetDisplayPlaneSupportedDisplaysKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetDisplayPlaneSupportedDisplaysKHR) {
		__fn = tl_instanceHookTable.replace->vkGetDisplayPlaneSupportedDisplaysKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetDisplayPlaneSupportedDisplaysKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, planeIndex, pDisplayCount, pDisplays);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetDisplayPlaneSupportedDisplaysKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetDisplayModePropertiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetDisplayModePropertiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetDisplayModePropertiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetDisplayModePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, display, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetDisplayModePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode) {
	auto __fn = tl_instanceHookTable.table->vkCreateDisplayModeKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateDisplayModeKHR) {
		__fn = tl_instanceHookTable.replace->vkCreateDisplayModeKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateDisplayModeKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, display, pCreateInfo, pAllocator, pMode);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateDisplayModeKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities) {
	auto __fn = tl_instanceHookTable.table->vkGetDisplayPlaneCapabilitiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetDisplayPlaneCapabilitiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetDisplayPlaneCapabilitiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetDisplayPlaneCapabilitiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, mode, planeIndex, pCapabilities);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetDisplayPlaneCapabilitiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateDisplayPlaneSurfaceKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateDisplayPlaneSurfaceKHR) {
		__fn = tl_instanceHookTable.replace->vkCreateDisplayPlaneSurfaceKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateDisplayPlaneSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateDisplayPlaneSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_display) */

#if defined(VK_KHR_xlib_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateXlibSurfaceKHR(VkInstance instance, const VkXlibSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateXlibSurfaceKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateXlibSurfaceKHR) {
		__fn = tl_instanceHookTable.replace->vkCreateXlibSurfaceKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateXlibSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateXlibSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkBool32 xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display* dpy, VisualID visualID) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceXlibPresentationSupportKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceXlibPresentationSupportKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceXlibPresentationSupportKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceXlibPresentationSupportKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, queueFamilyIndex, dpy, visualID);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceXlibPresentationSupportKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_xlib_surface) */

#if defined(VK_KHR_xcb_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateXcbSurfaceKHR(VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateXcbSurfaceKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateXcbSurfaceKHR) {
		__fn = tl_instanceHookTable.replace->vkCreateXcbSurfaceKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateXcbSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateXcbSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkBool32 xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceXcbPresentationSupportKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceXcbPresentationSupportKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceXcbPresentationSupportKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceXcbPresentationSupportKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, queueFamilyIndex, connection, visual_id);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceXcbPresentationSupportKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_xcb_surface) */

#if defined(VK_KHR_wayland_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateWaylandSurfaceKHR(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateWaylandSurfaceKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateWaylandSurfaceKHR) {
		__fn = tl_instanceHookTable.replace->vkCreateWaylandSurfaceKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateWaylandSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateWaylandSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkBool32 xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display* display) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceWaylandPresentationSupportKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceWaylandPresentationSupportKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceWaylandPresentationSupportKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceWaylandPresentationSupportKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, queueFamilyIndex, display);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceWaylandPresentationSupportKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_wayland_surface) */

#if defined(VK_KHR_android_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateAndroidSurfaceKHR(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateAndroidSurfaceKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateAndroidSurfaceKHR) {
		__fn = tl_instanceHookTable.replace->vkCreateAndroidSurfaceKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateAndroidSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateAndroidSurfaceKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_android_surface) */

#if defined(VK_KHR_win32_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateWin32SurfaceKHR(VkInstance instance, const VkWin32SurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateWin32SurfaceKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateWin32SurfaceKHR) {
		__fn = tl_instanceHookTable.replace->vkCreateWin32SurfaceKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateWin32SurfaceKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateWin32SurfaceKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkBool32 xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceWin32PresentationSupportKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceWin32PresentationSupportKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceWin32PresentationSupportKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceWin32PresentationSupportKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, queueFamilyIndex);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceWin32PresentationSupportKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_win32_surface) */

#if defined(VK_EXT_debug_report)

static VkResult xl_hook_tl_instanceHookTable_vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback) {
	auto __fn = tl_instanceHookTable.table->vkCreateDebugReportCallbackEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateDebugReportCallbackEXT) {
		__fn = tl_instanceHookTable.replace->vkCreateDebugReportCallbackEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateDebugReportCallbackEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pCallback);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateDebugReportCallbackEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_instanceHookTable.table->vkDestroyDebugReportCallbackEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkDestroyDebugReportCallbackEXT) {
		__fn = tl_instanceHookTable.replace->vkDestroyDebugReportCallbackEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkDestroyDebugReportCallbackEXT", (PFN_vkVoidFunction)__fn); }
	__fn(instance, callback, pAllocator);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkDestroyDebugReportCallbackEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage) {
	auto __fn = tl_instanceHookTable.table->vkDebugReportMessageEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkDebugReportMessageEXT) {
		__fn = tl_instanceHookTable.replace->vkDebugReportMessageEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkDebugReportMessageEXT", (PFN_vkVoidFunction)__fn); }
	__fn(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkDebugReportMessageEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_debug_report) */

#if defined(VK_KHR_video_queue)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR* pVideoProfile, VkVideoCapabilitiesKHR* pCapabilities) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceVideoCapabilitiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceVideoCapabilitiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceVideoCapabilitiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceVideoCapabilitiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pVideoProfile, pCapabilities);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceVideoCapabilitiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, uint32_t* pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceVideoFormatPropertiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceVideoFormatPropertiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceVideoFormatPropertiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceVideoFormatPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceVideoFormatPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_video_queue) */

#if defined(VK_GGP_stream_descriptor_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateStreamDescriptorSurfaceGGP(VkInstance instance, const VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateStreamDescriptorSurfaceGGP;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateStreamDescriptorSurfaceGGP) {
		__fn = tl_instanceHookTable.replace->vkCreateStreamDescriptorSurfaceGGP;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateStreamDescriptorSurfaceGGP", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateStreamDescriptorSurfaceGGP", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_GGP_stream_descriptor_surface) */

#if defined(VK_NV_external_memory_capabilities)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalImageFormatPropertiesNV) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_external_memory_capabilities) */

#if defined(VK_KHR_get_physical_device_properties2)

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2KHR* pFeatures) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceFeatures2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceFeatures2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceFeatures2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFeatures2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pFeatures);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFeatures2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2KHR* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceProperties2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceProperties2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceProperties2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceProperties2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceProperties2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2KHR* pFormatProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceFormatProperties2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceFormatProperties2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceFormatProperties2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFormatProperties2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, format, pFormatProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFormatProperties2KHR", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2KHR* pImageFormatInfo, VkImageFormatProperties2KHR* pImageFormatProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceImageFormatProperties2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceImageFormatProperties2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceImageFormatProperties2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceImageFormatProperties2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pImageFormatInfo, pImageFormatProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceImageFormatProperties2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2KHR* pQueueFamilyProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceQueueFamilyProperties2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceQueueFamilyProperties2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceQueueFamilyProperties2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceQueueFamilyProperties2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceQueueFamilyProperties2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2KHR* pMemoryProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceMemoryProperties2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceMemoryProperties2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceMemoryProperties2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceMemoryProperties2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pMemoryProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceMemoryProperties2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2KHR* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2KHR* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSparseImageFormatProperties2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_get_physical_device_properties2) */

#if defined(VK_NN_vi_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateViSurfaceNN(VkInstance instance, const VkViSurfaceCreateInfoNN* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateViSurfaceNN;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateViSurfaceNN) {
		__fn = tl_instanceHookTable.replace->vkCreateViSurfaceNN;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateViSurfaceNN", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateViSurfaceNN", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NN_vi_surface) */

#if defined(VK_KHR_device_group_creation)

static VkResult xl_hook_tl_instanceHookTable_vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupPropertiesKHR* pPhysicalDeviceGroupProperties) {
	auto __fn = tl_instanceHookTable.table->vkEnumeratePhysicalDeviceGroupsKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkEnumeratePhysicalDeviceGroupsKHR) {
		__fn = tl_instanceHookTable.replace->vkEnumeratePhysicalDeviceGroupsKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkEnumeratePhysicalDeviceGroupsKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkEnumeratePhysicalDeviceGroupsKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_device_group_creation) */

#if defined(VK_KHR_external_memory_capabilities)

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfoKHR* pExternalBufferInfo, VkExternalBufferPropertiesKHR* pExternalBufferProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceExternalBufferPropertiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalBufferPropertiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalBufferPropertiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalBufferPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalBufferPropertiesKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_external_memory_capabilities) */

#if defined(VK_KHR_external_semaphore_capabilities)

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfoKHR* pExternalSemaphoreInfo, VkExternalSemaphorePropertiesKHR* pExternalSemaphoreProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_external_semaphore_capabilities) */

#if defined(VK_EXT_direct_mode_display)

static VkResult xl_hook_tl_instanceHookTable_vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display) {
	auto __fn = tl_instanceHookTable.table->vkReleaseDisplayEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkReleaseDisplayEXT) {
		__fn = tl_instanceHookTable.replace->vkReleaseDisplayEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkReleaseDisplayEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, display);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkReleaseDisplayEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_direct_mode_display) */

#if defined(VK_EXT_acquire_xlib_display)

static VkResult xl_hook_tl_instanceHookTable_vkAcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, Display* dpy, VkDisplayKHR display) {
	auto __fn = tl_instanceHookTable.table->vkAcquireXlibDisplayEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkAcquireXlibDisplayEXT) {
		__fn = tl_instanceHookTable.replace->vkAcquireXlibDisplayEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkAcquireXlibDisplayEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, dpy, display);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkAcquireXlibDisplayEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice, Display* dpy, RROutput rrOutput, VkDisplayKHR* pDisplay) {
	auto __fn = tl_instanceHookTable.table->vkGetRandROutputDisplayEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetRandROutputDisplayEXT) {
		__fn = tl_instanceHookTable.replace->vkGetRandROutputDisplayEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetRandROutputDisplayEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, dpy, rrOutput, pDisplay);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetRandROutputDisplayEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_acquire_xlib_display) */

#if defined(VK_EXT_display_surface_counter)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSurfaceCapabilities2EXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceCapabilities2EXT) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceCapabilities2EXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceCapabilities2EXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, surface, pSurfaceCapabilities);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceCapabilities2EXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_display_surface_counter) */

#if defined(VK_KHR_external_fence_capabilities)

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfoKHR* pExternalFenceInfo, VkExternalFencePropertiesKHR* pExternalFenceProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceExternalFencePropertiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalFencePropertiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalFencePropertiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalFencePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalFencePropertiesKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_external_fence_capabilities) */

#if defined(VK_KHR_performance_query)

static VkResult xl_hook_tl_instanceHookTable_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions) {
	auto __fn = tl_instanceHookTable.table->vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR) {
		__fn = tl_instanceHookTable.replace->vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_performance_query) */

#if defined(VK_KHR_get_surface_capabilities2)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSurfaceCapabilities2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceCapabilities2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceCapabilities2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceCapabilities2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceCapabilities2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSurfaceFormats2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceFormats2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfaceFormats2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceFormats2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfaceFormats2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_get_surface_capabilities2) */

#if defined(VK_KHR_get_display_properties2)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceDisplayProperties2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceDisplayProperties2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceDisplayProperties2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDisplayProperties2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDisplayProperties2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceDisplayPlaneProperties2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetDisplayModeProperties2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetDisplayModeProperties2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetDisplayModeProperties2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetDisplayModeProperties2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, display, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetDisplayModeProperties2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities) {
	auto __fn = tl_instanceHookTable.table->vkGetDisplayPlaneCapabilities2KHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetDisplayPlaneCapabilities2KHR) {
		__fn = tl_instanceHookTable.replace->vkGetDisplayPlaneCapabilities2KHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetDisplayPlaneCapabilities2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pDisplayPlaneInfo, pCapabilities);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetDisplayPlaneCapabilities2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_get_display_properties2) */

#if defined(VK_MVK_ios_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateIOSSurfaceMVK(VkInstance instance, const VkIOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateIOSSurfaceMVK;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateIOSSurfaceMVK) {
		__fn = tl_instanceHookTable.replace->vkCreateIOSSurfaceMVK;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateIOSSurfaceMVK", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateIOSSurfaceMVK", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_MVK_ios_surface) */

#if defined(VK_MVK_macos_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateMacOSSurfaceMVK(VkInstance instance, const VkMacOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateMacOSSurfaceMVK;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateMacOSSurfaceMVK) {
		__fn = tl_instanceHookTable.replace->vkCreateMacOSSurfaceMVK;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateMacOSSurfaceMVK", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateMacOSSurfaceMVK", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_MVK_macos_surface) */

#if defined(VK_EXT_debug_utils)

static VkResult xl_hook_tl_instanceHookTable_vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT* pNameInfo) {
	auto __fn = tl_instanceHookTable.table->vkSetDebugUtilsObjectNameEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkSetDebugUtilsObjectNameEXT) {
		__fn = tl_instanceHookTable.replace->vkSetDebugUtilsObjectNameEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkSetDebugUtilsObjectNameEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pNameInfo);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkSetDebugUtilsObjectNameEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT* pTagInfo) {
	auto __fn = tl_instanceHookTable.table->vkSetDebugUtilsObjectTagEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkSetDebugUtilsObjectTagEXT) {
		__fn = tl_instanceHookTable.replace->vkSetDebugUtilsObjectTagEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkSetDebugUtilsObjectTagEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pTagInfo);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkSetDebugUtilsObjectTagEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo) {
	auto __fn = tl_instanceHookTable.table->vkQueueBeginDebugUtilsLabelEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkQueueBeginDebugUtilsLabelEXT) {
		__fn = tl_instanceHookTable.replace->vkQueueBeginDebugUtilsLabelEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkQueueBeginDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
	__fn(queue, pLabelInfo);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkQueueBeginDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkQueueEndDebugUtilsLabelEXT(VkQueue queue) {
	auto __fn = tl_instanceHookTable.table->vkQueueEndDebugUtilsLabelEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkQueueEndDebugUtilsLabelEXT) {
		__fn = tl_instanceHookTable.replace->vkQueueEndDebugUtilsLabelEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkQueueEndDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
	__fn(queue);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkQueueEndDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo) {
	auto __fn = tl_instanceHookTable.table->vkQueueInsertDebugUtilsLabelEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkQueueInsertDebugUtilsLabelEXT) {
		__fn = tl_instanceHookTable.replace->vkQueueInsertDebugUtilsLabelEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkQueueInsertDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
	__fn(queue, pLabelInfo);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkQueueInsertDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo) {
	auto __fn = tl_instanceHookTable.table->vkCmdBeginDebugUtilsLabelEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCmdBeginDebugUtilsLabelEXT) {
		__fn = tl_instanceHookTable.replace->vkCmdBeginDebugUtilsLabelEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCmdBeginDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pLabelInfo);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCmdBeginDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer) {
	auto __fn = tl_instanceHookTable.table->vkCmdEndDebugUtilsLabelEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCmdEndDebugUtilsLabelEXT) {
		__fn = tl_instanceHookTable.replace->vkCmdEndDebugUtilsLabelEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCmdEndDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCmdEndDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo) {
	auto __fn = tl_instanceHookTable.table->vkCmdInsertDebugUtilsLabelEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCmdInsertDebugUtilsLabelEXT) {
		__fn = tl_instanceHookTable.replace->vkCmdInsertDebugUtilsLabelEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCmdInsertDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pLabelInfo);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCmdInsertDebugUtilsLabelEXT", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_instanceHookTable_vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger) {
	auto __fn = tl_instanceHookTable.table->vkCreateDebugUtilsMessengerEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateDebugUtilsMessengerEXT) {
		__fn = tl_instanceHookTable.replace->vkCreateDebugUtilsMessengerEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateDebugUtilsMessengerEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pMessenger);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateDebugUtilsMessengerEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_instanceHookTable_vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_instanceHookTable.table->vkDestroyDebugUtilsMessengerEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkDestroyDebugUtilsMessengerEXT) {
		__fn = tl_instanceHookTable.replace->vkDestroyDebugUtilsMessengerEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkDestroyDebugUtilsMessengerEXT", (PFN_vkVoidFunction)__fn); }
	__fn(instance, messenger, pAllocator);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkDestroyDebugUtilsMessengerEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_instanceHookTable_vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData) {
	auto __fn = tl_instanceHookTable.table->vkSubmitDebugUtilsMessageEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkSubmitDebugUtilsMessageEXT) {
		__fn = tl_instanceHookTable.replace->vkSubmitDebugUtilsMessageEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkSubmitDebugUtilsMessageEXT", (PFN_vkVoidFunction)__fn); }
	__fn(instance, messageSeverity, messageTypes, pCallbackData);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkSubmitDebugUtilsMessageEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_debug_utils) */

#if defined(VK_EXT_sample_locations)

static void xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceMultisamplePropertiesEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceMultisamplePropertiesEXT) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceMultisamplePropertiesEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceMultisamplePropertiesEXT", (PFN_vkVoidFunction)__fn); }
	__fn(physicalDevice, samples, pMultisampleProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceMultisamplePropertiesEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_sample_locations) */

#if defined(VK_EXT_calibrated_timestamps)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceCalibrateableTimeDomainsEXT) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pTimeDomainCount, pTimeDomains);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_calibrated_timestamps) */

#if defined(VK_FUCHSIA_imagepipe_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateImagePipeSurfaceFUCHSIA(VkInstance instance, const VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateImagePipeSurfaceFUCHSIA;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateImagePipeSurfaceFUCHSIA) {
		__fn = tl_instanceHookTable.replace->vkCreateImagePipeSurfaceFUCHSIA;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateImagePipeSurfaceFUCHSIA", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateImagePipeSurfaceFUCHSIA", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_FUCHSIA_imagepipe_surface) */

#if defined(VK_EXT_metal_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateMetalSurfaceEXT(VkInstance instance, const VkMetalSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateMetalSurfaceEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateMetalSurfaceEXT) {
		__fn = tl_instanceHookTable.replace->vkCreateMetalSurfaceEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateMetalSurfaceEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateMetalSurfaceEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_metal_surface) */

#if defined(VK_KHR_fragment_shading_rate)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceFragmentShadingRatesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceFragmentShadingRatesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceFragmentShadingRatesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFragmentShadingRatesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceFragmentShadingRatesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_fragment_shading_rate) */

#if defined(VK_EXT_tooling_info)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceToolPropertiesEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceToolPropertiesEXT) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceToolPropertiesEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceToolPropertiesEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pToolCount, pToolProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceToolPropertiesEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_tooling_info) */

#if defined(VK_NV_cooperative_matrix)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceCooperativeMatrixPropertiesNV) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_cooperative_matrix) */

#if defined(VK_NV_coverage_reduction_mode)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pCombinationCount, pCombinations);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_coverage_reduction_mode) */

#if defined(VK_EXT_full_screen_exclusive)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSurfacePresentModes2EXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfacePresentModes2EXT) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSurfacePresentModes2EXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfacePresentModes2EXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSurfacePresentModes2EXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_full_screen_exclusive) */

#if defined(VK_EXT_headless_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateHeadlessSurfaceEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateHeadlessSurfaceEXT) {
		__fn = tl_instanceHookTable.replace->vkCreateHeadlessSurfaceEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateHeadlessSurfaceEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateHeadlessSurfaceEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_headless_surface) */

#if defined(VK_EXT_acquire_drm_display)

static VkResult xl_hook_tl_instanceHookTable_vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display) {
	auto __fn = tl_instanceHookTable.table->vkAcquireDrmDisplayEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkAcquireDrmDisplayEXT) {
		__fn = tl_instanceHookTable.replace->vkAcquireDrmDisplayEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkAcquireDrmDisplayEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, drmFd, display);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkAcquireDrmDisplayEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR* display) {
	auto __fn = tl_instanceHookTable.table->vkGetDrmDisplayEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetDrmDisplayEXT) {
		__fn = tl_instanceHookTable.replace->vkGetDrmDisplayEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetDrmDisplayEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, drmFd, connectorId, display);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetDrmDisplayEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_acquire_drm_display) */

#if defined(VK_KHR_video_encode_queue)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pQualityLevelInfo, pQualityLevelProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_video_encode_queue) */

#if defined(VK_KHR_object_refresh)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceRefreshableObjectTypesKHR(VkPhysicalDevice physicalDevice, uint32_t* pRefreshableObjectTypeCount, VkObjectType* pRefreshableObjectTypes) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceRefreshableObjectTypesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceRefreshableObjectTypesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceRefreshableObjectTypesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceRefreshableObjectTypesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pRefreshableObjectTypeCount, pRefreshableObjectTypes);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceRefreshableObjectTypesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_object_refresh) */

#if defined(VK_NV_acquire_winrt_display)

static VkResult xl_hook_tl_instanceHookTable_vkAcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice, VkDisplayKHR display) {
	auto __fn = tl_instanceHookTable.table->vkAcquireWinrtDisplayNV;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkAcquireWinrtDisplayNV) {
		__fn = tl_instanceHookTable.replace->vkAcquireWinrtDisplayNV;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkAcquireWinrtDisplayNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, display);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkAcquireWinrtDisplayNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetWinrtDisplayNV(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, VkDisplayKHR* pDisplay) {
	auto __fn = tl_instanceHookTable.table->vkGetWinrtDisplayNV;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetWinrtDisplayNV) {
		__fn = tl_instanceHookTable.replace->vkGetWinrtDisplayNV;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetWinrtDisplayNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, deviceRelativeId, pDisplay);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetWinrtDisplayNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_acquire_winrt_display) */

#if defined(VK_EXT_directfb_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateDirectFBSurfaceEXT(VkInstance instance, const VkDirectFBSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateDirectFBSurfaceEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateDirectFBSurfaceEXT) {
		__fn = tl_instanceHookTable.replace->vkCreateDirectFBSurfaceEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateDirectFBSurfaceEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateDirectFBSurfaceEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkBool32 xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDirectFBPresentationSupportEXT(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, IDirectFB* dfb) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceDirectFBPresentationSupportEXT;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceDirectFBPresentationSupportEXT) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceDirectFBPresentationSupportEXT;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, queueFamilyIndex, dfb);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_directfb_surface) */

#if defined(VK_NV_external_sci_sync)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSciSyncAttributesNV(VkPhysicalDevice physicalDevice, const VkSciSyncAttributesInfoNV* pSciSyncAttributesInfo, NvSciSyncAttrList pAttributes) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSciSyncAttributesNV;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSciSyncAttributesNV) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSciSyncAttributesNV;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSciSyncAttributesNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pSciSyncAttributesInfo, pAttributes);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSciSyncAttributesNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_external_sci_sync) */

#if defined(VK_NV_external_memory_sci_buf)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV(VkPhysicalDevice physicalDevice, VkExternalMemoryHandleTypeFlagBits handleType, NvSciBufObj handle, VkMemorySciBufPropertiesNV* pMemorySciBufProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, handleType, handle, pMemorySciBufProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSciBufAttributesNV(VkPhysicalDevice physicalDevice, NvSciBufAttrList pAttributes) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceSciBufAttributesNV;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceSciBufAttributesNV) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceSciBufAttributesNV;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSciBufAttributesNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pAttributes);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceSciBufAttributesNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_external_memory_sci_buf) */

#if defined(VK_QNX_screen_surface)

static VkResult xl_hook_tl_instanceHookTable_vkCreateScreenSurfaceQNX(VkInstance instance, const VkScreenSurfaceCreateInfoQNX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	auto __fn = tl_instanceHookTable.table->vkCreateScreenSurfaceQNX;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkCreateScreenSurfaceQNX) {
		__fn = tl_instanceHookTable.replace->vkCreateScreenSurfaceQNX;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkCreateScreenSurfaceQNX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(instance, pCreateInfo, pAllocator, pSurface);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkCreateScreenSurfaceQNX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkBool32 xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceScreenPresentationSupportQNX(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct _screen_window* window) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceScreenPresentationSupportQNX;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceScreenPresentationSupportQNX) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceScreenPresentationSupportQNX;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceScreenPresentationSupportQNX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, queueFamilyIndex, window);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceScreenPresentationSupportQNX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_QNX_screen_surface) */

#if defined(VK_NV_optical_flow)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint32_t* pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceOpticalFlowImageFormatsNV) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_optical_flow) */

#if defined(VK_KHR_cooperative_matrix)

static VkResult xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties) {
	auto __fn = tl_instanceHookTable.table->vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
	if (tl_instanceHookTable.replace && tl_instanceHookTable.replace->vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR) {
		__fn = tl_instanceHookTable.replace->vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
	}
	if (tl_instanceHookTable.preCall) { tl_instanceHookTable.preCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(physicalDevice, pPropertyCount, pProperties);
	if (tl_instanceHookTable.postCall) { tl_instanceHookTable.postCall(tl_instanceHookTable.ctx, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_cooperative_matrix) */

#if defined(VK_VERSION_1_0)

static PFN_vkVoidFunction xl_hook_tl_deviceHookTable_vkGetDeviceProcAddr(VkDevice device, const char* pName) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceProcAddr;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceProcAddr) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceProcAddr;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceProcAddr", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pName);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceProcAddr", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyDevice(VkDevice device, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyDevice;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyDevice) {
		__fn = tl_deviceHookTable.replace->vkDestroyDevice;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyDevice", (PFN_vkVoidFunction)__fn); }
	__fn(device, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyDevice", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceQueue;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceQueue) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceQueue;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceQueue", (PFN_vkVoidFunction)__fn); }
	__fn(device, queueFamilyIndex, queueIndex, pQueue);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceQueue", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence) {
	auto __fn = tl_deviceHookTable.table->vkQueueSubmit;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkQueueSubmit) {
		__fn = tl_deviceHookTable.replace->vkQueueSubmit;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkQueueSubmit", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(queue, submitCount, pSubmits, fence);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkQueueSubmit", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkQueueWaitIdle(VkQueue queue) {
	auto __fn = tl_deviceHookTable.table->vkQueueWaitIdle;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkQueueWaitIdle) {
		__fn = tl_deviceHookTable.replace->vkQueueWaitIdle;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkQueueWaitIdle", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(queue);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkQueueWaitIdle", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkDeviceWaitIdle(VkDevice device) {
	auto __fn = tl_deviceHookTable.table->vkDeviceWaitIdle;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDeviceWaitIdle) {
		__fn = tl_deviceHookTable.replace->vkDeviceWaitIdle;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDeviceWaitIdle", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDeviceWaitIdle", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory) {
	auto __fn = tl_deviceHookTable.table->vkAllocateMemory;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkAllocateMemory) {
		__fn = tl_deviceHookTable.replace->vkAllocateMemory;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkAllocateMemory", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pAllocateInfo, pAllocator, pMemory);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkAllocateMemory", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkFreeMemory;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkFreeMemory) {
		__fn = tl_deviceHookTable.replace->vkFreeMemory;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkFreeMemory", (PFN_vkVoidFunction)__fn); }
	__fn(device, memory, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkFreeMemory", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) {
	auto __fn = tl_deviceHookTable.table->vkMapMemory;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkMapMemory) {
		__fn = tl_deviceHookTable.replace->vkMapMemory;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkMapMemory", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, memory, offset, size, flags, ppData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkMapMemory", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkUnmapMemory(VkDevice device, VkDeviceMemory memory) {
	auto __fn = tl_deviceHookTable.table->vkUnmapMemory;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkUnmapMemory) {
		__fn = tl_deviceHookTable.replace->vkUnmapMemory;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkUnmapMemory", (PFN_vkVoidFunction)__fn); }
	__fn(device, memory);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkUnmapMemory", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
	auto __fn = tl_deviceHookTable.table->vkFlushMappedMemoryRanges;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkFlushMappedMemoryRanges) {
		__fn = tl_deviceHookTable.replace->vkFlushMappedMemoryRanges;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkFlushMappedMemoryRanges", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, memoryRangeCount, pMemoryRanges);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkFlushMappedMemoryRanges", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
	auto __fn = tl_deviceHookTable.table->vkInvalidateMappedMemoryRanges;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkInvalidateMappedMemoryRanges) {
		__fn = tl_deviceHookTable.replace->vkInvalidateMappedMemoryRanges;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkInvalidateMappedMemoryRanges", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, memoryRangeCount, pMemoryRanges);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkInvalidateMappedMemoryRanges", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceMemoryCommitment;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceMemoryCommitment) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceMemoryCommitment;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceMemoryCommitment", (PFN_vkVoidFunction)__fn); }
	__fn(device, memory, pCommittedMemoryInBytes);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceMemoryCommitment", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
	auto __fn = tl_deviceHookTable.table->vkBindBufferMemory;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBindBufferMemory) {
		__fn = tl_deviceHookTable.replace->vkBindBufferMemory;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBindBufferMemory", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, buffer, memory, memoryOffset);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBindBufferMemory", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
	auto __fn = tl_deviceHookTable.table->vkBindImageMemory;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBindImageMemory) {
		__fn = tl_deviceHookTable.replace->vkBindImageMemory;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBindImageMemory", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, image, memory, memoryOffset);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBindImageMemory", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferMemoryRequirements;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferMemoryRequirements) {
		__fn = tl_deviceHookTable.replace->vkGetBufferMemoryRequirements;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferMemoryRequirements", (PFN_vkVoidFunction)__fn); }
	__fn(device, buffer, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferMemoryRequirements", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetImageMemoryRequirements;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageMemoryRequirements) {
		__fn = tl_deviceHookTable.replace->vkGetImageMemoryRequirements;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageMemoryRequirements", (PFN_vkVoidFunction)__fn); }
	__fn(device, image, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageMemoryRequirements", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetImageSparseMemoryRequirements;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageSparseMemoryRequirements) {
		__fn = tl_deviceHookTable.replace->vkGetImageSparseMemoryRequirements;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageSparseMemoryRequirements", (PFN_vkVoidFunction)__fn); }
	__fn(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageSparseMemoryRequirements", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence) {
	auto __fn = tl_deviceHookTable.table->vkQueueBindSparse;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkQueueBindSparse) {
		__fn = tl_deviceHookTable.replace->vkQueueBindSparse;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkQueueBindSparse", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(queue, bindInfoCount, pBindInfo, fence);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkQueueBindSparse", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateFence(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
	auto __fn = tl_deviceHookTable.table->vkCreateFence;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateFence) {
		__fn = tl_deviceHookTable.replace->vkCreateFence;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateFence", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pFence);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateFence", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyFence;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyFence) {
		__fn = tl_deviceHookTable.replace->vkDestroyFence;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyFence", (PFN_vkVoidFunction)__fn); }
	__fn(device, fence, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyFence", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences) {
	auto __fn = tl_deviceHookTable.table->vkResetFences;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkResetFences) {
		__fn = tl_deviceHookTable.replace->vkResetFences;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkResetFences", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, fenceCount, pFences);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkResetFences", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetFenceStatus(VkDevice device, VkFence fence) {
	auto __fn = tl_deviceHookTable.table->vkGetFenceStatus;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetFenceStatus) {
		__fn = tl_deviceHookTable.replace->vkGetFenceStatus;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetFenceStatus", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, fence);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetFenceStatus", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout) {
	auto __fn = tl_deviceHookTable.table->vkWaitForFences;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkWaitForFences) {
		__fn = tl_deviceHookTable.replace->vkWaitForFences;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkWaitForFences", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, fenceCount, pFences, waitAll, timeout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkWaitForFences", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore) {
	auto __fn = tl_deviceHookTable.table->vkCreateSemaphore;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateSemaphore) {
		__fn = tl_deviceHookTable.replace->vkCreateSemaphore;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateSemaphore", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pSemaphore);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateSemaphore", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroySemaphore;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroySemaphore) {
		__fn = tl_deviceHookTable.replace->vkDestroySemaphore;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroySemaphore", (PFN_vkVoidFunction)__fn); }
	__fn(device, semaphore, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroySemaphore", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateEvent(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent) {
	auto __fn = tl_deviceHookTable.table->vkCreateEvent;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateEvent) {
		__fn = tl_deviceHookTable.replace->vkCreateEvent;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateEvent", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pEvent);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateEvent", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyEvent;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyEvent) {
		__fn = tl_deviceHookTable.replace->vkDestroyEvent;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyEvent", (PFN_vkVoidFunction)__fn); }
	__fn(device, event, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyEvent", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetEventStatus(VkDevice device, VkEvent event) {
	auto __fn = tl_deviceHookTable.table->vkGetEventStatus;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetEventStatus) {
		__fn = tl_deviceHookTable.replace->vkGetEventStatus;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetEventStatus", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, event);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetEventStatus", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkSetEvent(VkDevice device, VkEvent event) {
	auto __fn = tl_deviceHookTable.table->vkSetEvent;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSetEvent) {
		__fn = tl_deviceHookTable.replace->vkSetEvent;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSetEvent", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, event);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSetEvent", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkResetEvent(VkDevice device, VkEvent event) {
	auto __fn = tl_deviceHookTable.table->vkResetEvent;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkResetEvent) {
		__fn = tl_deviceHookTable.replace->vkResetEvent;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkResetEvent", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, event);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkResetEvent", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool) {
	auto __fn = tl_deviceHookTable.table->vkCreateQueryPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateQueryPool) {
		__fn = tl_deviceHookTable.replace->vkCreateQueryPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateQueryPool", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pQueryPool);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateQueryPool", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyQueryPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyQueryPool) {
		__fn = tl_deviceHookTable.replace->vkDestroyQueryPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyQueryPool", (PFN_vkVoidFunction)__fn); }
	__fn(device, queryPool, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyQueryPool", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags) {
	auto __fn = tl_deviceHookTable.table->vkGetQueryPoolResults;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetQueryPoolResults) {
		__fn = tl_deviceHookTable.replace->vkGetQueryPoolResults;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetQueryPoolResults", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetQueryPoolResults", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateBuffer(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer) {
	auto __fn = tl_deviceHookTable.table->vkCreateBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateBuffer) {
		__fn = tl_deviceHookTable.replace->vkCreateBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateBuffer", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pBuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateBuffer", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyBuffer) {
		__fn = tl_deviceHookTable.replace->vkDestroyBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyBuffer", (PFN_vkVoidFunction)__fn); }
	__fn(device, buffer, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyBuffer", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView) {
	auto __fn = tl_deviceHookTable.table->vkCreateBufferView;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateBufferView) {
		__fn = tl_deviceHookTable.replace->vkCreateBufferView;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateBufferView", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pView);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateBufferView", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyBufferView;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyBufferView) {
		__fn = tl_deviceHookTable.replace->vkDestroyBufferView;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyBufferView", (PFN_vkVoidFunction)__fn); }
	__fn(device, bufferView, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyBufferView", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateImage(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage) {
	auto __fn = tl_deviceHookTable.table->vkCreateImage;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateImage) {
		__fn = tl_deviceHookTable.replace->vkCreateImage;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateImage", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pImage);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateImage", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyImage;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyImage) {
		__fn = tl_deviceHookTable.replace->vkDestroyImage;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyImage", (PFN_vkVoidFunction)__fn); }
	__fn(device, image, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyImage", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout) {
	auto __fn = tl_deviceHookTable.table->vkGetImageSubresourceLayout;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageSubresourceLayout) {
		__fn = tl_deviceHookTable.replace->vkGetImageSubresourceLayout;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageSubresourceLayout", (PFN_vkVoidFunction)__fn); }
	__fn(device, image, pSubresource, pLayout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageSubresourceLayout", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateImageView(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView) {
	auto __fn = tl_deviceHookTable.table->vkCreateImageView;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateImageView) {
		__fn = tl_deviceHookTable.replace->vkCreateImageView;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateImageView", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pView);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateImageView", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyImageView;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyImageView) {
		__fn = tl_deviceHookTable.replace->vkDestroyImageView;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyImageView", (PFN_vkVoidFunction)__fn); }
	__fn(device, imageView, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyImageView", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule) {
	auto __fn = tl_deviceHookTable.table->vkCreateShaderModule;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateShaderModule) {
		__fn = tl_deviceHookTable.replace->vkCreateShaderModule;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateShaderModule", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pShaderModule);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateShaderModule", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyShaderModule;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyShaderModule) {
		__fn = tl_deviceHookTable.replace->vkDestroyShaderModule;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyShaderModule", (PFN_vkVoidFunction)__fn); }
	__fn(device, shaderModule, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyShaderModule", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache) {
	auto __fn = tl_deviceHookTable.table->vkCreatePipelineCache;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreatePipelineCache) {
		__fn = tl_deviceHookTable.replace->vkCreatePipelineCache;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreatePipelineCache", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pPipelineCache);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreatePipelineCache", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyPipelineCache;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyPipelineCache) {
		__fn = tl_deviceHookTable.replace->vkDestroyPipelineCache;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyPipelineCache", (PFN_vkVoidFunction)__fn); }
	__fn(device, pipelineCache, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyPipelineCache", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetPipelineCacheData;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPipelineCacheData) {
		__fn = tl_deviceHookTable.replace->vkGetPipelineCacheData;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPipelineCacheData", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipelineCache, pDataSize, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPipelineCacheData", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches) {
	auto __fn = tl_deviceHookTable.table->vkMergePipelineCaches;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkMergePipelineCaches) {
		__fn = tl_deviceHookTable.replace->vkMergePipelineCaches;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkMergePipelineCaches", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, dstCache, srcCacheCount, pSrcCaches);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkMergePipelineCaches", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	auto __fn = tl_deviceHookTable.table->vkCreateGraphicsPipelines;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateGraphicsPipelines) {
		__fn = tl_deviceHookTable.replace->vkCreateGraphicsPipelines;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateGraphicsPipelines", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateGraphicsPipelines", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	auto __fn = tl_deviceHookTable.table->vkCreateComputePipelines;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateComputePipelines) {
		__fn = tl_deviceHookTable.replace->vkCreateComputePipelines;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateComputePipelines", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateComputePipelines", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyPipeline;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyPipeline) {
		__fn = tl_deviceHookTable.replace->vkDestroyPipeline;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyPipeline", (PFN_vkVoidFunction)__fn); }
	__fn(device, pipeline, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyPipeline", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout) {
	auto __fn = tl_deviceHookTable.table->vkCreatePipelineLayout;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreatePipelineLayout) {
		__fn = tl_deviceHookTable.replace->vkCreatePipelineLayout;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreatePipelineLayout", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pPipelineLayout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreatePipelineLayout", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyPipelineLayout;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyPipelineLayout) {
		__fn = tl_deviceHookTable.replace->vkDestroyPipelineLayout;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyPipelineLayout", (PFN_vkVoidFunction)__fn); }
	__fn(device, pipelineLayout, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyPipelineLayout", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateSampler(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler) {
	auto __fn = tl_deviceHookTable.table->vkCreateSampler;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateSampler) {
		__fn = tl_deviceHookTable.replace->vkCreateSampler;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateSampler", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pSampler);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateSampler", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroySampler;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroySampler) {
		__fn = tl_deviceHookTable.replace->vkDestroySampler;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroySampler", (PFN_vkVoidFunction)__fn); }
	__fn(device, sampler, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroySampler", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout) {
	auto __fn = tl_deviceHookTable.table->vkCreateDescriptorSetLayout;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateDescriptorSetLayout) {
		__fn = tl_deviceHookTable.replace->vkCreateDescriptorSetLayout;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateDescriptorSetLayout", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pSetLayout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateDescriptorSetLayout", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyDescriptorSetLayout;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyDescriptorSetLayout) {
		__fn = tl_deviceHookTable.replace->vkDestroyDescriptorSetLayout;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyDescriptorSetLayout", (PFN_vkVoidFunction)__fn); }
	__fn(device, descriptorSetLayout, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyDescriptorSetLayout", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool) {
	auto __fn = tl_deviceHookTable.table->vkCreateDescriptorPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateDescriptorPool) {
		__fn = tl_deviceHookTable.replace->vkCreateDescriptorPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateDescriptorPool", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pDescriptorPool);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateDescriptorPool", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyDescriptorPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyDescriptorPool) {
		__fn = tl_deviceHookTable.replace->vkDestroyDescriptorPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyDescriptorPool", (PFN_vkVoidFunction)__fn); }
	__fn(device, descriptorPool, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyDescriptorPool", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) {
	auto __fn = tl_deviceHookTable.table->vkResetDescriptorPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkResetDescriptorPool) {
		__fn = tl_deviceHookTable.replace->vkResetDescriptorPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkResetDescriptorPool", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, descriptorPool, flags);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkResetDescriptorPool", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets) {
	auto __fn = tl_deviceHookTable.table->vkAllocateDescriptorSets;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkAllocateDescriptorSets) {
		__fn = tl_deviceHookTable.replace->vkAllocateDescriptorSets;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkAllocateDescriptorSets", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pAllocateInfo, pDescriptorSets);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkAllocateDescriptorSets", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets) {
	auto __fn = tl_deviceHookTable.table->vkFreeDescriptorSets;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkFreeDescriptorSets) {
		__fn = tl_deviceHookTable.replace->vkFreeDescriptorSets;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkFreeDescriptorSets", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, descriptorPool, descriptorSetCount, pDescriptorSets);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkFreeDescriptorSets", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies) {
	auto __fn = tl_deviceHookTable.table->vkUpdateDescriptorSets;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkUpdateDescriptorSets) {
		__fn = tl_deviceHookTable.replace->vkUpdateDescriptorSets;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkUpdateDescriptorSets", (PFN_vkVoidFunction)__fn); }
	__fn(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkUpdateDescriptorSets", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer) {
	auto __fn = tl_deviceHookTable.table->vkCreateFramebuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateFramebuffer) {
		__fn = tl_deviceHookTable.replace->vkCreateFramebuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateFramebuffer", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pFramebuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateFramebuffer", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyFramebuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyFramebuffer) {
		__fn = tl_deviceHookTable.replace->vkDestroyFramebuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyFramebuffer", (PFN_vkVoidFunction)__fn); }
	__fn(device, framebuffer, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyFramebuffer", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	auto __fn = tl_deviceHookTable.table->vkCreateRenderPass;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateRenderPass) {
		__fn = tl_deviceHookTable.replace->vkCreateRenderPass;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateRenderPass", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pRenderPass);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateRenderPass", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyRenderPass;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyRenderPass) {
		__fn = tl_deviceHookTable.replace->vkDestroyRenderPass;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyRenderPass", (PFN_vkVoidFunction)__fn); }
	__fn(device, renderPass, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyRenderPass", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity) {
	auto __fn = tl_deviceHookTable.table->vkGetRenderAreaGranularity;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetRenderAreaGranularity) {
		__fn = tl_deviceHookTable.replace->vkGetRenderAreaGranularity;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetRenderAreaGranularity", (PFN_vkVoidFunction)__fn); }
	__fn(device, renderPass, pGranularity);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetRenderAreaGranularity", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool) {
	auto __fn = tl_deviceHookTable.table->vkCreateCommandPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateCommandPool) {
		__fn = tl_deviceHookTable.replace->vkCreateCommandPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateCommandPool", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pCommandPool);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateCommandPool", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyCommandPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyCommandPool) {
		__fn = tl_deviceHookTable.replace->vkDestroyCommandPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyCommandPool", (PFN_vkVoidFunction)__fn); }
	__fn(device, commandPool, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyCommandPool", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) {
	auto __fn = tl_deviceHookTable.table->vkResetCommandPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkResetCommandPool) {
		__fn = tl_deviceHookTable.replace->vkResetCommandPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkResetCommandPool", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, commandPool, flags);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkResetCommandPool", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers) {
	auto __fn = tl_deviceHookTable.table->vkAllocateCommandBuffers;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkAllocateCommandBuffers) {
		__fn = tl_deviceHookTable.replace->vkAllocateCommandBuffers;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkAllocateCommandBuffers", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pAllocateInfo, pCommandBuffers);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkAllocateCommandBuffers", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
	auto __fn = tl_deviceHookTable.table->vkFreeCommandBuffers;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkFreeCommandBuffers) {
		__fn = tl_deviceHookTable.replace->vkFreeCommandBuffers;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkFreeCommandBuffers", (PFN_vkVoidFunction)__fn); }
	__fn(device, commandPool, commandBufferCount, pCommandBuffers);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkFreeCommandBuffers", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo) {
	auto __fn = tl_deviceHookTable.table->vkBeginCommandBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBeginCommandBuffer) {
		__fn = tl_deviceHookTable.replace->vkBeginCommandBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBeginCommandBuffer", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(commandBuffer, pBeginInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBeginCommandBuffer", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkEndCommandBuffer(VkCommandBuffer commandBuffer) {
	auto __fn = tl_deviceHookTable.table->vkEndCommandBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkEndCommandBuffer) {
		__fn = tl_deviceHookTable.replace->vkEndCommandBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkEndCommandBuffer", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(commandBuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkEndCommandBuffer", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) {
	auto __fn = tl_deviceHookTable.table->vkResetCommandBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkResetCommandBuffer) {
		__fn = tl_deviceHookTable.replace->vkResetCommandBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkResetCommandBuffer", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(commandBuffer, flags);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkResetCommandBuffer", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindPipeline;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindPipeline) {
		__fn = tl_deviceHookTable.replace->vkCmdBindPipeline;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindPipeline", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineBindPoint, pipeline);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindPipeline", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetViewport;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetViewport) {
		__fn = tl_deviceHookTable.replace->vkCmdSetViewport;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetViewport", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstViewport, viewportCount, pViewports);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetViewport", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetScissor;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetScissor) {
		__fn = tl_deviceHookTable.replace->vkCmdSetScissor;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetScissor", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstScissor, scissorCount, pScissors);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetScissor", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetLineWidth;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetLineWidth) {
		__fn = tl_deviceHookTable.replace->vkCmdSetLineWidth;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetLineWidth", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, lineWidth);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetLineWidth", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthBias;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthBias) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthBias;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBias", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBias", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4]) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetBlendConstants;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetBlendConstants) {
		__fn = tl_deviceHookTable.replace->vkCmdSetBlendConstants;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetBlendConstants", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, blendConstants);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetBlendConstants", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthBounds;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthBounds) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthBounds;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBounds", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, minDepthBounds, maxDepthBounds);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBounds", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetStencilCompareMask;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetStencilCompareMask) {
		__fn = tl_deviceHookTable.replace->vkCmdSetStencilCompareMask;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetStencilCompareMask", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, faceMask, compareMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetStencilCompareMask", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetStencilWriteMask;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetStencilWriteMask) {
		__fn = tl_deviceHookTable.replace->vkCmdSetStencilWriteMask;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetStencilWriteMask", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, faceMask, writeMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetStencilWriteMask", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetStencilReference;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetStencilReference) {
		__fn = tl_deviceHookTable.replace->vkCmdSetStencilReference;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetStencilReference", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, faceMask, reference);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetStencilReference", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindDescriptorSets;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindDescriptorSets) {
		__fn = tl_deviceHookTable.replace->vkCmdBindDescriptorSets;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindDescriptorSets", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindDescriptorSets", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindIndexBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindIndexBuffer) {
		__fn = tl_deviceHookTable.replace->vkCmdBindIndexBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindIndexBuffer", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, indexType);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindIndexBuffer", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindVertexBuffers;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindVertexBuffers) {
		__fn = tl_deviceHookTable.replace->vkCmdBindVertexBuffers;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindVertexBuffers", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindVertexBuffers", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
	auto __fn = tl_deviceHookTable.table->vkCmdDraw;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDraw) {
		__fn = tl_deviceHookTable.replace->vkCmdDraw;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDraw", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDraw", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndexed;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndexed) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndexed;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexed", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexed", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndirect;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndirect) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndirect;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirect", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, drawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirect", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndexedIndirect;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndexedIndirect) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndexedIndirect;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexedIndirect", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, drawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexedIndirect", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	auto __fn = tl_deviceHookTable.table->vkCmdDispatch;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDispatch) {
		__fn = tl_deviceHookTable.replace->vkCmdDispatch;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDispatch", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, groupCountX, groupCountY, groupCountZ);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDispatch", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) {
	auto __fn = tl_deviceHookTable.table->vkCmdDispatchIndirect;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDispatchIndirect) {
		__fn = tl_deviceHookTable.replace->vkCmdDispatchIndirect;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDispatchIndirect", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDispatchIndirect", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyBuffer) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyBuffer", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyBuffer", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyImage;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyImage) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyImage;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyImage", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyImage", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter) {
	auto __fn = tl_deviceHookTable.table->vkCmdBlitImage;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBlitImage) {
		__fn = tl_deviceHookTable.replace->vkCmdBlitImage;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBlitImage", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBlitImage", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyBufferToImage;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyBufferToImage) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyBufferToImage;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyBufferToImage", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyBufferToImage", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyImageToBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyImageToBuffer) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyImageToBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyImageToBuffer", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyImageToBuffer", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData) {
	auto __fn = tl_deviceHookTable.table->vkCmdUpdateBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdUpdateBuffer) {
		__fn = tl_deviceHookTable.replace->vkCmdUpdateBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdUpdateBuffer", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdUpdateBuffer", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) {
	auto __fn = tl_deviceHookTable.table->vkCmdFillBuffer;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdFillBuffer) {
		__fn = tl_deviceHookTable.replace->vkCmdFillBuffer;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdFillBuffer", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, dstBuffer, dstOffset, size, data);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdFillBuffer", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
	auto __fn = tl_deviceHookTable.table->vkCmdClearColorImage;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdClearColorImage) {
		__fn = tl_deviceHookTable.replace->vkCmdClearColorImage;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdClearColorImage", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdClearColorImage", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
	auto __fn = tl_deviceHookTable.table->vkCmdClearDepthStencilImage;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdClearDepthStencilImage) {
		__fn = tl_deviceHookTable.replace->vkCmdClearDepthStencilImage;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdClearDepthStencilImage", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdClearDepthStencilImage", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects) {
	auto __fn = tl_deviceHookTable.table->vkCmdClearAttachments;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdClearAttachments) {
		__fn = tl_deviceHookTable.replace->vkCmdClearAttachments;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdClearAttachments", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdClearAttachments", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions) {
	auto __fn = tl_deviceHookTable.table->vkCmdResolveImage;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdResolveImage) {
		__fn = tl_deviceHookTable.replace->vkCmdResolveImage;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdResolveImage", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdResolveImage", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetEvent;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetEvent) {
		__fn = tl_deviceHookTable.replace->vkCmdSetEvent;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetEvent", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, event, stageMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetEvent", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdResetEvent;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdResetEvent) {
		__fn = tl_deviceHookTable.replace->vkCmdResetEvent;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdResetEvent", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, event, stageMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdResetEvent", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
	auto __fn = tl_deviceHookTable.table->vkCmdWaitEvents;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWaitEvents) {
		__fn = tl_deviceHookTable.replace->vkCmdWaitEvents;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWaitEvents", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWaitEvents", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
	auto __fn = tl_deviceHookTable.table->vkCmdPipelineBarrier;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdPipelineBarrier) {
		__fn = tl_deviceHookTable.replace->vkCmdPipelineBarrier;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdPipelineBarrier", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdPipelineBarrier", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginQuery;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginQuery) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginQuery;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginQuery", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, queryPool, query, flags);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginQuery", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndQuery;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndQuery) {
		__fn = tl_deviceHookTable.replace->vkCmdEndQuery;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndQuery", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, queryPool, query);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndQuery", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	auto __fn = tl_deviceHookTable.table->vkCmdResetQueryPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdResetQueryPool) {
		__fn = tl_deviceHookTable.replace->vkCmdResetQueryPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdResetQueryPool", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, queryPool, firstQuery, queryCount);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdResetQueryPool", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query) {
	auto __fn = tl_deviceHookTable.table->vkCmdWriteTimestamp;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWriteTimestamp) {
		__fn = tl_deviceHookTable.replace->vkCmdWriteTimestamp;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWriteTimestamp", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineStage, queryPool, query);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWriteTimestamp", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyQueryPoolResults;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyQueryPoolResults) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyQueryPoolResults;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyQueryPoolResults", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyQueryPoolResults", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues) {
	auto __fn = tl_deviceHookTable.table->vkCmdPushConstants;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdPushConstants) {
		__fn = tl_deviceHookTable.replace->vkCmdPushConstants;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdPushConstants", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, layout, stageFlags, offset, size, pValues);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdPushConstants", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginRenderPass;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginRenderPass) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginRenderPass;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginRenderPass", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pRenderPassBegin, contents);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginRenderPass", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) {
	auto __fn = tl_deviceHookTable.table->vkCmdNextSubpass;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdNextSubpass) {
		__fn = tl_deviceHookTable.replace->vkCmdNextSubpass;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdNextSubpass", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, contents);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdNextSubpass", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndRenderPass(VkCommandBuffer commandBuffer) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndRenderPass;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndRenderPass) {
		__fn = tl_deviceHookTable.replace->vkCmdEndRenderPass;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndRenderPass", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndRenderPass", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
	auto __fn = tl_deviceHookTable.table->vkCmdExecuteCommands;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdExecuteCommands) {
		__fn = tl_deviceHookTable.replace->vkCmdExecuteCommands;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdExecuteCommands", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, commandBufferCount, pCommandBuffers);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdExecuteCommands", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_VERSION_1_0) */

#if defined(VK_VERSION_1_1)

static VkResult xl_hook_tl_deviceHookTable_vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos) {
	auto __fn = tl_deviceHookTable.table->vkBindBufferMemory2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBindBufferMemory2) {
		__fn = tl_deviceHookTable.replace->vkBindBufferMemory2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBindBufferMemory2", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, bindInfoCount, pBindInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBindBufferMemory2", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo* pBindInfos) {
	auto __fn = tl_deviceHookTable.table->vkBindImageMemory2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBindImageMemory2) {
		__fn = tl_deviceHookTable.replace->vkBindImageMemory2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBindImageMemory2", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, bindInfoCount, pBindInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBindImageMemory2", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceGroupPeerMemoryFeatures;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceGroupPeerMemoryFeatures) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceGroupPeerMemoryFeatures;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupPeerMemoryFeatures", (PFN_vkVoidFunction)__fn); }
	__fn(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupPeerMemoryFeatures", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDeviceMask;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDeviceMask) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDeviceMask;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDeviceMask", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, deviceMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDeviceMask", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	auto __fn = tl_deviceHookTable.table->vkCmdDispatchBase;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDispatchBase) {
		__fn = tl_deviceHookTable.replace->vkCmdDispatchBase;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDispatchBase", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDispatchBase", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetImageMemoryRequirements2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageMemoryRequirements2) {
		__fn = tl_deviceHookTable.replace->vkGetImageMemoryRequirements2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageMemoryRequirements2", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageMemoryRequirements2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferMemoryRequirements2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferMemoryRequirements2) {
		__fn = tl_deviceHookTable.replace->vkGetBufferMemoryRequirements2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferMemoryRequirements2", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferMemoryRequirements2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetImageSparseMemoryRequirements2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageSparseMemoryRequirements2) {
		__fn = tl_deviceHookTable.replace->vkGetImageSparseMemoryRequirements2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageSparseMemoryRequirements2", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageSparseMemoryRequirements2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags) {
	auto __fn = tl_deviceHookTable.table->vkTrimCommandPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkTrimCommandPool) {
		__fn = tl_deviceHookTable.replace->vkTrimCommandPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkTrimCommandPool", (PFN_vkVoidFunction)__fn); }
	__fn(device, commandPool, flags);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkTrimCommandPool", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceQueue2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceQueue2) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceQueue2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceQueue2", (PFN_vkVoidFunction)__fn); }
	__fn(device, pQueueInfo, pQueue);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceQueue2", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion) {
	auto __fn = tl_deviceHookTable.table->vkCreateSamplerYcbcrConversion;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateSamplerYcbcrConversion) {
		__fn = tl_deviceHookTable.replace->vkCreateSamplerYcbcrConversion;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateSamplerYcbcrConversion", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pYcbcrConversion);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateSamplerYcbcrConversion", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroySamplerYcbcrConversion;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroySamplerYcbcrConversion) {
		__fn = tl_deviceHookTable.replace->vkDestroySamplerYcbcrConversion;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroySamplerYcbcrConversion", (PFN_vkVoidFunction)__fn); }
	__fn(device, ycbcrConversion, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroySamplerYcbcrConversion", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate) {
	auto __fn = tl_deviceHookTable.table->vkCreateDescriptorUpdateTemplate;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateDescriptorUpdateTemplate) {
		__fn = tl_deviceHookTable.replace->vkCreateDescriptorUpdateTemplate;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateDescriptorUpdateTemplate", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateDescriptorUpdateTemplate", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyDescriptorUpdateTemplate;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyDescriptorUpdateTemplate) {
		__fn = tl_deviceHookTable.replace->vkDestroyDescriptorUpdateTemplate;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyDescriptorUpdateTemplate", (PFN_vkVoidFunction)__fn); }
	__fn(device, descriptorUpdateTemplate, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyDescriptorUpdateTemplate", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData) {
	auto __fn = tl_deviceHookTable.table->vkUpdateDescriptorSetWithTemplate;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkUpdateDescriptorSetWithTemplate) {
		__fn = tl_deviceHookTable.replace->vkUpdateDescriptorSetWithTemplate;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkUpdateDescriptorSetWithTemplate", (PFN_vkVoidFunction)__fn); }
	__fn(device, descriptorSet, descriptorUpdateTemplate, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkUpdateDescriptorSetWithTemplate", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport) {
	auto __fn = tl_deviceHookTable.table->vkGetDescriptorSetLayoutSupport;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDescriptorSetLayoutSupport) {
		__fn = tl_deviceHookTable.replace->vkGetDescriptorSetLayoutSupport;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutSupport", (PFN_vkVoidFunction)__fn); }
	__fn(device, pCreateInfo, pSupport);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutSupport", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_VERSION_1_1) */

#if defined(VK_VERSION_1_2)

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndirectCount;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndirectCount) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndirectCount;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirectCount", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirectCount", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndexedIndirectCount;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndexedIndirectCount) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndexedIndirectCount;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexedIndirectCount", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexedIndirectCount", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	auto __fn = tl_deviceHookTable.table->vkCreateRenderPass2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateRenderPass2) {
		__fn = tl_deviceHookTable.replace->vkCreateRenderPass2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateRenderPass2", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pRenderPass);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateRenderPass2", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfo* pSubpassBeginInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginRenderPass2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginRenderPass2) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginRenderPass2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginRenderPass2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginRenderPass2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo* pSubpassBeginInfo, const VkSubpassEndInfo* pSubpassEndInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdNextSubpass2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdNextSubpass2) {
		__fn = tl_deviceHookTable.replace->vkCmdNextSubpass2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdNextSubpass2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdNextSubpass2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo* pSubpassEndInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndRenderPass2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndRenderPass2) {
		__fn = tl_deviceHookTable.replace->vkCmdEndRenderPass2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndRenderPass2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pSubpassEndInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndRenderPass2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	auto __fn = tl_deviceHookTable.table->vkResetQueryPool;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkResetQueryPool) {
		__fn = tl_deviceHookTable.replace->vkResetQueryPool;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkResetQueryPool", (PFN_vkVoidFunction)__fn); }
	__fn(device, queryPool, firstQuery, queryCount);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkResetQueryPool", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t* pValue) {
	auto __fn = tl_deviceHookTable.table->vkGetSemaphoreCounterValue;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSemaphoreCounterValue) {
		__fn = tl_deviceHookTable.replace->vkGetSemaphoreCounterValue;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSemaphoreCounterValue", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, semaphore, pValue);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSemaphoreCounterValue", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo* pWaitInfo, uint64_t timeout) {
	auto __fn = tl_deviceHookTable.table->vkWaitSemaphores;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkWaitSemaphores) {
		__fn = tl_deviceHookTable.replace->vkWaitSemaphores;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkWaitSemaphores", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pWaitInfo, timeout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkWaitSemaphores", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo* pSignalInfo) {
	auto __fn = tl_deviceHookTable.table->vkSignalSemaphore;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSignalSemaphore) {
		__fn = tl_deviceHookTable.replace->vkSignalSemaphore;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSignalSemaphore", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pSignalInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSignalSemaphore", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkDeviceAddress xl_hook_tl_deviceHookTable_vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferDeviceAddress;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferDeviceAddress) {
		__fn = tl_deviceHookTable.replace->vkGetBufferDeviceAddress;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferDeviceAddress", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferDeviceAddress", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static uint64_t xl_hook_tl_deviceHookTable_vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferOpaqueCaptureAddress;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferOpaqueCaptureAddress) {
		__fn = tl_deviceHookTable.replace->vkGetBufferOpaqueCaptureAddress;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferOpaqueCaptureAddress", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferOpaqueCaptureAddress", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static uint64_t xl_hook_tl_deviceHookTable_vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceMemoryOpaqueCaptureAddress;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceMemoryOpaqueCaptureAddress) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceMemoryOpaqueCaptureAddress;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceMemoryOpaqueCaptureAddress", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceMemoryOpaqueCaptureAddress", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_VERSION_1_2) */

#if defined(VK_VERSION_1_3)

static VkResult xl_hook_tl_deviceHookTable_vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot) {
	auto __fn = tl_deviceHookTable.table->vkCreatePrivateDataSlot;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreatePrivateDataSlot) {
		__fn = tl_deviceHookTable.replace->vkCreatePrivateDataSlot;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreatePrivateDataSlot", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pPrivateDataSlot);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreatePrivateDataSlot", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyPrivateDataSlot;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyPrivateDataSlot) {
		__fn = tl_deviceHookTable.replace->vkDestroyPrivateDataSlot;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyPrivateDataSlot", (PFN_vkVoidFunction)__fn); }
	__fn(device, privateDataSlot, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyPrivateDataSlot", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data) {
	auto __fn = tl_deviceHookTable.table->vkSetPrivateData;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSetPrivateData) {
		__fn = tl_deviceHookTable.replace->vkSetPrivateData;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSetPrivateData", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, objectType, objectHandle, privateDataSlot, data);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSetPrivateData", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetPrivateData;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPrivateData) {
		__fn = tl_deviceHookTable.replace->vkGetPrivateData;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPrivateData", (PFN_vkVoidFunction)__fn); }
	__fn(device, objectType, objectHandle, privateDataSlot, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPrivateData", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo* pDependencyInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetEvent2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetEvent2) {
		__fn = tl_deviceHookTable.replace->vkCmdSetEvent2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetEvent2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, event, pDependencyInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetEvent2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdResetEvent2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdResetEvent2) {
		__fn = tl_deviceHookTable.replace->vkCmdResetEvent2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdResetEvent2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, event, stageMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdResetEvent2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfo* pDependencyInfos) {
	auto __fn = tl_deviceHookTable.table->vkCmdWaitEvents2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWaitEvents2) {
		__fn = tl_deviceHookTable.replace->vkCmdWaitEvents2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWaitEvents2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, eventCount, pEvents, pDependencyInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWaitEvents2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo* pDependencyInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdPipelineBarrier2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdPipelineBarrier2) {
		__fn = tl_deviceHookTable.replace->vkCmdPipelineBarrier2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdPipelineBarrier2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pDependencyInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdPipelineBarrier2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query) {
	auto __fn = tl_deviceHookTable.table->vkCmdWriteTimestamp2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWriteTimestamp2) {
		__fn = tl_deviceHookTable.replace->vkCmdWriteTimestamp2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWriteTimestamp2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, stage, queryPool, query);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWriteTimestamp2", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2* pSubmits, VkFence fence) {
	auto __fn = tl_deviceHookTable.table->vkQueueSubmit2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkQueueSubmit2) {
		__fn = tl_deviceHookTable.replace->vkQueueSubmit2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkQueueSubmit2", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(queue, submitCount, pSubmits, fence);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkQueueSubmit2", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2* pCopyBufferInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyBuffer2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyBuffer2) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyBuffer2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyBuffer2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCopyBufferInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyBuffer2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2* pCopyImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyImage2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyImage2) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyImage2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyImage2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCopyImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyImage2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2* pCopyBufferToImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyBufferToImage2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyBufferToImage2) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyBufferToImage2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyBufferToImage2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCopyBufferToImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyBufferToImage2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2* pCopyImageToBufferInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyImageToBuffer2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyImageToBuffer2) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyImageToBuffer2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyImageToBuffer2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCopyImageToBufferInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyImageToBuffer2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2* pBlitImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdBlitImage2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBlitImage2) {
		__fn = tl_deviceHookTable.replace->vkCmdBlitImage2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBlitImage2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pBlitImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBlitImage2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2* pResolveImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdResolveImage2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdResolveImage2) {
		__fn = tl_deviceHookTable.replace->vkCmdResolveImage2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdResolveImage2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pResolveImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdResolveImage2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo* pRenderingInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginRendering;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginRendering) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginRendering;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginRendering", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pRenderingInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginRendering", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndRendering(VkCommandBuffer commandBuffer) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndRendering;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndRendering) {
		__fn = tl_deviceHookTable.replace->vkCmdEndRendering;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndRendering", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndRendering", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCullMode;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCullMode) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCullMode;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCullMode", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, cullMode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCullMode", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetFrontFace;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetFrontFace) {
		__fn = tl_deviceHookTable.replace->vkCmdSetFrontFace;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetFrontFace", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, frontFace);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetFrontFace", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetPrimitiveTopology;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetPrimitiveTopology) {
		__fn = tl_deviceHookTable.replace->vkCmdSetPrimitiveTopology;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetPrimitiveTopology", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, primitiveTopology);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetPrimitiveTopology", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetViewportWithCount;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetViewportWithCount) {
		__fn = tl_deviceHookTable.replace->vkCmdSetViewportWithCount;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetViewportWithCount", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, viewportCount, pViewports);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetViewportWithCount", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetScissorWithCount;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetScissorWithCount) {
		__fn = tl_deviceHookTable.replace->vkCmdSetScissorWithCount;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetScissorWithCount", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, scissorCount, pScissors);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetScissorWithCount", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindVertexBuffers2;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindVertexBuffers2) {
		__fn = tl_deviceHookTable.replace->vkCmdBindVertexBuffers2;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindVertexBuffers2", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindVertexBuffers2", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthTestEnable;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthTestEnable) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthTestEnable;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthTestEnable", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthTestEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthTestEnable", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthWriteEnable;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthWriteEnable) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthWriteEnable;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthWriteEnable", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthWriteEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthWriteEnable", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthCompareOp;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthCompareOp) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthCompareOp;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthCompareOp", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthCompareOp);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthCompareOp", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthBoundsTestEnable;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthBoundsTestEnable) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthBoundsTestEnable;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBoundsTestEnable", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthBoundsTestEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBoundsTestEnable", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetStencilTestEnable;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetStencilTestEnable) {
		__fn = tl_deviceHookTable.replace->vkCmdSetStencilTestEnable;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetStencilTestEnable", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, stencilTestEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetStencilTestEnable", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetStencilOp;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetStencilOp) {
		__fn = tl_deviceHookTable.replace->vkCmdSetStencilOp;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetStencilOp", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetStencilOp", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetRasterizerDiscardEnable;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetRasterizerDiscardEnable) {
		__fn = tl_deviceHookTable.replace->vkCmdSetRasterizerDiscardEnable;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetRasterizerDiscardEnable", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, rasterizerDiscardEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetRasterizerDiscardEnable", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthBiasEnable;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthBiasEnable) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthBiasEnable;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBiasEnable", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthBiasEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBiasEnable", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetPrimitiveRestartEnable;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetPrimitiveRestartEnable) {
		__fn = tl_deviceHookTable.replace->vkCmdSetPrimitiveRestartEnable;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetPrimitiveRestartEnable", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, primitiveRestartEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetPrimitiveRestartEnable", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceBufferMemoryRequirements;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceBufferMemoryRequirements) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceBufferMemoryRequirements;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceBufferMemoryRequirements", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceBufferMemoryRequirements", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceImageMemoryRequirements;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceImageMemoryRequirements) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceImageMemoryRequirements;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceImageMemoryRequirements", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceImageMemoryRequirements", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceImageSparseMemoryRequirements;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceImageSparseMemoryRequirements) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceImageSparseMemoryRequirements;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceImageSparseMemoryRequirements", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceImageSparseMemoryRequirements", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_VERSION_1_3) */

#if defined(VKSC_VERSION_1_0)

static void xl_hook_tl_deviceHookTable_vkGetCommandPoolMemoryConsumption(VkDevice device, VkCommandPool commandPool, VkCommandBuffer commandBuffer, VkCommandPoolMemoryConsumption* pConsumption) {
	auto __fn = tl_deviceHookTable.table->vkGetCommandPoolMemoryConsumption;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetCommandPoolMemoryConsumption) {
		__fn = tl_deviceHookTable.replace->vkGetCommandPoolMemoryConsumption;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetCommandPoolMemoryConsumption", (PFN_vkVoidFunction)__fn); }
	__fn(device, commandPool, commandBuffer, pConsumption);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetCommandPoolMemoryConsumption", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetFaultData(VkDevice device, VkFaultQueryBehavior faultQueryBehavior, VkBool32* pUnrecordedFaults, uint32_t* pFaultCount, VkFaultData* pFaults) {
	auto __fn = tl_deviceHookTable.table->vkGetFaultData;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetFaultData) {
		__fn = tl_deviceHookTable.replace->vkGetFaultData;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetFaultData", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, faultQueryBehavior, pUnrecordedFaults, pFaultCount, pFaults);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetFaultData", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VKSC_VERSION_1_0) */

#if defined(VK_KHR_swapchain)

static VkResult xl_hook_tl_deviceHookTable_vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain) {
	auto __fn = tl_deviceHookTable.table->vkCreateSwapchainKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateSwapchainKHR) {
		__fn = tl_deviceHookTable.replace->vkCreateSwapchainKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateSwapchainKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pCreateInfo, pAllocator, pSwapchain);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateSwapchainKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroySwapchainKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroySwapchainKHR) {
		__fn = tl_deviceHookTable.replace->vkDestroySwapchainKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroySwapchainKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, swapchain, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroySwapchainKHR", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages) {
	auto __fn = tl_deviceHookTable.table->vkGetSwapchainImagesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSwapchainImagesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetSwapchainImagesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSwapchainImagesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchain, pSwapchainImageCount, pSwapchainImages);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSwapchainImagesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex) {
	auto __fn = tl_deviceHookTable.table->vkAcquireNextImageKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkAcquireNextImageKHR) {
		__fn = tl_deviceHookTable.replace->vkAcquireNextImageKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkAcquireNextImageKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchain, timeout, semaphore, fence, pImageIndex);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkAcquireNextImageKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR* pPresentInfo) {
	auto __fn = tl_deviceHookTable.table->vkQueuePresentKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkQueuePresentKHR) {
		__fn = tl_deviceHookTable.replace->vkQueuePresentKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkQueuePresentKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(queue, pPresentInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkQueuePresentKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_swapchain) */

#if (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface))

static VkResult xl_hook_tl_deviceHookTable_vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceGroupPresentCapabilitiesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceGroupPresentCapabilitiesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceGroupPresentCapabilitiesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupPresentCapabilitiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pDeviceGroupPresentCapabilities);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupPresentCapabilitiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceGroupSurfacePresentModesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceGroupSurfacePresentModesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceGroupSurfacePresentModesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupSurfacePresentModesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, surface, pModes);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupSurfacePresentModesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) */

#if (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain))

static VkResult xl_hook_tl_deviceHookTable_vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex) {
	auto __fn = tl_deviceHookTable.table->vkAcquireNextImage2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkAcquireNextImage2KHR) {
		__fn = tl_deviceHookTable.replace->vkAcquireNextImage2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkAcquireNextImage2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pAcquireInfo, pImageIndex);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkAcquireNextImage2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) */

#if defined(VK_KHR_display_swapchain)

static VkResult xl_hook_tl_deviceHookTable_vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains) {
	auto __fn = tl_deviceHookTable.table->vkCreateSharedSwapchainsKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateSharedSwapchainsKHR) {
		__fn = tl_deviceHookTable.replace->vkCreateSharedSwapchainsKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateSharedSwapchainsKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchainCount, pCreateInfos, pCreateInfos, pAllocator, pSwapchains);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateSharedSwapchainsKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_display_swapchain) */

#if defined(VK_EXT_debug_marker)

static VkResult xl_hook_tl_deviceHookTable_vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT* pTagInfo) {
	auto __fn = tl_deviceHookTable.table->vkDebugMarkerSetObjectTagEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDebugMarkerSetObjectTagEXT) {
		__fn = tl_deviceHookTable.replace->vkDebugMarkerSetObjectTagEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDebugMarkerSetObjectTagEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pTagInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDebugMarkerSetObjectTagEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT* pNameInfo) {
	auto __fn = tl_deviceHookTable.table->vkDebugMarkerSetObjectNameEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDebugMarkerSetObjectNameEXT) {
		__fn = tl_deviceHookTable.replace->vkDebugMarkerSetObjectNameEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDebugMarkerSetObjectNameEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pNameInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDebugMarkerSetObjectNameEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdDebugMarkerBeginEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDebugMarkerBeginEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdDebugMarkerBeginEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDebugMarkerBeginEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pMarkerInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDebugMarkerBeginEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer) {
	auto __fn = tl_deviceHookTable.table->vkCmdDebugMarkerEndEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDebugMarkerEndEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdDebugMarkerEndEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDebugMarkerEndEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDebugMarkerEndEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdDebugMarkerInsertEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDebugMarkerInsertEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdDebugMarkerInsertEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDebugMarkerInsertEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pMarkerInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDebugMarkerInsertEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_debug_marker) */

#if defined(VK_KHR_video_queue)

static VkResult xl_hook_tl_deviceHookTable_vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionKHR* pVideoSession) {
	auto __fn = tl_deviceHookTable.table->vkCreateVideoSessionKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateVideoSessionKHR) {
		__fn = tl_deviceHookTable.replace->vkCreateVideoSessionKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateVideoSessionKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pVideoSession);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateVideoSessionKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyVideoSessionKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyVideoSessionKHR) {
		__fn = tl_deviceHookTable.replace->vkDestroyVideoSessionKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyVideoSessionKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, videoSession, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyVideoSessionKHR", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t* pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetVideoSessionMemoryRequirementsKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetVideoSessionMemoryRequirementsKHR) {
		__fn = tl_deviceHookTable.replace->vkGetVideoSessionMemoryRequirementsKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetVideoSessionMemoryRequirementsKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetVideoSessionMemoryRequirementsKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos) {
	auto __fn = tl_deviceHookTable.table->vkBindVideoSessionMemoryKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBindVideoSessionMemoryKHR) {
		__fn = tl_deviceHookTable.replace->vkBindVideoSessionMemoryKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBindVideoSessionMemoryKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBindVideoSessionMemoryKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionParametersKHR* pVideoSessionParameters) {
	auto __fn = tl_deviceHookTable.table->vkCreateVideoSessionParametersKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateVideoSessionParametersKHR) {
		__fn = tl_deviceHookTable.replace->vkCreateVideoSessionParametersKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateVideoSessionParametersKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pVideoSessionParameters);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateVideoSessionParametersKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo) {
	auto __fn = tl_deviceHookTable.table->vkUpdateVideoSessionParametersKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkUpdateVideoSessionParametersKHR) {
		__fn = tl_deviceHookTable.replace->vkUpdateVideoSessionParametersKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkUpdateVideoSessionParametersKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, videoSessionParameters, pUpdateInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkUpdateVideoSessionParametersKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyVideoSessionParametersKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyVideoSessionParametersKHR) {
		__fn = tl_deviceHookTable.replace->vkDestroyVideoSessionParametersKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyVideoSessionParametersKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, videoSessionParameters, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyVideoSessionParametersKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR* pBeginInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginVideoCodingKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginVideoCodingKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginVideoCodingKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginVideoCodingKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pBeginInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginVideoCodingKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR* pEndCodingInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndVideoCodingKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndVideoCodingKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdEndVideoCodingKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndVideoCodingKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pEndCodingInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndVideoCodingKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR* pCodingControlInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdControlVideoCodingKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdControlVideoCodingKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdControlVideoCodingKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdControlVideoCodingKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCodingControlInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdControlVideoCodingKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_video_queue) */

#if defined(VK_KHR_video_decode_queue)

static void xl_hook_tl_deviceHookTable_vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR* pDecodeInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdDecodeVideoKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDecodeVideoKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdDecodeVideoKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDecodeVideoKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pDecodeInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDecodeVideoKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_video_decode_queue) */

#if defined(VK_EXT_transform_feedback)

static void xl_hook_tl_deviceHookTable_vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindTransformFeedbackBuffersEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindTransformFeedbackBuffersEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdBindTransformFeedbackBuffersEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindTransformFeedbackBuffersEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindTransformFeedbackBuffersEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginTransformFeedbackEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginTransformFeedbackEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginTransformFeedbackEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginTransformFeedbackEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginTransformFeedbackEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndTransformFeedbackEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndTransformFeedbackEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdEndTransformFeedbackEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndTransformFeedbackEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndTransformFeedbackEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginQueryIndexedEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginQueryIndexedEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginQueryIndexedEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginQueryIndexedEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, queryPool, query, flags, index);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginQueryIndexedEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndQueryIndexedEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndQueryIndexedEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdEndQueryIndexedEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndQueryIndexedEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, queryPool, query, index);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndQueryIndexedEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndirectByteCountEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndirectByteCountEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndirectByteCountEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirectByteCountEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirectByteCountEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_transform_feedback) */

#if defined(VK_NVX_binary_import)

static VkResult xl_hook_tl_deviceHookTable_vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuModuleNVX* pModule) {
	auto __fn = tl_deviceHookTable.table->vkCreateCuModuleNVX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateCuModuleNVX) {
		__fn = tl_deviceHookTable.replace->vkCreateCuModuleNVX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateCuModuleNVX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pModule);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateCuModuleNVX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuFunctionNVX* pFunction) {
	auto __fn = tl_deviceHookTable.table->vkCreateCuFunctionNVX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateCuFunctionNVX) {
		__fn = tl_deviceHookTable.replace->vkCreateCuFunctionNVX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateCuFunctionNVX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pFunction);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateCuFunctionNVX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyCuModuleNVX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyCuModuleNVX) {
		__fn = tl_deviceHookTable.replace->vkDestroyCuModuleNVX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyCuModuleNVX", (PFN_vkVoidFunction)__fn); }
	__fn(device, module, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyCuModuleNVX", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyCuFunctionNVX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyCuFunctionNVX) {
		__fn = tl_deviceHookTable.replace->vkDestroyCuFunctionNVX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyCuFunctionNVX", (PFN_vkVoidFunction)__fn); }
	__fn(device, function, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyCuFunctionNVX", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX* pLaunchInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCuLaunchKernelNVX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCuLaunchKernelNVX) {
		__fn = tl_deviceHookTable.replace->vkCmdCuLaunchKernelNVX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCuLaunchKernelNVX", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pLaunchInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCuLaunchKernelNVX", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NVX_binary_import) */

#if defined(VK_NVX_image_view_handle)

static uint32_t xl_hook_tl_deviceHookTable_vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetImageViewHandleNVX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageViewHandleNVX) {
		__fn = tl_deviceHookTable.replace->vkGetImageViewHandleNVX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageViewHandleNVX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageViewHandleNVX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetImageViewAddressNVX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageViewAddressNVX) {
		__fn = tl_deviceHookTable.replace->vkGetImageViewAddressNVX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageViewAddressNVX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, imageView, pProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageViewAddressNVX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NVX_image_view_handle) */

#if defined(VK_AMD_draw_indirect_count)

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndirectCountAMD;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndirectCountAMD) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndirectCountAMD;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirectCountAMD", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirectCountAMD", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndexedIndirectCountAMD;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndexedIndirectCountAMD) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndexedIndirectCountAMD;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexedIndirectCountAMD", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexedIndirectCountAMD", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_AMD_draw_indirect_count) */

#if defined(VK_AMD_shader_info)

static VkResult xl_hook_tl_deviceHookTable_vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetShaderInfoAMD;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetShaderInfoAMD) {
		__fn = tl_deviceHookTable.replace->vkGetShaderInfoAMD;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetShaderInfoAMD", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetShaderInfoAMD", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_AMD_shader_info) */

#if defined(VK_KHR_dynamic_rendering)

static void xl_hook_tl_deviceHookTable_vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfoKHR* pRenderingInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginRenderingKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginRenderingKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginRenderingKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginRenderingKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pRenderingInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginRenderingKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndRenderingKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndRenderingKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdEndRenderingKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndRenderingKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndRenderingKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_dynamic_rendering) */

#if defined(VK_NV_external_memory_win32)

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryWin32HandleNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryWin32HandleNV) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryWin32HandleNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryWin32HandleNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, memory, handleType, pHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryWin32HandleNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_external_memory_win32) */

#if defined(VK_KHR_device_group)

static void xl_hook_tl_deviceHookTable_vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlagsKHR* pPeerMemoryFeatures) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceGroupPeerMemoryFeaturesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceGroupPeerMemoryFeaturesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceGroupPeerMemoryFeaturesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupPeerMemoryFeaturesKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupPeerMemoryFeaturesKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDeviceMaskKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDeviceMaskKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDeviceMaskKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDeviceMaskKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, deviceMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDeviceMaskKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	auto __fn = tl_deviceHookTable.table->vkCmdDispatchBaseKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDispatchBaseKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdDispatchBaseKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDispatchBaseKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDispatchBaseKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_device_group) */

#if defined(VK_KHR_maintenance1)

static void xl_hook_tl_deviceHookTable_vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlagsKHR flags) {
	auto __fn = tl_deviceHookTable.table->vkTrimCommandPoolKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkTrimCommandPoolKHR) {
		__fn = tl_deviceHookTable.replace->vkTrimCommandPoolKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkTrimCommandPoolKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, commandPool, flags);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkTrimCommandPoolKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_maintenance1) */

#if defined(VK_KHR_external_memory_win32)

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryWin32HandleKHR(VkDevice device, const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryWin32HandleKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryWin32HandleKHR) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryWin32HandleKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetWin32HandleInfo, pHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryWin32HandlePropertiesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryWin32HandlePropertiesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryWin32HandlePropertiesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryWin32HandlePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, handleType, handle, pMemoryWin32HandleProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryWin32HandlePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_external_memory_win32) */

#if defined(VK_KHR_external_memory_fd)

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryFdKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryFdKHR) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryFdKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryFdKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetFdInfo, pFd);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryFdKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryFdPropertiesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryFdPropertiesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryFdPropertiesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryFdPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, handleType, fd, pMemoryFdProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryFdPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_external_memory_fd) */

#if defined(VK_KHR_external_semaphore_win32)

static VkResult xl_hook_tl_deviceHookTable_vkImportSemaphoreWin32HandleKHR(VkDevice device, const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo) {
	auto __fn = tl_deviceHookTable.table->vkImportSemaphoreWin32HandleKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkImportSemaphoreWin32HandleKHR) {
		__fn = tl_deviceHookTable.replace->vkImportSemaphoreWin32HandleKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkImportSemaphoreWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pImportSemaphoreWin32HandleInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkImportSemaphoreWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetSemaphoreWin32HandleKHR(VkDevice device, const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetSemaphoreWin32HandleKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSemaphoreWin32HandleKHR) {
		__fn = tl_deviceHookTable.replace->vkGetSemaphoreWin32HandleKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSemaphoreWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetWin32HandleInfo, pHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSemaphoreWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_external_semaphore_win32) */

#if defined(VK_KHR_external_semaphore_fd)

static VkResult xl_hook_tl_deviceHookTable_vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo) {
	auto __fn = tl_deviceHookTable.table->vkImportSemaphoreFdKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkImportSemaphoreFdKHR) {
		__fn = tl_deviceHookTable.replace->vkImportSemaphoreFdKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkImportSemaphoreFdKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pImportSemaphoreFdInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkImportSemaphoreFdKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd) {
	auto __fn = tl_deviceHookTable.table->vkGetSemaphoreFdKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSemaphoreFdKHR) {
		__fn = tl_deviceHookTable.replace->vkGetSemaphoreFdKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSemaphoreFdKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetFdInfo, pFd);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSemaphoreFdKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_external_semaphore_fd) */

#if defined(VK_KHR_push_descriptor)

static void xl_hook_tl_deviceHookTable_vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites) {
	auto __fn = tl_deviceHookTable.table->vkCmdPushDescriptorSetKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdPushDescriptorSetKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdPushDescriptorSetKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdPushDescriptorSetKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdPushDescriptorSetKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_push_descriptor) */

#if (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) || (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor))

static void xl_hook_tl_deviceHookTable_vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData) {
	auto __fn = tl_deviceHookTable.table->vkCmdPushDescriptorSetWithTemplateKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdPushDescriptorSetWithTemplateKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdPushDescriptorSetWithTemplateKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdPushDescriptorSetWithTemplateKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdPushDescriptorSetWithTemplateKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) || (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) */

#if defined(VK_EXT_conditional_rendering)

static void xl_hook_tl_deviceHookTable_vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginConditionalRenderingEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginConditionalRenderingEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginConditionalRenderingEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginConditionalRenderingEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pConditionalRenderingBegin);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginConditionalRenderingEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndConditionalRenderingEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndConditionalRenderingEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdEndConditionalRenderingEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndConditionalRenderingEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndConditionalRenderingEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_conditional_rendering) */

#if defined(VK_KHR_descriptor_update_template)

static VkResult xl_hook_tl_deviceHookTable_vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplateKHR* pDescriptorUpdateTemplate) {
	auto __fn = tl_deviceHookTable.table->vkCreateDescriptorUpdateTemplateKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateDescriptorUpdateTemplateKHR) {
		__fn = tl_deviceHookTable.replace->vkCreateDescriptorUpdateTemplateKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateDescriptorUpdateTemplateKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateDescriptorUpdateTemplateKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyDescriptorUpdateTemplateKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyDescriptorUpdateTemplateKHR) {
		__fn = tl_deviceHookTable.replace->vkDestroyDescriptorUpdateTemplateKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyDescriptorUpdateTemplateKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, descriptorUpdateTemplate, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyDescriptorUpdateTemplateKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const void* pData) {
	auto __fn = tl_deviceHookTable.table->vkUpdateDescriptorSetWithTemplateKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkUpdateDescriptorSetWithTemplateKHR) {
		__fn = tl_deviceHookTable.replace->vkUpdateDescriptorSetWithTemplateKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkUpdateDescriptorSetWithTemplateKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, descriptorSet, descriptorUpdateTemplate, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkUpdateDescriptorSetWithTemplateKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_descriptor_update_template) */

#if defined(VK_NV_clip_space_w_scaling)

static void xl_hook_tl_deviceHookTable_vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetViewportWScalingNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetViewportWScalingNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetViewportWScalingNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetViewportWScalingNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetViewportWScalingNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_clip_space_w_scaling) */

#if defined(VK_EXT_display_control)

static VkResult xl_hook_tl_deviceHookTable_vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo) {
	auto __fn = tl_deviceHookTable.table->vkDisplayPowerControlEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDisplayPowerControlEXT) {
		__fn = tl_deviceHookTable.replace->vkDisplayPowerControlEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDisplayPowerControlEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, display, pDisplayPowerInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDisplayPowerControlEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
	auto __fn = tl_deviceHookTable.table->vkRegisterDeviceEventEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkRegisterDeviceEventEXT) {
		__fn = tl_deviceHookTable.replace->vkRegisterDeviceEventEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkRegisterDeviceEventEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pDeviceEventInfo, pAllocator, pFence);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkRegisterDeviceEventEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
	auto __fn = tl_deviceHookTable.table->vkRegisterDisplayEventEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkRegisterDisplayEventEXT) {
		__fn = tl_deviceHookTable.replace->vkRegisterDisplayEventEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkRegisterDisplayEventEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, display, pDisplayEventInfo, pAllocator, pFence);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkRegisterDisplayEventEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue) {
	auto __fn = tl_deviceHookTable.table->vkGetSwapchainCounterEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSwapchainCounterEXT) {
		__fn = tl_deviceHookTable.replace->vkGetSwapchainCounterEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSwapchainCounterEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchain, counter, pCounterValue);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSwapchainCounterEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_display_control) */

#if defined(VK_GOOGLE_display_timing)

static VkResult xl_hook_tl_deviceHookTable_vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetRefreshCycleDurationGOOGLE;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetRefreshCycleDurationGOOGLE) {
		__fn = tl_deviceHookTable.replace->vkGetRefreshCycleDurationGOOGLE;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetRefreshCycleDurationGOOGLE", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchain, pDisplayTimingProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetRefreshCycleDurationGOOGLE", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings) {
	auto __fn = tl_deviceHookTable.table->vkGetPastPresentationTimingGOOGLE;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPastPresentationTimingGOOGLE) {
		__fn = tl_deviceHookTable.replace->vkGetPastPresentationTimingGOOGLE;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPastPresentationTimingGOOGLE", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchain, pPresentationTimingCount, pPresentationTimings);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPastPresentationTimingGOOGLE", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_GOOGLE_display_timing) */

#if defined(VK_EXT_discard_rectangles)

static void xl_hook_tl_deviceHookTable_vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDiscardRectangleEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDiscardRectangleEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDiscardRectangleEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDiscardRectangleEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDiscardRectangleEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDiscardRectangleEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDiscardRectangleEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDiscardRectangleEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDiscardRectangleEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, discardRectangleEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDiscardRectangleEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDiscardRectangleModeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDiscardRectangleModeEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDiscardRectangleModeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDiscardRectangleModeEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, discardRectangleMode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDiscardRectangleModeEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_discard_rectangles) */

#if defined(VK_EXT_hdr_metadata)

static void xl_hook_tl_deviceHookTable_vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata) {
	auto __fn = tl_deviceHookTable.table->vkSetHdrMetadataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSetHdrMetadataEXT) {
		__fn = tl_deviceHookTable.replace->vkSetHdrMetadataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSetHdrMetadataEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, swapchainCount, pSwapchains, pMetadata);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSetHdrMetadataEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_hdr_metadata) */

#if defined(VK_KHR_create_renderpass2)

static VkResult xl_hook_tl_deviceHookTable_vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2KHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	auto __fn = tl_deviceHookTable.table->vkCreateRenderPass2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateRenderPass2KHR) {
		__fn = tl_deviceHookTable.replace->vkCreateRenderPass2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateRenderPass2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pRenderPass);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateRenderPass2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfoKHR* pSubpassBeginInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdBeginRenderPass2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBeginRenderPass2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdBeginRenderPass2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBeginRenderPass2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBeginRenderPass2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfoKHR* pSubpassBeginInfo, const VkSubpassEndInfoKHR* pSubpassEndInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdNextSubpass2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdNextSubpass2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdNextSubpass2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdNextSubpass2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdNextSubpass2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfoKHR* pSubpassEndInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdEndRenderPass2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEndRenderPass2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdEndRenderPass2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEndRenderPass2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pSubpassEndInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEndRenderPass2KHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_create_renderpass2) */

#if defined(VK_KHR_shared_presentable_image)

static VkResult xl_hook_tl_deviceHookTable_vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain) {
	auto __fn = tl_deviceHookTable.table->vkGetSwapchainStatusKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSwapchainStatusKHR) {
		__fn = tl_deviceHookTable.replace->vkGetSwapchainStatusKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSwapchainStatusKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchain);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSwapchainStatusKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_shared_presentable_image) */

#if defined(VK_KHR_external_fence_win32)

static VkResult xl_hook_tl_deviceHookTable_vkImportFenceWin32HandleKHR(VkDevice device, const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo) {
	auto __fn = tl_deviceHookTable.table->vkImportFenceWin32HandleKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkImportFenceWin32HandleKHR) {
		__fn = tl_deviceHookTable.replace->vkImportFenceWin32HandleKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkImportFenceWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pImportFenceWin32HandleInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkImportFenceWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetFenceWin32HandleKHR(VkDevice device, const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetFenceWin32HandleKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetFenceWin32HandleKHR) {
		__fn = tl_deviceHookTable.replace->vkGetFenceWin32HandleKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetFenceWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetWin32HandleInfo, pHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetFenceWin32HandleKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_external_fence_win32) */

#if defined(VK_KHR_external_fence_fd)

static VkResult xl_hook_tl_deviceHookTable_vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR* pImportFenceFdInfo) {
	auto __fn = tl_deviceHookTable.table->vkImportFenceFdKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkImportFenceFdKHR) {
		__fn = tl_deviceHookTable.replace->vkImportFenceFdKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkImportFenceFdKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pImportFenceFdInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkImportFenceFdKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd) {
	auto __fn = tl_deviceHookTable.table->vkGetFenceFdKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetFenceFdKHR) {
		__fn = tl_deviceHookTable.replace->vkGetFenceFdKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetFenceFdKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetFdInfo, pFd);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetFenceFdKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_external_fence_fd) */

#if defined(VK_KHR_performance_query)

static VkResult xl_hook_tl_deviceHookTable_vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkAcquireProfilingLockKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkAcquireProfilingLockKHR) {
		__fn = tl_deviceHookTable.replace->vkAcquireProfilingLockKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkAcquireProfilingLockKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkAcquireProfilingLockKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkReleaseProfilingLockKHR(VkDevice device) {
	auto __fn = tl_deviceHookTable.table->vkReleaseProfilingLockKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkReleaseProfilingLockKHR) {
		__fn = tl_deviceHookTable.replace->vkReleaseProfilingLockKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkReleaseProfilingLockKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkReleaseProfilingLockKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_performance_query) */

#if defined(VK_ANDROID_external_memory_android_hardware_buffer)

static VkResult xl_hook_tl_deviceHookTable_vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice device, const struct AHardwareBuffer* buffer, VkAndroidHardwareBufferPropertiesANDROID* pProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetAndroidHardwareBufferPropertiesANDROID;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetAndroidHardwareBufferPropertiesANDROID) {
		__fn = tl_deviceHookTable.replace->vkGetAndroidHardwareBufferPropertiesANDROID;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetAndroidHardwareBufferPropertiesANDROID", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, buffer, pProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetAndroidHardwareBufferPropertiesANDROID", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryAndroidHardwareBufferANDROID(VkDevice device, const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, struct AHardwareBuffer** pBuffer) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryAndroidHardwareBufferANDROID;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryAndroidHardwareBufferANDROID) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryAndroidHardwareBufferANDROID;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryAndroidHardwareBufferANDROID", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo, pBuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryAndroidHardwareBufferANDROID", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */

#if defined(VK_AMDX_shader_enqueue)

static VkResult xl_hook_tl_deviceHookTable_vkCreateExecutionGraphPipelinesAMDX(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkExecutionGraphPipelineCreateInfoAMDX* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	auto __fn = tl_deviceHookTable.table->vkCreateExecutionGraphPipelinesAMDX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateExecutionGraphPipelinesAMDX) {
		__fn = tl_deviceHookTable.replace->vkCreateExecutionGraphPipelinesAMDX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateExecutionGraphPipelinesAMDX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateExecutionGraphPipelinesAMDX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetExecutionGraphPipelineScratchSizeAMDX(VkDevice device, VkPipeline executionGraph, VkExecutionGraphPipelineScratchSizeAMDX* pSizeInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetExecutionGraphPipelineScratchSizeAMDX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetExecutionGraphPipelineScratchSizeAMDX) {
		__fn = tl_deviceHookTable.replace->vkGetExecutionGraphPipelineScratchSizeAMDX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetExecutionGraphPipelineScratchSizeAMDX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, executionGraph, pSizeInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetExecutionGraphPipelineScratchSizeAMDX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetExecutionGraphPipelineNodeIndexAMDX(VkDevice device, VkPipeline executionGraph, const VkPipelineShaderStageNodeCreateInfoAMDX* pNodeInfo, uint32_t* pNodeIndex) {
	auto __fn = tl_deviceHookTable.table->vkGetExecutionGraphPipelineNodeIndexAMDX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetExecutionGraphPipelineNodeIndexAMDX) {
		__fn = tl_deviceHookTable.replace->vkGetExecutionGraphPipelineNodeIndexAMDX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetExecutionGraphPipelineNodeIndexAMDX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, executionGraph, pNodeInfo, pNodeIndex);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetExecutionGraphPipelineNodeIndexAMDX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdInitializeGraphScratchMemoryAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch) {
	auto __fn = tl_deviceHookTable.table->vkCmdInitializeGraphScratchMemoryAMDX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdInitializeGraphScratchMemoryAMDX) {
		__fn = tl_deviceHookTable.replace->vkCmdInitializeGraphScratchMemoryAMDX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdInitializeGraphScratchMemoryAMDX", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, scratch);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdInitializeGraphScratchMemoryAMDX", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDispatchGraphAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, const VkDispatchGraphCountInfoAMDX* pCountInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdDispatchGraphAMDX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDispatchGraphAMDX) {
		__fn = tl_deviceHookTable.replace->vkCmdDispatchGraphAMDX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDispatchGraphAMDX", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, scratch, pCountInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDispatchGraphAMDX", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDispatchGraphIndirectAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, const VkDispatchGraphCountInfoAMDX* pCountInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdDispatchGraphIndirectAMDX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDispatchGraphIndirectAMDX) {
		__fn = tl_deviceHookTable.replace->vkCmdDispatchGraphIndirectAMDX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDispatchGraphIndirectAMDX", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, scratch, pCountInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDispatchGraphIndirectAMDX", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDispatchGraphIndirectCountAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceAddress countInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdDispatchGraphIndirectCountAMDX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDispatchGraphIndirectCountAMDX) {
		__fn = tl_deviceHookTable.replace->vkCmdDispatchGraphIndirectCountAMDX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDispatchGraphIndirectCountAMDX", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, scratch, countInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDispatchGraphIndirectCountAMDX", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_AMDX_shader_enqueue) */

#if defined(VK_EXT_sample_locations)

static void xl_hook_tl_deviceHookTable_vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetSampleLocationsEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetSampleLocationsEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetSampleLocationsEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetSampleLocationsEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pSampleLocationsInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetSampleLocationsEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_sample_locations) */

#if defined(VK_KHR_get_memory_requirements2)

static void xl_hook_tl_deviceHookTable_vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetImageMemoryRequirements2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageMemoryRequirements2KHR) {
		__fn = tl_deviceHookTable.replace->vkGetImageMemoryRequirements2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageMemoryRequirements2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageMemoryRequirements2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferMemoryRequirements2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferMemoryRequirements2KHR) {
		__fn = tl_deviceHookTable.replace->vkGetBufferMemoryRequirements2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferMemoryRequirements2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferMemoryRequirements2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2KHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetImageSparseMemoryRequirements2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageSparseMemoryRequirements2KHR) {
		__fn = tl_deviceHookTable.replace->vkGetImageSparseMemoryRequirements2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageSparseMemoryRequirements2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageSparseMemoryRequirements2KHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_get_memory_requirements2) */

#if defined(VK_KHR_acceleration_structure)

static VkResult xl_hook_tl_deviceHookTable_vkCreateAccelerationStructureKHR(VkDevice device, const VkAccelerationStructureCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure) {
	auto __fn = tl_deviceHookTable.table->vkCreateAccelerationStructureKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateAccelerationStructureKHR) {
		__fn = tl_deviceHookTable.replace->vkCreateAccelerationStructureKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pAccelerationStructure);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyAccelerationStructureKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyAccelerationStructureKHR) {
		__fn = tl_deviceHookTable.replace->vkDestroyAccelerationStructureKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, accelerationStructure, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos) {
	auto __fn = tl_deviceHookTable.table->vkCmdBuildAccelerationStructuresKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBuildAccelerationStructuresKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdBuildAccelerationStructuresKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBuildAccelerationStructuresKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBuildAccelerationStructuresKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t* const*             ppMaxPrimitiveCounts) {
	auto __fn = tl_deviceHookTable.table->vkCmdBuildAccelerationStructuresIndirectKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBuildAccelerationStructuresIndirectKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdBuildAccelerationStructuresIndirectKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBuildAccelerationStructuresIndirectKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBuildAccelerationStructuresIndirectKHR", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos) {
	auto __fn = tl_deviceHookTable.table->vkBuildAccelerationStructuresKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBuildAccelerationStructuresKHR) {
		__fn = tl_deviceHookTable.replace->vkBuildAccelerationStructuresKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBuildAccelerationStructuresKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBuildAccelerationStructuresKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCopyAccelerationStructureKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCopyAccelerationStructureKHR) {
		__fn = tl_deviceHookTable.replace->vkCopyAccelerationStructureKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCopyAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, deferredOperation, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCopyAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCopyAccelerationStructureToMemoryKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCopyAccelerationStructureToMemoryKHR) {
		__fn = tl_deviceHookTable.replace->vkCopyAccelerationStructureToMemoryKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCopyAccelerationStructureToMemoryKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, deferredOperation, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCopyAccelerationStructureToMemoryKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCopyMemoryToAccelerationStructureKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCopyMemoryToAccelerationStructureKHR) {
		__fn = tl_deviceHookTable.replace->vkCopyMemoryToAccelerationStructureKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCopyMemoryToAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, deferredOperation, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCopyMemoryToAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) {
	auto __fn = tl_deviceHookTable.table->vkWriteAccelerationStructuresPropertiesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkWriteAccelerationStructuresPropertiesKHR) {
		__fn = tl_deviceHookTable.replace->vkWriteAccelerationStructuresPropertiesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkWriteAccelerationStructuresPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkWriteAccelerationStructuresPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyAccelerationStructureKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyAccelerationStructureKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyAccelerationStructureKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyAccelerationStructureToMemoryKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyAccelerationStructureToMemoryKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyAccelerationStructureToMemoryKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyAccelerationStructureToMemoryKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyAccelerationStructureToMemoryKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyMemoryToAccelerationStructureKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyMemoryToAccelerationStructureKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyMemoryToAccelerationStructureKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyMemoryToAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyMemoryToAccelerationStructureKHR", (PFN_vkVoidFunction)__fn); }
}

static VkDeviceAddress xl_hook_tl_deviceHookTable_vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetAccelerationStructureDeviceAddressKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetAccelerationStructureDeviceAddressKHR) {
		__fn = tl_deviceHookTable.replace->vkGetAccelerationStructureDeviceAddressKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureDeviceAddressKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureDeviceAddressKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) {
	auto __fn = tl_deviceHookTable.table->vkCmdWriteAccelerationStructuresPropertiesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWriteAccelerationStructuresPropertiesKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdWriteAccelerationStructuresPropertiesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWriteAccelerationStructuresPropertiesKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWriteAccelerationStructuresPropertiesKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, const VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceAccelerationStructureCompatibilityKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceAccelerationStructureCompatibilityKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceAccelerationStructureCompatibilityKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceAccelerationStructureCompatibilityKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pVersionInfo, pCompatibility);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceAccelerationStructureCompatibilityKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, const uint32_t* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetAccelerationStructureBuildSizesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetAccelerationStructureBuildSizesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetAccelerationStructureBuildSizesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureBuildSizesKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureBuildSizesKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_acceleration_structure) */

#if defined(VK_KHR_ray_tracing_pipeline)

static void xl_hook_tl_deviceHookTable_vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth) {
	auto __fn = tl_deviceHookTable.table->vkCmdTraceRaysKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdTraceRaysKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdTraceRaysKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdTraceRaysKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdTraceRaysKHR", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	auto __fn = tl_deviceHookTable.table->vkCreateRayTracingPipelinesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateRayTracingPipelinesKHR) {
		__fn = tl_deviceHookTable.replace->vkCreateRayTracingPipelinesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateRayTracingPipelinesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateRayTracingPipelinesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetRayTracingShaderGroupHandlesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetRayTracingShaderGroupHandlesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetRayTracingShaderGroupHandlesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetRayTracingShaderGroupHandlesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipeline, firstGroup, groupCount, dataSize, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetRayTracingShaderGroupHandlesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetRayTracingCaptureReplayShaderGroupHandlesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipeline, firstGroup, groupCount, dataSize, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) {
	auto __fn = tl_deviceHookTable.table->vkCmdTraceRaysIndirectKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdTraceRaysIndirectKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdTraceRaysIndirectKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdTraceRaysIndirectKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdTraceRaysIndirectKHR", (PFN_vkVoidFunction)__fn); }
}

static VkDeviceSize xl_hook_tl_deviceHookTable_vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader) {
	auto __fn = tl_deviceHookTable.table->vkGetRayTracingShaderGroupStackSizeKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetRayTracingShaderGroupStackSizeKHR) {
		__fn = tl_deviceHookTable.replace->vkGetRayTracingShaderGroupStackSizeKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetRayTracingShaderGroupStackSizeKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipeline, group, groupShader);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetRayTracingShaderGroupStackSizeKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetRayTracingPipelineStackSizeKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetRayTracingPipelineStackSizeKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdSetRayTracingPipelineStackSizeKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetRayTracingPipelineStackSizeKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineStackSize);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetRayTracingPipelineStackSizeKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_ray_tracing_pipeline) */

#if defined(VK_KHR_sampler_ycbcr_conversion)

static VkResult xl_hook_tl_deviceHookTable_vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversionKHR* pYcbcrConversion) {
	auto __fn = tl_deviceHookTable.table->vkCreateSamplerYcbcrConversionKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateSamplerYcbcrConversionKHR) {
		__fn = tl_deviceHookTable.replace->vkCreateSamplerYcbcrConversionKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateSamplerYcbcrConversionKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pYcbcrConversion);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateSamplerYcbcrConversionKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionKHR ycbcrConversion, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroySamplerYcbcrConversionKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroySamplerYcbcrConversionKHR) {
		__fn = tl_deviceHookTable.replace->vkDestroySamplerYcbcrConversionKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroySamplerYcbcrConversionKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, ycbcrConversion, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroySamplerYcbcrConversionKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_sampler_ycbcr_conversion) */

#if defined(VK_KHR_bind_memory2)

static VkResult xl_hook_tl_deviceHookTable_vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfoKHR* pBindInfos) {
	auto __fn = tl_deviceHookTable.table->vkBindBufferMemory2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBindBufferMemory2KHR) {
		__fn = tl_deviceHookTable.replace->vkBindBufferMemory2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBindBufferMemory2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, bindInfoCount, pBindInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBindBufferMemory2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfoKHR* pBindInfos) {
	auto __fn = tl_deviceHookTable.table->vkBindImageMemory2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBindImageMemory2KHR) {
		__fn = tl_deviceHookTable.replace->vkBindImageMemory2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBindImageMemory2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, bindInfoCount, pBindInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBindImageMemory2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_bind_memory2) */

#if defined(VK_EXT_image_drm_format_modifier)

static VkResult xl_hook_tl_deviceHookTable_vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetImageDrmFormatModifierPropertiesEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageDrmFormatModifierPropertiesEXT) {
		__fn = tl_deviceHookTable.replace->vkGetImageDrmFormatModifierPropertiesEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageDrmFormatModifierPropertiesEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, image, pProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageDrmFormatModifierPropertiesEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_image_drm_format_modifier) */

#if defined(VK_EXT_validation_cache)

static VkResult xl_hook_tl_deviceHookTable_vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache) {
	auto __fn = tl_deviceHookTable.table->vkCreateValidationCacheEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateValidationCacheEXT) {
		__fn = tl_deviceHookTable.replace->vkCreateValidationCacheEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateValidationCacheEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pValidationCache);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateValidationCacheEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyValidationCacheEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyValidationCacheEXT) {
		__fn = tl_deviceHookTable.replace->vkDestroyValidationCacheEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyValidationCacheEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, validationCache, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyValidationCacheEXT", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT* pSrcCaches) {
	auto __fn = tl_deviceHookTable.table->vkMergeValidationCachesEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkMergeValidationCachesEXT) {
		__fn = tl_deviceHookTable.replace->vkMergeValidationCachesEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkMergeValidationCachesEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, dstCache, srcCacheCount, pSrcCaches);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkMergeValidationCachesEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetValidationCacheDataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetValidationCacheDataEXT) {
		__fn = tl_deviceHookTable.replace->vkGetValidationCacheDataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetValidationCacheDataEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, validationCache, pDataSize, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetValidationCacheDataEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_validation_cache) */

#if defined(VK_NV_shading_rate_image)

static void xl_hook_tl_deviceHookTable_vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindShadingRateImageNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindShadingRateImageNV) {
		__fn = tl_deviceHookTable.replace->vkCmdBindShadingRateImageNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindShadingRateImageNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, imageView, imageLayout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindShadingRateImageNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV* pShadingRatePalettes) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetViewportShadingRatePaletteNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetViewportShadingRatePaletteNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetViewportShadingRatePaletteNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetViewportShadingRatePaletteNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetViewportShadingRatePaletteNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV* pCustomSampleOrders) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCoarseSampleOrderNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCoarseSampleOrderNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCoarseSampleOrderNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCoarseSampleOrderNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCoarseSampleOrderNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_shading_rate_image) */

#if defined(VK_NV_ray_tracing)

static VkResult xl_hook_tl_deviceHookTable_vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure) {
	auto __fn = tl_deviceHookTable.table->vkCreateAccelerationStructureNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateAccelerationStructureNV) {
		__fn = tl_deviceHookTable.replace->vkCreateAccelerationStructureNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateAccelerationStructureNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pAccelerationStructure);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateAccelerationStructureNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyAccelerationStructureNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyAccelerationStructureNV) {
		__fn = tl_deviceHookTable.replace->vkDestroyAccelerationStructureNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyAccelerationStructureNV", (PFN_vkVoidFunction)__fn); }
	__fn(device, accelerationStructure, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyAccelerationStructureNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetAccelerationStructureMemoryRequirementsNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetAccelerationStructureMemoryRequirementsNV) {
		__fn = tl_deviceHookTable.replace->vkGetAccelerationStructureMemoryRequirementsNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureMemoryRequirementsNV", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureMemoryRequirementsNV", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV* pBindInfos) {
	auto __fn = tl_deviceHookTable.table->vkBindAccelerationStructureMemoryNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBindAccelerationStructureMemoryNV) {
		__fn = tl_deviceHookTable.replace->vkBindAccelerationStructureMemoryNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBindAccelerationStructureMemoryNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, bindInfoCount, pBindInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBindAccelerationStructureMemoryNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset) {
	auto __fn = tl_deviceHookTable.table->vkCmdBuildAccelerationStructureNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBuildAccelerationStructureNV) {
		__fn = tl_deviceHookTable.replace->vkCmdBuildAccelerationStructureNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBuildAccelerationStructureNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBuildAccelerationStructureNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyAccelerationStructureNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyAccelerationStructureNV) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyAccelerationStructureNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyAccelerationStructureNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, dst, src, mode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyAccelerationStructureNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth) {
	auto __fn = tl_deviceHookTable.table->vkCmdTraceRaysNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdTraceRaysNV) {
		__fn = tl_deviceHookTable.replace->vkCmdTraceRaysNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdTraceRaysNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdTraceRaysNV", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	auto __fn = tl_deviceHookTable.table->vkCreateRayTracingPipelinesNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateRayTracingPipelinesNV) {
		__fn = tl_deviceHookTable.replace->vkCreateRayTracingPipelinesNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateRayTracingPipelinesNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateRayTracingPipelinesNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetRayTracingShaderGroupHandlesNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetRayTracingShaderGroupHandlesNV) {
		__fn = tl_deviceHookTable.replace->vkGetRayTracingShaderGroupHandlesNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetRayTracingShaderGroupHandlesNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipeline, firstGroup, groupCount, dataSize, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetRayTracingShaderGroupHandlesNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetAccelerationStructureHandleNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetAccelerationStructureHandleNV) {
		__fn = tl_deviceHookTable.replace->vkGetAccelerationStructureHandleNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureHandleNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, accelerationStructure, dataSize, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureHandleNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) {
	auto __fn = tl_deviceHookTable.table->vkCmdWriteAccelerationStructuresPropertiesNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWriteAccelerationStructuresPropertiesNV) {
		__fn = tl_deviceHookTable.replace->vkCmdWriteAccelerationStructuresPropertiesNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWriteAccelerationStructuresPropertiesNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWriteAccelerationStructuresPropertiesNV", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader) {
	auto __fn = tl_deviceHookTable.table->vkCompileDeferredNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCompileDeferredNV) {
		__fn = tl_deviceHookTable.replace->vkCompileDeferredNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCompileDeferredNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pipeline, shader);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCompileDeferredNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_ray_tracing) */

#if defined(VK_KHR_maintenance3)

static void xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupportKHR* pSupport) {
	auto __fn = tl_deviceHookTable.table->vkGetDescriptorSetLayoutSupportKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDescriptorSetLayoutSupportKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDescriptorSetLayoutSupportKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutSupportKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pCreateInfo, pSupport);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutSupportKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_maintenance3) */

#if defined(VK_KHR_draw_indirect_count)

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndirectCountKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndirectCountKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndirectCountKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirectCountKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndirectCountKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawIndexedIndirectCountKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawIndexedIndirectCountKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawIndexedIndirectCountKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexedIndirectCountKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawIndexedIndirectCountKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_draw_indirect_count) */

#if defined(VK_EXT_external_memory_host)

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryHostPointerPropertiesEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryHostPointerPropertiesEXT) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryHostPointerPropertiesEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryHostPointerPropertiesEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, handleType, pHostPointer, pMemoryHostPointerProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryHostPointerPropertiesEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_external_memory_host) */

#if defined(VK_AMD_buffer_marker)

static void xl_hook_tl_deviceHookTable_vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) {
	auto __fn = tl_deviceHookTable.table->vkCmdWriteBufferMarkerAMD;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWriteBufferMarkerAMD) {
		__fn = tl_deviceHookTable.replace->vkCmdWriteBufferMarkerAMD;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWriteBufferMarkerAMD", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWriteBufferMarkerAMD", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_AMD_buffer_marker) */

#if defined(VK_EXT_calibrated_timestamps)

static VkResult xl_hook_tl_deviceHookTable_vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation) {
	auto __fn = tl_deviceHookTable.table->vkGetCalibratedTimestampsEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetCalibratedTimestampsEXT) {
		__fn = tl_deviceHookTable.replace->vkGetCalibratedTimestampsEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetCalibratedTimestampsEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetCalibratedTimestampsEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_calibrated_timestamps) */

#if defined(VK_NV_mesh_shader)

static void xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawMeshTasksNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawMeshTasksNV) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawMeshTasksNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, taskCount, firstTask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawMeshTasksIndirectNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawMeshTasksIndirectNV) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawMeshTasksIndirectNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksIndirectNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, drawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksIndirectNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawMeshTasksIndirectCountNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawMeshTasksIndirectCountNV) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawMeshTasksIndirectCountNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksIndirectCountNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksIndirectCountNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_mesh_shader) */

#if defined(VK_NV_scissor_exclusive)

static void xl_hook_tl_deviceHookTable_vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32* pExclusiveScissorEnables) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetExclusiveScissorEnableNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetExclusiveScissorEnableNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetExclusiveScissorEnableNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetExclusiveScissorEnableNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetExclusiveScissorEnableNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D* pExclusiveScissors) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetExclusiveScissorNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetExclusiveScissorNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetExclusiveScissorNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetExclusiveScissorNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetExclusiveScissorNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_scissor_exclusive) */

#if defined(VK_NV_device_diagnostic_checkpoints)

static void xl_hook_tl_deviceHookTable_vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void* pCheckpointMarker) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCheckpointNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCheckpointNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCheckpointNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCheckpointNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCheckpointMarker);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCheckpointNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData) {
	auto __fn = tl_deviceHookTable.table->vkGetQueueCheckpointDataNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetQueueCheckpointDataNV) {
		__fn = tl_deviceHookTable.replace->vkGetQueueCheckpointDataNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetQueueCheckpointDataNV", (PFN_vkVoidFunction)__fn); }
	__fn(queue, pCheckpointDataCount, pCheckpointData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetQueueCheckpointDataNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_device_diagnostic_checkpoints) */

#if defined(VK_KHR_timeline_semaphore)

static VkResult xl_hook_tl_deviceHookTable_vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t* pValue) {
	auto __fn = tl_deviceHookTable.table->vkGetSemaphoreCounterValueKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSemaphoreCounterValueKHR) {
		__fn = tl_deviceHookTable.replace->vkGetSemaphoreCounterValueKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSemaphoreCounterValueKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, semaphore, pValue);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSemaphoreCounterValueKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfoKHR* pWaitInfo, uint64_t timeout) {
	auto __fn = tl_deviceHookTable.table->vkWaitSemaphoresKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkWaitSemaphoresKHR) {
		__fn = tl_deviceHookTable.replace->vkWaitSemaphoresKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkWaitSemaphoresKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pWaitInfo, timeout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkWaitSemaphoresKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfoKHR* pSignalInfo) {
	auto __fn = tl_deviceHookTable.table->vkSignalSemaphoreKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSignalSemaphoreKHR) {
		__fn = tl_deviceHookTable.replace->vkSignalSemaphoreKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSignalSemaphoreKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pSignalInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSignalSemaphoreKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_timeline_semaphore) */

#if defined(VK_INTEL_performance_query)

static VkResult xl_hook_tl_deviceHookTable_vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL* pInitializeInfo) {
	auto __fn = tl_deviceHookTable.table->vkInitializePerformanceApiINTEL;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkInitializePerformanceApiINTEL) {
		__fn = tl_deviceHookTable.replace->vkInitializePerformanceApiINTEL;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkInitializePerformanceApiINTEL", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInitializeInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkInitializePerformanceApiINTEL", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkUninitializePerformanceApiINTEL(VkDevice device) {
	auto __fn = tl_deviceHookTable.table->vkUninitializePerformanceApiINTEL;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkUninitializePerformanceApiINTEL) {
		__fn = tl_deviceHookTable.replace->vkUninitializePerformanceApiINTEL;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkUninitializePerformanceApiINTEL", (PFN_vkVoidFunction)__fn); }
	__fn(device);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkUninitializePerformanceApiINTEL", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL* pMarkerInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetPerformanceMarkerINTEL;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetPerformanceMarkerINTEL) {
		__fn = tl_deviceHookTable.replace->vkCmdSetPerformanceMarkerINTEL;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetPerformanceMarkerINTEL", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(commandBuffer, pMarkerInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetPerformanceMarkerINTEL", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetPerformanceStreamMarkerINTEL;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetPerformanceStreamMarkerINTEL) {
		__fn = tl_deviceHookTable.replace->vkCmdSetPerformanceStreamMarkerINTEL;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetPerformanceStreamMarkerINTEL", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(commandBuffer, pMarkerInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetPerformanceStreamMarkerINTEL", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL* pOverrideInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetPerformanceOverrideINTEL;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetPerformanceOverrideINTEL) {
		__fn = tl_deviceHookTable.replace->vkCmdSetPerformanceOverrideINTEL;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetPerformanceOverrideINTEL", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(commandBuffer, pOverrideInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetPerformanceOverrideINTEL", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration) {
	auto __fn = tl_deviceHookTable.table->vkAcquirePerformanceConfigurationINTEL;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkAcquirePerformanceConfigurationINTEL) {
		__fn = tl_deviceHookTable.replace->vkAcquirePerformanceConfigurationINTEL;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkAcquirePerformanceConfigurationINTEL", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pAcquireInfo, pConfiguration);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkAcquirePerformanceConfigurationINTEL", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration) {
	auto __fn = tl_deviceHookTable.table->vkReleasePerformanceConfigurationINTEL;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkReleasePerformanceConfigurationINTEL) {
		__fn = tl_deviceHookTable.replace->vkReleasePerformanceConfigurationINTEL;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkReleasePerformanceConfigurationINTEL", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, configuration);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkReleasePerformanceConfigurationINTEL", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration) {
	auto __fn = tl_deviceHookTable.table->vkQueueSetPerformanceConfigurationINTEL;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkQueueSetPerformanceConfigurationINTEL) {
		__fn = tl_deviceHookTable.replace->vkQueueSetPerformanceConfigurationINTEL;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkQueueSetPerformanceConfigurationINTEL", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(queue, configuration);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkQueueSetPerformanceConfigurationINTEL", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue) {
	auto __fn = tl_deviceHookTable.table->vkGetPerformanceParameterINTEL;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPerformanceParameterINTEL) {
		__fn = tl_deviceHookTable.replace->vkGetPerformanceParameterINTEL;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPerformanceParameterINTEL", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, parameter, pValue);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPerformanceParameterINTEL", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_INTEL_performance_query) */

#if defined(VK_AMD_display_native_hdr)

static void xl_hook_tl_deviceHookTable_vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable) {
	auto __fn = tl_deviceHookTable.table->vkSetLocalDimmingAMD;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSetLocalDimmingAMD) {
		__fn = tl_deviceHookTable.replace->vkSetLocalDimmingAMD;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSetLocalDimmingAMD", (PFN_vkVoidFunction)__fn); }
	__fn(device, swapChain, localDimmingEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSetLocalDimmingAMD", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_AMD_display_native_hdr) */

#if defined(VK_KHR_fragment_shading_rate)

static void xl_hook_tl_deviceHookTable_vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetFragmentShadingRateKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetFragmentShadingRateKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdSetFragmentShadingRateKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetFragmentShadingRateKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pFragmentSize, combinerOps);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetFragmentShadingRateKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_fragment_shading_rate) */

#if defined(VK_EXT_buffer_device_address)

static VkDeviceAddress xl_hook_tl_deviceHookTable_vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfoEXT* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferDeviceAddressEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferDeviceAddressEXT) {
		__fn = tl_deviceHookTable.replace->vkGetBufferDeviceAddressEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferDeviceAddressEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferDeviceAddressEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_buffer_device_address) */

#if defined(VK_KHR_present_wait)

static VkResult xl_hook_tl_deviceHookTable_vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout) {
	auto __fn = tl_deviceHookTable.table->vkWaitForPresentKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkWaitForPresentKHR) {
		__fn = tl_deviceHookTable.replace->vkWaitForPresentKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkWaitForPresentKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchain, presentId, timeout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkWaitForPresentKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_present_wait) */

#if defined(VK_EXT_full_screen_exclusive)

static VkResult xl_hook_tl_deviceHookTable_vkAcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) {
	auto __fn = tl_deviceHookTable.table->vkAcquireFullScreenExclusiveModeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkAcquireFullScreenExclusiveModeEXT) {
		__fn = tl_deviceHookTable.replace->vkAcquireFullScreenExclusiveModeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkAcquireFullScreenExclusiveModeEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchain);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkAcquireFullScreenExclusiveModeEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) {
	auto __fn = tl_deviceHookTable.table->vkReleaseFullScreenExclusiveModeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkReleaseFullScreenExclusiveModeEXT) {
		__fn = tl_deviceHookTable.replace->vkReleaseFullScreenExclusiveModeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkReleaseFullScreenExclusiveModeEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, swapchain);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkReleaseFullScreenExclusiveModeEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_full_screen_exclusive) */

#if (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1))

static VkResult xl_hook_tl_deviceHookTable_vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR* pModes) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceGroupSurfacePresentModes2EXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceGroupSurfacePresentModes2EXT) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceGroupSurfacePresentModes2EXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupSurfacePresentModes2EXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pSurfaceInfo, pModes);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceGroupSurfacePresentModes2EXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1)) */

#if defined(VK_KHR_buffer_device_address)

static VkDeviceAddress xl_hook_tl_deviceHookTable_vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferDeviceAddressKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferDeviceAddressKHR) {
		__fn = tl_deviceHookTable.replace->vkGetBufferDeviceAddressKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferDeviceAddressKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferDeviceAddressKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static uint64_t xl_hook_tl_deviceHookTable_vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferOpaqueCaptureAddressKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferOpaqueCaptureAddressKHR) {
		__fn = tl_deviceHookTable.replace->vkGetBufferOpaqueCaptureAddressKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferOpaqueCaptureAddressKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferOpaqueCaptureAddressKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static uint64_t xl_hook_tl_deviceHookTable_vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfoKHR* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceMemoryOpaqueCaptureAddressKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceMemoryOpaqueCaptureAddressKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceMemoryOpaqueCaptureAddressKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceMemoryOpaqueCaptureAddressKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceMemoryOpaqueCaptureAddressKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_buffer_device_address) */

#if defined(VK_EXT_line_rasterization)

static void xl_hook_tl_deviceHookTable_vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetLineStippleEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetLineStippleEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetLineStippleEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetLineStippleEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, lineStippleFactor, lineStipplePattern);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetLineStippleEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_line_rasterization) */

#if defined(VK_EXT_host_query_reset)

static void xl_hook_tl_deviceHookTable_vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	auto __fn = tl_deviceHookTable.table->vkResetQueryPoolEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkResetQueryPoolEXT) {
		__fn = tl_deviceHookTable.replace->vkResetQueryPoolEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkResetQueryPoolEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, queryPool, firstQuery, queryCount);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkResetQueryPoolEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_host_query_reset) */

#if defined(VK_EXT_extended_dynamic_state)

static void xl_hook_tl_deviceHookTable_vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCullModeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCullModeEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCullModeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCullModeEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, cullMode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCullModeEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetFrontFaceEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetFrontFaceEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetFrontFaceEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetFrontFaceEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, frontFace);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetFrontFaceEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetPrimitiveTopologyEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetPrimitiveTopologyEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetPrimitiveTopologyEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetPrimitiveTopologyEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, primitiveTopology);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetPrimitiveTopologyEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetViewportWithCountEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetViewportWithCountEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetViewportWithCountEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetViewportWithCountEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, viewportCount, pViewports);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetViewportWithCountEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetScissorWithCountEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetScissorWithCountEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetScissorWithCountEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetScissorWithCountEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, scissorCount, pScissors);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetScissorWithCountEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindVertexBuffers2EXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindVertexBuffers2EXT) {
		__fn = tl_deviceHookTable.replace->vkCmdBindVertexBuffers2EXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindVertexBuffers2EXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindVertexBuffers2EXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthTestEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthTestEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthTestEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthTestEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthTestEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthTestEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthWriteEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthWriteEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthWriteEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthWriteEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthWriteEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthWriteEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthCompareOpEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthCompareOpEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthCompareOpEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthCompareOpEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthCompareOp);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthCompareOpEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthBoundsTestEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthBoundsTestEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthBoundsTestEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBoundsTestEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthBoundsTestEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBoundsTestEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetStencilTestEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetStencilTestEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetStencilTestEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetStencilTestEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, stencilTestEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetStencilTestEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetStencilOpEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetStencilOpEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetStencilOpEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetStencilOpEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetStencilOpEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_extended_dynamic_state) */

#if defined(VK_KHR_deferred_host_operations)

static VkResult xl_hook_tl_deviceHookTable_vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation) {
	auto __fn = tl_deviceHookTable.table->vkCreateDeferredOperationKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateDeferredOperationKHR) {
		__fn = tl_deviceHookTable.replace->vkCreateDeferredOperationKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateDeferredOperationKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pAllocator, pDeferredOperation);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateDeferredOperationKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyDeferredOperationKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyDeferredOperationKHR) {
		__fn = tl_deviceHookTable.replace->vkDestroyDeferredOperationKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyDeferredOperationKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, operation, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyDeferredOperationKHR", (PFN_vkVoidFunction)__fn); }
}

static uint32_t xl_hook_tl_deviceHookTable_vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation) {
	auto __fn = tl_deviceHookTable.table->vkGetDeferredOperationMaxConcurrencyKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeferredOperationMaxConcurrencyKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeferredOperationMaxConcurrencyKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeferredOperationMaxConcurrencyKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, operation);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeferredOperationMaxConcurrencyKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation) {
	auto __fn = tl_deviceHookTable.table->vkGetDeferredOperationResultKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeferredOperationResultKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeferredOperationResultKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeferredOperationResultKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, operation);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeferredOperationResultKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation) {
	auto __fn = tl_deviceHookTable.table->vkDeferredOperationJoinKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDeferredOperationJoinKHR) {
		__fn = tl_deviceHookTable.replace->vkDeferredOperationJoinKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDeferredOperationJoinKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, operation);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDeferredOperationJoinKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_deferred_host_operations) */

#if defined(VK_KHR_pipeline_executable_properties)

static VkResult xl_hook_tl_deviceHookTable_vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR* pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetPipelineExecutablePropertiesKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPipelineExecutablePropertiesKHR) {
		__fn = tl_deviceHookTable.replace->vkGetPipelineExecutablePropertiesKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPipelineExecutablePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pPipelineInfo, pExecutableCount, pProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPipelineExecutablePropertiesKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics) {
	auto __fn = tl_deviceHookTable.table->vkGetPipelineExecutableStatisticsKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPipelineExecutableStatisticsKHR) {
		__fn = tl_deviceHookTable.replace->vkGetPipelineExecutableStatisticsKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPipelineExecutableStatisticsKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pExecutableInfo, pStatisticCount, pStatistics);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPipelineExecutableStatisticsKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations) {
	auto __fn = tl_deviceHookTable.table->vkGetPipelineExecutableInternalRepresentationsKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPipelineExecutableInternalRepresentationsKHR) {
		__fn = tl_deviceHookTable.replace->vkGetPipelineExecutableInternalRepresentationsKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPipelineExecutableInternalRepresentationsKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPipelineExecutableInternalRepresentationsKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_pipeline_executable_properties) */

#if defined(VK_EXT_host_image_copy)

static VkResult xl_hook_tl_deviceHookTable_vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCopyMemoryToImageEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCopyMemoryToImageEXT) {
		__fn = tl_deviceHookTable.replace->vkCopyMemoryToImageEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCopyMemoryToImageEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCopyMemoryToImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCopyMemoryToImageEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo) {
	auto __fn = tl_deviceHookTable.table->vkCopyImageToMemoryEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCopyImageToMemoryEXT) {
		__fn = tl_deviceHookTable.replace->vkCopyImageToMemoryEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCopyImageToMemoryEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCopyImageToMemoryInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCopyImageToMemoryEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCopyImageToImageEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCopyImageToImageEXT) {
		__fn = tl_deviceHookTable.replace->vkCopyImageToImageEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCopyImageToImageEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCopyImageToImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCopyImageToImageEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkTransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfoEXT* pTransitions) {
	auto __fn = tl_deviceHookTable.table->vkTransitionImageLayoutEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkTransitionImageLayoutEXT) {
		__fn = tl_deviceHookTable.replace->vkTransitionImageLayoutEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkTransitionImageLayoutEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, transitionCount, pTransitions);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkTransitionImageLayoutEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2EXT* pSubresource, VkSubresourceLayout2EXT* pLayout) {
	auto __fn = tl_deviceHookTable.table->vkGetImageSubresourceLayout2EXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageSubresourceLayout2EXT) {
		__fn = tl_deviceHookTable.replace->vkGetImageSubresourceLayout2EXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageSubresourceLayout2EXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, image, pSubresource, pLayout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageSubresourceLayout2EXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_host_image_copy) */

#if defined(VK_KHR_map_memory2)

static VkResult xl_hook_tl_deviceHookTable_vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR* pMemoryMapInfo, void** ppData) {
	auto __fn = tl_deviceHookTable.table->vkMapMemory2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkMapMemory2KHR) {
		__fn = tl_deviceHookTable.replace->vkMapMemory2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkMapMemory2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pMemoryMapInfo, ppData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkMapMemory2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo) {
	auto __fn = tl_deviceHookTable.table->vkUnmapMemory2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkUnmapMemory2KHR) {
		__fn = tl_deviceHookTable.replace->vkUnmapMemory2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkUnmapMemory2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pMemoryUnmapInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkUnmapMemory2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_map_memory2) */

#if defined(VK_EXT_swapchain_maintenance1)

static VkResult xl_hook_tl_deviceHookTable_vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo) {
	auto __fn = tl_deviceHookTable.table->vkReleaseSwapchainImagesEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkReleaseSwapchainImagesEXT) {
		__fn = tl_deviceHookTable.replace->vkReleaseSwapchainImagesEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkReleaseSwapchainImagesEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pReleaseInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkReleaseSwapchainImagesEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_swapchain_maintenance1) */

#if defined(VK_NV_device_generated_commands)

static void xl_hook_tl_deviceHookTable_vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetGeneratedCommandsMemoryRequirementsNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetGeneratedCommandsMemoryRequirementsNV) {
		__fn = tl_deviceHookTable.replace->vkGetGeneratedCommandsMemoryRequirementsNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetGeneratedCommandsMemoryRequirementsNV", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetGeneratedCommandsMemoryRequirementsNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdPreprocessGeneratedCommandsNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdPreprocessGeneratedCommandsNV) {
		__fn = tl_deviceHookTable.replace->vkCmdPreprocessGeneratedCommandsNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdPreprocessGeneratedCommandsNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pGeneratedCommandsInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdPreprocessGeneratedCommandsNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdExecuteGeneratedCommandsNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdExecuteGeneratedCommandsNV) {
		__fn = tl_deviceHookTable.replace->vkCmdExecuteGeneratedCommandsNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdExecuteGeneratedCommandsNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdExecuteGeneratedCommandsNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindPipelineShaderGroupNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindPipelineShaderGroupNV) {
		__fn = tl_deviceHookTable.replace->vkCmdBindPipelineShaderGroupNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindPipelineShaderGroupNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindPipelineShaderGroupNV", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout) {
	auto __fn = tl_deviceHookTable.table->vkCreateIndirectCommandsLayoutNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateIndirectCommandsLayoutNV) {
		__fn = tl_deviceHookTable.replace->vkCreateIndirectCommandsLayoutNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateIndirectCommandsLayoutNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateIndirectCommandsLayoutNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyIndirectCommandsLayoutNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyIndirectCommandsLayoutNV) {
		__fn = tl_deviceHookTable.replace->vkDestroyIndirectCommandsLayoutNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyIndirectCommandsLayoutNV", (PFN_vkVoidFunction)__fn); }
	__fn(device, indirectCommandsLayout, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyIndirectCommandsLayoutNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_device_generated_commands) */

#if defined(VK_EXT_depth_bias_control)

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT* pDepthBiasInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthBias2EXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthBias2EXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthBias2EXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBias2EXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pDepthBiasInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBias2EXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_depth_bias_control) */

#if defined(VK_EXT_private_data)

static VkResult xl_hook_tl_deviceHookTable_vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlotEXT* pPrivateDataSlot) {
	auto __fn = tl_deviceHookTable.table->vkCreatePrivateDataSlotEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreatePrivateDataSlotEXT) {
		__fn = tl_deviceHookTable.replace->vkCreatePrivateDataSlotEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreatePrivateDataSlotEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pPrivateDataSlot);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreatePrivateDataSlotEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotEXT privateDataSlot, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyPrivateDataSlotEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyPrivateDataSlotEXT) {
		__fn = tl_deviceHookTable.replace->vkDestroyPrivateDataSlotEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyPrivateDataSlotEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, privateDataSlot, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyPrivateDataSlotEXT", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t data) {
	auto __fn = tl_deviceHookTable.table->vkSetPrivateDataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSetPrivateDataEXT) {
		__fn = tl_deviceHookTable.replace->vkSetPrivateDataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSetPrivateDataEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, objectType, objectHandle, privateDataSlot, data);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSetPrivateDataEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetPrivateDataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPrivateDataEXT) {
		__fn = tl_deviceHookTable.replace->vkGetPrivateDataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPrivateDataEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, objectType, objectHandle, privateDataSlot, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPrivateDataEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_private_data) */

#if defined(VK_KHR_video_encode_queue)

static VkResult xl_hook_tl_deviceHookTable_vkGetEncodedVideoSessionParametersKHR(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo, size_t* pDataSize, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetEncodedVideoSessionParametersKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetEncodedVideoSessionParametersKHR) {
		__fn = tl_deviceHookTable.replace->vkGetEncodedVideoSessionParametersKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetEncodedVideoSessionParametersKHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetEncodedVideoSessionParametersKHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR* pEncodeInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdEncodeVideoKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdEncodeVideoKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdEncodeVideoKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdEncodeVideoKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pEncodeInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdEncodeVideoKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_video_encode_queue) */

#if defined(VK_KHR_object_refresh)

static void xl_hook_tl_deviceHookTable_vkCmdRefreshObjectsKHR(VkCommandBuffer commandBuffer, const VkRefreshObjectListKHR* pRefreshObjects) {
	auto __fn = tl_deviceHookTable.table->vkCmdRefreshObjectsKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdRefreshObjectsKHR) {
		__fn = tl_deviceHookTable.replace->vkCmdRefreshObjectsKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdRefreshObjectsKHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pRefreshObjects);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdRefreshObjectsKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_object_refresh) */

#if defined(VK_EXT_metal_objects)

static void xl_hook_tl_deviceHookTable_vkExportMetalObjectsEXT(VkDevice device, VkExportMetalObjectsInfoEXT* pMetalObjectsInfo) {
	auto __fn = tl_deviceHookTable.table->vkExportMetalObjectsEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkExportMetalObjectsEXT) {
		__fn = tl_deviceHookTable.replace->vkExportMetalObjectsEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkExportMetalObjectsEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, pMetalObjectsInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkExportMetalObjectsEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_metal_objects) */

#if defined(VK_KHR_synchronization2)

static void xl_hook_tl_deviceHookTable_vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfoKHR* pDependencyInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetEvent2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetEvent2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdSetEvent2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetEvent2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, event, pDependencyInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetEvent2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2KHR stageMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdResetEvent2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdResetEvent2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdResetEvent2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdResetEvent2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, event, stageMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdResetEvent2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfoKHR* pDependencyInfos) {
	auto __fn = tl_deviceHookTable.table->vkCmdWaitEvents2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWaitEvents2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdWaitEvents2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWaitEvents2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, eventCount, pEvents, pDependencyInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWaitEvents2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfoKHR* pDependencyInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdPipelineBarrier2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdPipelineBarrier2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdPipelineBarrier2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdPipelineBarrier2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pDependencyInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdPipelineBarrier2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkQueryPool queryPool, uint32_t query) {
	auto __fn = tl_deviceHookTable.table->vkCmdWriteTimestamp2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWriteTimestamp2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdWriteTimestamp2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWriteTimestamp2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, stage, queryPool, query);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWriteTimestamp2KHR", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2KHR* pSubmits, VkFence fence) {
	auto __fn = tl_deviceHookTable.table->vkQueueSubmit2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkQueueSubmit2KHR) {
		__fn = tl_deviceHookTable.replace->vkQueueSubmit2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkQueueSubmit2KHR", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(queue, submitCount, pSubmits, fence);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkQueueSubmit2KHR", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_KHR_synchronization2) */

#if defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker)

static void xl_hook_tl_deviceHookTable_vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) {
	auto __fn = tl_deviceHookTable.table->vkCmdWriteBufferMarker2AMD;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWriteBufferMarker2AMD) {
		__fn = tl_deviceHookTable.replace->vkCmdWriteBufferMarker2AMD;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWriteBufferMarker2AMD", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, stage, dstBuffer, dstOffset, marker);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWriteBufferMarker2AMD", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker) */

#if defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints)

static void xl_hook_tl_deviceHookTable_vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData) {
	auto __fn = tl_deviceHookTable.table->vkGetQueueCheckpointData2NV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetQueueCheckpointData2NV) {
		__fn = tl_deviceHookTable.replace->vkGetQueueCheckpointData2NV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetQueueCheckpointData2NV", (PFN_vkVoidFunction)__fn); }
	__fn(queue, pCheckpointDataCount, pCheckpointData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetQueueCheckpointData2NV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints) */

#if defined(VK_EXT_descriptor_buffer)

static void xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize* pLayoutSizeInBytes) {
	auto __fn = tl_deviceHookTable.table->vkGetDescriptorSetLayoutSizeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDescriptorSetLayoutSizeEXT) {
		__fn = tl_deviceHookTable.replace->vkGetDescriptorSetLayoutSizeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutSizeEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, layout, pLayoutSizeInBytes);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutSizeEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize* pOffset) {
	auto __fn = tl_deviceHookTable.table->vkGetDescriptorSetLayoutBindingOffsetEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDescriptorSetLayoutBindingOffsetEXT) {
		__fn = tl_deviceHookTable.replace->vkGetDescriptorSetLayoutBindingOffsetEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutBindingOffsetEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, layout, binding, pOffset);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutBindingOffsetEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT* pDescriptorInfo, size_t dataSize, void* pDescriptor) {
	auto __fn = tl_deviceHookTable.table->vkGetDescriptorEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDescriptorEXT) {
		__fn = tl_deviceHookTable.replace->vkGetDescriptorEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDescriptorEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, pDescriptorInfo, dataSize, pDescriptor);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDescriptorEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT* pBindingInfos) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindDescriptorBuffersEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindDescriptorBuffersEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdBindDescriptorBuffersEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindDescriptorBuffersEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, bufferCount, pBindingInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindDescriptorBuffersEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t* pBufferIndices, const VkDeviceSize* pOffsets) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDescriptorBufferOffsetsEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDescriptorBufferOffsetsEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDescriptorBufferOffsetsEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDescriptorBufferOffsetsEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDescriptorBufferOffsetsEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindDescriptorBufferEmbeddedSamplersEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineBindPoint, layout, set);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferOpaqueCaptureDescriptorDataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferOpaqueCaptureDescriptorDataEXT) {
		__fn = tl_deviceHookTable.replace->vkGetBufferOpaqueCaptureDescriptorDataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetImageOpaqueCaptureDescriptorDataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageOpaqueCaptureDescriptorDataEXT) {
		__fn = tl_deviceHookTable.replace->vkGetImageOpaqueCaptureDescriptorDataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetImageViewOpaqueCaptureDescriptorDataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageViewOpaqueCaptureDescriptorDataEXT) {
		__fn = tl_deviceHookTable.replace->vkGetImageViewOpaqueCaptureDescriptorDataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageViewOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageViewOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetSamplerOpaqueCaptureDescriptorDataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSamplerOpaqueCaptureDescriptorDataEXT) {
		__fn = tl_deviceHookTable.replace->vkGetSamplerOpaqueCaptureDescriptorDataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSamplerOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSamplerOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_descriptor_buffer) */

#if (defined(VK_EXT_descriptor_buffer) && defined(VK_KHR_acceleration_structure)) || (defined(VK_EXT_descriptor_buffer) && defined(VK_NV_ray_tracing))

static VkResult xl_hook_tl_deviceHookTable_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT) {
		__fn = tl_deviceHookTable.replace->vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* (defined(VK_EXT_descriptor_buffer) && defined(VK_KHR_acceleration_structure)) || (defined(VK_EXT_descriptor_buffer) && defined(VK_NV_ray_tracing)) */

#if defined(VK_NV_fragment_shading_rate_enums)

static void xl_hook_tl_deviceHookTable_vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetFragmentShadingRateEnumNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetFragmentShadingRateEnumNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetFragmentShadingRateEnumNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetFragmentShadingRateEnumNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, shadingRate, combinerOps);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetFragmentShadingRateEnumNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_fragment_shading_rate_enums) */

#if defined(VK_EXT_mesh_shader)

static void xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawMeshTasksEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawMeshTasksEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawMeshTasksEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, groupCountX, groupCountY, groupCountZ);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawMeshTasksIndirectEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawMeshTasksIndirectEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawMeshTasksIndirectEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksIndirectEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, drawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksIndirectEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawMeshTasksIndirectCountEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawMeshTasksIndirectCountEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawMeshTasksIndirectCountEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksIndirectCountEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawMeshTasksIndirectCountEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_mesh_shader) */

#if defined(VK_KHR_copy_commands2)

static void xl_hook_tl_deviceHookTable_vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR* pCopyBufferInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyBuffer2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyBuffer2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyBuffer2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyBuffer2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCopyBufferInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyBuffer2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR* pCopyImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyImage2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyImage2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyImage2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyImage2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCopyImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyImage2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyBufferToImage2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyBufferToImage2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyBufferToImage2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyBufferToImage2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCopyBufferToImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyBufferToImage2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyImageToBuffer2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyImageToBuffer2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyImageToBuffer2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyImageToBuffer2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pCopyImageToBufferInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyImageToBuffer2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR* pBlitImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdBlitImage2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBlitImage2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdBlitImage2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBlitImage2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pBlitImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBlitImage2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2KHR* pResolveImageInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdResolveImage2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdResolveImage2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdResolveImage2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdResolveImage2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pResolveImageInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdResolveImage2KHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_copy_commands2) */

#if defined(VK_EXT_device_fault)

static VkResult xl_hook_tl_deviceHookTable_vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT* pFaultCounts, VkDeviceFaultInfoEXT* pFaultInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceFaultInfoEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceFaultInfoEXT) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceFaultInfoEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceFaultInfoEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pFaultCounts, pFaultInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceFaultInfoEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_device_fault) */

#if defined(VK_EXT_vertex_input_dynamic_state)

static void xl_hook_tl_deviceHookTable_vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetVertexInputEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetVertexInputEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetVertexInputEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetVertexInputEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetVertexInputEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_vertex_input_dynamic_state) */

#if defined(VK_FUCHSIA_external_memory)

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryZirconHandleFUCHSIA(VkDevice device, const VkMemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryZirconHandleFUCHSIA;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryZirconHandleFUCHSIA) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryZirconHandleFUCHSIA;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryZirconHandleFUCHSIA", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetZirconHandleInfo, pZirconHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryZirconHandleFUCHSIA", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryZirconHandlePropertiesFUCHSIA(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, zx_handle_t zirconHandle, VkMemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryZirconHandlePropertiesFUCHSIA;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryZirconHandlePropertiesFUCHSIA) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryZirconHandlePropertiesFUCHSIA;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryZirconHandlePropertiesFUCHSIA", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, handleType, zirconHandle, pMemoryZirconHandleProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryZirconHandlePropertiesFUCHSIA", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_FUCHSIA_external_memory) */

#if defined(VK_FUCHSIA_external_semaphore)

static VkResult xl_hook_tl_deviceHookTable_vkImportSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo) {
	auto __fn = tl_deviceHookTable.table->vkImportSemaphoreZirconHandleFUCHSIA;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkImportSemaphoreZirconHandleFUCHSIA) {
		__fn = tl_deviceHookTable.replace->vkImportSemaphoreZirconHandleFUCHSIA;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkImportSemaphoreZirconHandleFUCHSIA", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pImportSemaphoreZirconHandleInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkImportSemaphoreZirconHandleFUCHSIA", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkSemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetSemaphoreZirconHandleFUCHSIA;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSemaphoreZirconHandleFUCHSIA) {
		__fn = tl_deviceHookTable.replace->vkGetSemaphoreZirconHandleFUCHSIA;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSemaphoreZirconHandleFUCHSIA", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetZirconHandleInfo, pZirconHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSemaphoreZirconHandleFUCHSIA", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_FUCHSIA_external_semaphore) */

#if defined(VK_FUCHSIA_buffer_collection)

static VkResult xl_hook_tl_deviceHookTable_vkCreateBufferCollectionFUCHSIA(VkDevice device, const VkBufferCollectionCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferCollectionFUCHSIA* pCollection) {
	auto __fn = tl_deviceHookTable.table->vkCreateBufferCollectionFUCHSIA;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateBufferCollectionFUCHSIA) {
		__fn = tl_deviceHookTable.replace->vkCreateBufferCollectionFUCHSIA;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateBufferCollectionFUCHSIA", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pCollection);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateBufferCollectionFUCHSIA", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkSetBufferCollectionImageConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkImageConstraintsInfoFUCHSIA* pImageConstraintsInfo) {
	auto __fn = tl_deviceHookTable.table->vkSetBufferCollectionImageConstraintsFUCHSIA;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSetBufferCollectionImageConstraintsFUCHSIA) {
		__fn = tl_deviceHookTable.replace->vkSetBufferCollectionImageConstraintsFUCHSIA;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSetBufferCollectionImageConstraintsFUCHSIA", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, collection, pImageConstraintsInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSetBufferCollectionImageConstraintsFUCHSIA", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkSetBufferCollectionBufferConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkBufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo) {
	auto __fn = tl_deviceHookTable.table->vkSetBufferCollectionBufferConstraintsFUCHSIA;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSetBufferCollectionBufferConstraintsFUCHSIA) {
		__fn = tl_deviceHookTable.replace->vkSetBufferCollectionBufferConstraintsFUCHSIA;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSetBufferCollectionBufferConstraintsFUCHSIA", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, collection, pBufferConstraintsInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSetBufferCollectionBufferConstraintsFUCHSIA", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyBufferCollectionFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyBufferCollectionFUCHSIA;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyBufferCollectionFUCHSIA) {
		__fn = tl_deviceHookTable.replace->vkDestroyBufferCollectionFUCHSIA;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyBufferCollectionFUCHSIA", (PFN_vkVoidFunction)__fn); }
	__fn(device, collection, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyBufferCollectionFUCHSIA", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetBufferCollectionPropertiesFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, VkBufferCollectionPropertiesFUCHSIA* pProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetBufferCollectionPropertiesFUCHSIA;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetBufferCollectionPropertiesFUCHSIA) {
		__fn = tl_deviceHookTable.replace->vkGetBufferCollectionPropertiesFUCHSIA;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetBufferCollectionPropertiesFUCHSIA", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, collection, pProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetBufferCollectionPropertiesFUCHSIA", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_FUCHSIA_buffer_collection) */

#if defined(VK_HUAWEI_subpass_shading)

static VkResult xl_hook_tl_deviceHookTable_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, renderpass, pMaxWorkgroupSize);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer) {
	auto __fn = tl_deviceHookTable.table->vkCmdSubpassShadingHUAWEI;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSubpassShadingHUAWEI) {
		__fn = tl_deviceHookTable.replace->vkCmdSubpassShadingHUAWEI;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSubpassShadingHUAWEI", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSubpassShadingHUAWEI", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_HUAWEI_subpass_shading) */

#if defined(VK_HUAWEI_invocation_mask)

static void xl_hook_tl_deviceHookTable_vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindInvocationMaskHUAWEI;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindInvocationMaskHUAWEI) {
		__fn = tl_deviceHookTable.replace->vkCmdBindInvocationMaskHUAWEI;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindInvocationMaskHUAWEI", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, imageView, imageLayout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindInvocationMaskHUAWEI", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_HUAWEI_invocation_mask) */

#if defined(VK_NV_external_memory_rdma)

static VkResult xl_hook_tl_deviceHookTable_vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress) {
	auto __fn = tl_deviceHookTable.table->vkGetMemoryRemoteAddressNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemoryRemoteAddressNV) {
		__fn = tl_deviceHookTable.replace->vkGetMemoryRemoteAddressNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemoryRemoteAddressNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pMemoryGetRemoteAddressInfo, pAddress);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemoryRemoteAddressNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_external_memory_rdma) */

#if defined(VK_EXT_pipeline_properties)

static VkResult xl_hook_tl_deviceHookTable_vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT* pPipelineInfo, VkBaseOutStructure* pPipelineProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetPipelinePropertiesEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPipelinePropertiesEXT) {
		__fn = tl_deviceHookTable.replace->vkGetPipelinePropertiesEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPipelinePropertiesEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pPipelineInfo, pPipelineProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPipelinePropertiesEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_EXT_pipeline_properties) */

#if defined(VK_NV_external_sci_sync)

static VkResult xl_hook_tl_deviceHookTable_vkGetFenceSciSyncFenceNV(VkDevice device, const VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo, void* pHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetFenceSciSyncFenceNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetFenceSciSyncFenceNV) {
		__fn = tl_deviceHookTable.replace->vkGetFenceSciSyncFenceNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetFenceSciSyncFenceNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetSciSyncHandleInfo, pHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetFenceSciSyncFenceNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetFenceSciSyncObjNV(VkDevice device, const VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo, void* pHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetFenceSciSyncObjNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetFenceSciSyncObjNV) {
		__fn = tl_deviceHookTable.replace->vkGetFenceSciSyncObjNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetFenceSciSyncObjNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetSciSyncHandleInfo, pHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetFenceSciSyncObjNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkImportFenceSciSyncFenceNV(VkDevice device, const VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo) {
	auto __fn = tl_deviceHookTable.table->vkImportFenceSciSyncFenceNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkImportFenceSciSyncFenceNV) {
		__fn = tl_deviceHookTable.replace->vkImportFenceSciSyncFenceNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkImportFenceSciSyncFenceNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pImportFenceSciSyncInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkImportFenceSciSyncFenceNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkImportFenceSciSyncObjNV(VkDevice device, const VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo) {
	auto __fn = tl_deviceHookTable.table->vkImportFenceSciSyncObjNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkImportFenceSciSyncObjNV) {
		__fn = tl_deviceHookTable.replace->vkImportFenceSciSyncObjNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkImportFenceSciSyncObjNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pImportFenceSciSyncInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkImportFenceSciSyncObjNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetSemaphoreSciSyncObjNV(VkDevice device, const VkSemaphoreGetSciSyncInfoNV* pGetSciSyncInfo, void* pHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetSemaphoreSciSyncObjNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetSemaphoreSciSyncObjNV) {
		__fn = tl_deviceHookTable.replace->vkGetSemaphoreSciSyncObjNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetSemaphoreSciSyncObjNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetSciSyncInfo, pHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetSemaphoreSciSyncObjNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkImportSemaphoreSciSyncObjNV(VkDevice device, const VkImportSemaphoreSciSyncInfoNV* pImportSemaphoreSciSyncInfo) {
	auto __fn = tl_deviceHookTable.table->vkImportSemaphoreSciSyncObjNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkImportSemaphoreSciSyncObjNV) {
		__fn = tl_deviceHookTable.replace->vkImportSemaphoreSciSyncObjNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkImportSemaphoreSciSyncObjNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pImportSemaphoreSciSyncInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkImportSemaphoreSciSyncObjNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_external_sci_sync) */

#if defined(VK_NV_external_memory_sci_buf)

static VkResult xl_hook_tl_deviceHookTable_vkGetMemorySciBufNV(VkDevice device, const VkMemoryGetSciBufInfoNV* pGetSciBufInfo, NvSciBufObj* pHandle) {
	auto __fn = tl_deviceHookTable.table->vkGetMemorySciBufNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMemorySciBufNV) {
		__fn = tl_deviceHookTable.replace->vkGetMemorySciBufNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMemorySciBufNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pGetSciBufInfo, pHandle);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMemorySciBufNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_external_memory_sci_buf) */

#if defined(VK_EXT_extended_dynamic_state2)

static void xl_hook_tl_deviceHookTable_vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetPatchControlPointsEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetPatchControlPointsEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetPatchControlPointsEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetPatchControlPointsEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, patchControlPoints);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetPatchControlPointsEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetRasterizerDiscardEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetRasterizerDiscardEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetRasterizerDiscardEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetRasterizerDiscardEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, rasterizerDiscardEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetRasterizerDiscardEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthBiasEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthBiasEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthBiasEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBiasEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthBiasEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthBiasEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetLogicOpEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetLogicOpEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetLogicOpEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetLogicOpEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, logicOp);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetLogicOpEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetPrimitiveRestartEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetPrimitiveRestartEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetPrimitiveRestartEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetPrimitiveRestartEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, primitiveRestartEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetPrimitiveRestartEnableEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_extended_dynamic_state2) */

#if defined(VK_EXT_color_write_enable)

static void xl_hook_tl_deviceHookTable_vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetColorWriteEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetColorWriteEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetColorWriteEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetColorWriteEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, attachmentCount, pColorWriteEnables);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetColorWriteEnableEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_color_write_enable) */

#if defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline)

static void xl_hook_tl_deviceHookTable_vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress) {
	auto __fn = tl_deviceHookTable.table->vkCmdTraceRaysIndirect2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdTraceRaysIndirect2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdTraceRaysIndirect2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdTraceRaysIndirect2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, indirectDeviceAddress);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdTraceRaysIndirect2KHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline) */

#if defined(VK_EXT_multi_draw)

static void xl_hook_tl_deviceHookTable_vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawMultiEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawMultiEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawMultiEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawMultiEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawMultiEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawMultiIndexedEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawMultiIndexedEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawMultiIndexedEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawMultiIndexedEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawMultiIndexedEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_multi_draw) */

#if defined(VK_EXT_opacity_micromap)

static VkResult xl_hook_tl_deviceHookTable_vkCreateMicromapEXT(VkDevice device, const VkMicromapCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkMicromapEXT* pMicromap) {
	auto __fn = tl_deviceHookTable.table->vkCreateMicromapEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateMicromapEXT) {
		__fn = tl_deviceHookTable.replace->vkCreateMicromapEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateMicromapEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pMicromap);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateMicromapEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyMicromapEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyMicromapEXT) {
		__fn = tl_deviceHookTable.replace->vkDestroyMicromapEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyMicromapEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, micromap, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyMicromapEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos) {
	auto __fn = tl_deviceHookTable.table->vkCmdBuildMicromapsEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBuildMicromapsEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdBuildMicromapsEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBuildMicromapsEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, infoCount, pInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBuildMicromapsEXT", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos) {
	auto __fn = tl_deviceHookTable.table->vkBuildMicromapsEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBuildMicromapsEXT) {
		__fn = tl_deviceHookTable.replace->vkBuildMicromapsEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBuildMicromapsEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, deferredOperation, infoCount, pInfos);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBuildMicromapsEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCopyMicromapEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCopyMicromapEXT) {
		__fn = tl_deviceHookTable.replace->vkCopyMicromapEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCopyMicromapEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, deferredOperation, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCopyMicromapEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapToMemoryInfoEXT* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCopyMicromapToMemoryEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCopyMicromapToMemoryEXT) {
		__fn = tl_deviceHookTable.replace->vkCopyMicromapToMemoryEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCopyMicromapToMemoryEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, deferredOperation, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCopyMicromapToMemoryEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkCopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToMicromapInfoEXT* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCopyMemoryToMicromapEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCopyMemoryToMicromapEXT) {
		__fn = tl_deviceHookTable.replace->vkCopyMemoryToMicromapEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCopyMemoryToMicromapEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, deferredOperation, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCopyMemoryToMicromapEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkWriteMicromapsPropertiesEXT(VkDevice device, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) {
	auto __fn = tl_deviceHookTable.table->vkWriteMicromapsPropertiesEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkWriteMicromapsPropertiesEXT) {
		__fn = tl_deviceHookTable.replace->vkWriteMicromapsPropertiesEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkWriteMicromapsPropertiesEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkWriteMicromapsPropertiesEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyMicromapEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyMicromapEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyMicromapEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyMicromapEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyMicromapEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyMicromapToMemoryEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyMicromapToMemoryEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyMicromapToMemoryEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyMicromapToMemoryEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyMicromapToMemoryEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyMemoryToMicromapEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyMemoryToMicromapEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyMemoryToMicromapEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyMemoryToMicromapEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyMemoryToMicromapEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) {
	auto __fn = tl_deviceHookTable.table->vkCmdWriteMicromapsPropertiesEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdWriteMicromapsPropertiesEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdWriteMicromapsPropertiesEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdWriteMicromapsPropertiesEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdWriteMicromapsPropertiesEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceMicromapCompatibilityEXT(VkDevice device, const VkMicromapVersionInfoEXT* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceMicromapCompatibilityEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceMicromapCompatibilityEXT) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceMicromapCompatibilityEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceMicromapCompatibilityEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, pVersionInfo, pCompatibility);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceMicromapCompatibilityEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkMicromapBuildInfoEXT* pBuildInfo, VkMicromapBuildSizesInfoEXT* pSizeInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetMicromapBuildSizesEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetMicromapBuildSizesEXT) {
		__fn = tl_deviceHookTable.replace->vkGetMicromapBuildSizesEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetMicromapBuildSizesEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, buildType, pBuildInfo, pSizeInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetMicromapBuildSizesEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_opacity_micromap) */

#if defined(VK_HUAWEI_cluster_culling_shader)

static void xl_hook_tl_deviceHookTable_vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawClusterHUAWEI;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawClusterHUAWEI) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawClusterHUAWEI;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawClusterHUAWEI", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, groupCountX, groupCountY, groupCountZ);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawClusterHUAWEI", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) {
	auto __fn = tl_deviceHookTable.table->vkCmdDrawClusterIndirectHUAWEI;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDrawClusterIndirectHUAWEI) {
		__fn = tl_deviceHookTable.replace->vkCmdDrawClusterIndirectHUAWEI;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDrawClusterIndirectHUAWEI", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDrawClusterIndirectHUAWEI", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_HUAWEI_cluster_culling_shader) */

#if defined(VK_EXT_pageable_device_local_memory)

static void xl_hook_tl_deviceHookTable_vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority) {
	auto __fn = tl_deviceHookTable.table->vkSetDeviceMemoryPriorityEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkSetDeviceMemoryPriorityEXT) {
		__fn = tl_deviceHookTable.replace->vkSetDeviceMemoryPriorityEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkSetDeviceMemoryPriorityEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, memory, priority);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkSetDeviceMemoryPriorityEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_pageable_device_local_memory) */

#if defined(VK_KHR_maintenance4)

static void xl_hook_tl_deviceHookTable_vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceBufferMemoryRequirementsKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceBufferMemoryRequirementsKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceBufferMemoryRequirementsKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceBufferMemoryRequirementsKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceBufferMemoryRequirementsKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceImageMemoryRequirementsKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceImageMemoryRequirementsKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceImageMemoryRequirementsKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceImageMemoryRequirementsKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceImageMemoryRequirementsKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceImageSparseMemoryRequirementsKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceImageSparseMemoryRequirementsKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceImageSparseMemoryRequirementsKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceImageSparseMemoryRequirementsKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceImageSparseMemoryRequirementsKHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_maintenance4) */

#if defined(VK_VALVE_descriptor_set_host_mapping)

static void xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, const VkDescriptorSetBindingReferenceVALVE* pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping) {
	auto __fn = tl_deviceHookTable.table->vkGetDescriptorSetLayoutHostMappingInfoVALVE;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDescriptorSetLayoutHostMappingInfoVALVE) {
		__fn = tl_deviceHookTable.replace->vkGetDescriptorSetLayoutHostMappingInfoVALVE;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutHostMappingInfoVALVE", (PFN_vkVoidFunction)__fn); }
	__fn(device, pBindingReference, pHostMapping);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetLayoutHostMappingInfoVALVE", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void** ppData) {
	auto __fn = tl_deviceHookTable.table->vkGetDescriptorSetHostMappingVALVE;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDescriptorSetHostMappingVALVE) {
		__fn = tl_deviceHookTable.replace->vkGetDescriptorSetHostMappingVALVE;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetHostMappingVALVE", (PFN_vkVoidFunction)__fn); }
	__fn(device, descriptorSet, ppData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDescriptorSetHostMappingVALVE", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */

#if defined(VK_NV_copy_memory_indirect)

static void xl_hook_tl_deviceHookTable_vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyMemoryIndirectNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyMemoryIndirectNV) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyMemoryIndirectNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyMemoryIndirectNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, copyBufferAddress, copyCount, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyMemoryIndirectNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers* pImageSubresources) {
	auto __fn = tl_deviceHookTable.table->vkCmdCopyMemoryToImageIndirectNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdCopyMemoryToImageIndirectNV) {
		__fn = tl_deviceHookTable.replace->vkCmdCopyMemoryToImageIndirectNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdCopyMemoryToImageIndirectNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdCopyMemoryToImageIndirectNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_copy_memory_indirect) */

#if defined(VK_NV_memory_decompression)

static void xl_hook_tl_deviceHookTable_vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV* pDecompressMemoryRegions) {
	auto __fn = tl_deviceHookTable.table->vkCmdDecompressMemoryNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDecompressMemoryNV) {
		__fn = tl_deviceHookTable.replace->vkCmdDecompressMemoryNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDecompressMemoryNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDecompressMemoryNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride) {
	auto __fn = tl_deviceHookTable.table->vkCmdDecompressMemoryIndirectCountNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdDecompressMemoryIndirectCountNV) {
		__fn = tl_deviceHookTable.replace->vkCmdDecompressMemoryIndirectCountNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdDecompressMemoryIndirectCountNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdDecompressMemoryIndirectCountNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_memory_decompression) */

#if defined(VK_NV_device_generated_commands_compute)

static void xl_hook_tl_deviceHookTable_vkGetPipelineIndirectMemoryRequirementsNV(VkDevice device, const VkComputePipelineCreateInfo* pCreateInfo, VkMemoryRequirements2* pMemoryRequirements) {
	auto __fn = tl_deviceHookTable.table->vkGetPipelineIndirectMemoryRequirementsNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPipelineIndirectMemoryRequirementsNV) {
		__fn = tl_deviceHookTable.replace->vkGetPipelineIndirectMemoryRequirementsNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPipelineIndirectMemoryRequirementsNV", (PFN_vkVoidFunction)__fn); }
	__fn(device, pCreateInfo, pMemoryRequirements);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPipelineIndirectMemoryRequirementsNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) {
	auto __fn = tl_deviceHookTable.table->vkCmdUpdatePipelineIndirectBufferNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdUpdatePipelineIndirectBufferNV) {
		__fn = tl_deviceHookTable.replace->vkCmdUpdatePipelineIndirectBufferNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdUpdatePipelineIndirectBufferNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, pipelineBindPoint, pipeline);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdUpdatePipelineIndirectBufferNV", (PFN_vkVoidFunction)__fn); }
}

static VkDeviceAddress xl_hook_tl_deviceHookTable_vkGetPipelineIndirectDeviceAddressNV(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV* pInfo) {
	auto __fn = tl_deviceHookTable.table->vkGetPipelineIndirectDeviceAddressNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetPipelineIndirectDeviceAddressNV) {
		__fn = tl_deviceHookTable.replace->vkGetPipelineIndirectDeviceAddressNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetPipelineIndirectDeviceAddressNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetPipelineIndirectDeviceAddressNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_NV_device_generated_commands_compute) */

#if defined(VK_EXT_extended_dynamic_state3)

static void xl_hook_tl_deviceHookTable_vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetTessellationDomainOriginEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetTessellationDomainOriginEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetTessellationDomainOriginEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetTessellationDomainOriginEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, domainOrigin);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetTessellationDomainOriginEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthClampEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthClampEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthClampEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthClampEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthClampEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthClampEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetPolygonModeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetPolygonModeEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetPolygonModeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetPolygonModeEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, polygonMode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetPolygonModeEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetRasterizationSamplesEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetRasterizationSamplesEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetRasterizationSamplesEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetRasterizationSamplesEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, rasterizationSamples);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetRasterizationSamplesEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask* pSampleMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetSampleMaskEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetSampleMaskEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetSampleMaskEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetSampleMaskEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, samples, pSampleMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetSampleMaskEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetAlphaToCoverageEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetAlphaToCoverageEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetAlphaToCoverageEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetAlphaToCoverageEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, alphaToCoverageEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetAlphaToCoverageEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetAlphaToOneEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetAlphaToOneEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetAlphaToOneEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetAlphaToOneEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, alphaToOneEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetAlphaToOneEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetLogicOpEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetLogicOpEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetLogicOpEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetLogicOpEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, logicOpEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetLogicOpEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32* pColorBlendEnables) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetColorBlendEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetColorBlendEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetColorBlendEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetColorBlendEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetColorBlendEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT* pColorBlendEquations) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetColorBlendEquationEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetColorBlendEquationEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetColorBlendEquationEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetColorBlendEquationEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetColorBlendEquationEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags* pColorWriteMasks) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetColorWriteMaskEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetColorWriteMaskEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetColorWriteMaskEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetColorWriteMaskEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetColorWriteMaskEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetRasterizationStreamEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetRasterizationStreamEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetRasterizationStreamEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetRasterizationStreamEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, rasterizationStream);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetRasterizationStreamEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetConservativeRasterizationModeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetConservativeRasterizationModeEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetConservativeRasterizationModeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetConservativeRasterizationModeEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, conservativeRasterizationMode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetConservativeRasterizationModeEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetExtraPrimitiveOverestimationSizeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetExtraPrimitiveOverestimationSizeEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetExtraPrimitiveOverestimationSizeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetExtraPrimitiveOverestimationSizeEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, extraPrimitiveOverestimationSize);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetExtraPrimitiveOverestimationSizeEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthClipEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthClipEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthClipEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthClipEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, depthClipEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthClipEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetSampleLocationsEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetSampleLocationsEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetSampleLocationsEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetSampleLocationsEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, sampleLocationsEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetSampleLocationsEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT* pColorBlendAdvanced) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetColorBlendAdvancedEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetColorBlendAdvancedEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetColorBlendAdvancedEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetColorBlendAdvancedEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetColorBlendAdvancedEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetProvokingVertexModeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetProvokingVertexModeEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetProvokingVertexModeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetProvokingVertexModeEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, provokingVertexMode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetProvokingVertexModeEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetLineRasterizationModeEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetLineRasterizationModeEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetLineRasterizationModeEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetLineRasterizationModeEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, lineRasterizationMode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetLineRasterizationModeEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetLineStippleEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetLineStippleEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetLineStippleEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetLineStippleEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, stippledLineEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetLineStippleEnableEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetDepthClipNegativeOneToOneEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetDepthClipNegativeOneToOneEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetDepthClipNegativeOneToOneEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetDepthClipNegativeOneToOneEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, negativeOneToOne);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetDepthClipNegativeOneToOneEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_extended_dynamic_state3) */

#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling))

static void xl_hook_tl_deviceHookTable_vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetViewportWScalingEnableNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetViewportWScalingEnableNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetViewportWScalingEnableNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetViewportWScalingEnableNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, viewportWScalingEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetViewportWScalingEnableNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling)) */

#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode))

static void xl_hook_tl_deviceHookTable_vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCoverageReductionModeNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCoverageReductionModeNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCoverageReductionModeNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageReductionModeNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, coverageReductionMode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageReductionModeNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode)) */

#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))

static void xl_hook_tl_deviceHookTable_vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCoverageToColorEnableNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCoverageToColorEnableNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCoverageToColorEnableNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageToColorEnableNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, coverageToColorEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageToColorEnableNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCoverageToColorLocationNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCoverageToColorLocationNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCoverageToColorLocationNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageToColorLocationNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, coverageToColorLocation);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageToColorLocationNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color)) */

#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))

static void xl_hook_tl_deviceHookTable_vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCoverageModulationModeNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCoverageModulationModeNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCoverageModulationModeNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageModulationModeNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, coverageModulationMode);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageModulationModeNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCoverageModulationTableEnableNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCoverageModulationTableEnableNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCoverageModulationTableEnableNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageModulationTableEnableNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, coverageModulationTableEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageModulationTableEnableNV", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, const float* pCoverageModulationTable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetCoverageModulationTableNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetCoverageModulationTableNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetCoverageModulationTableNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageModulationTableNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetCoverageModulationTableNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples)) */

#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test))

static void xl_hook_tl_deviceHookTable_vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetRepresentativeFragmentTestEnableNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetRepresentativeFragmentTestEnableNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetRepresentativeFragmentTestEnableNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetRepresentativeFragmentTestEnableNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, representativeFragmentTestEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetRepresentativeFragmentTestEnableNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test)) */

#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image))

static void xl_hook_tl_deviceHookTable_vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetShadingRateImageEnableNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetShadingRateImageEnableNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetShadingRateImageEnableNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetShadingRateImageEnableNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, shadingRateImageEnable);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetShadingRateImageEnableNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image)) */

#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle))

static void xl_hook_tl_deviceHookTable_vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV* pViewportSwizzles) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetViewportSwizzleNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetViewportSwizzleNV) {
		__fn = tl_deviceHookTable.replace->vkCmdSetViewportSwizzleNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetViewportSwizzleNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetViewportSwizzleNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle)) */

#if defined(VK_EXT_shader_module_identifier)

static void xl_hook_tl_deviceHookTable_vkGetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* pIdentifier) {
	auto __fn = tl_deviceHookTable.table->vkGetShaderModuleIdentifierEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetShaderModuleIdentifierEXT) {
		__fn = tl_deviceHookTable.replace->vkGetShaderModuleIdentifierEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetShaderModuleIdentifierEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, shaderModule, pIdentifier);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetShaderModuleIdentifierEXT", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, VkShaderModuleIdentifierEXT* pIdentifier) {
	auto __fn = tl_deviceHookTable.table->vkGetShaderModuleCreateInfoIdentifierEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetShaderModuleCreateInfoIdentifierEXT) {
		__fn = tl_deviceHookTable.replace->vkGetShaderModuleCreateInfoIdentifierEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetShaderModuleCreateInfoIdentifierEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, pCreateInfo, pIdentifier);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetShaderModuleCreateInfoIdentifierEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_shader_module_identifier) */

#if defined(VK_NV_optical_flow)

static VkResult xl_hook_tl_deviceHookTable_vkCreateOpticalFlowSessionNV(VkDevice device, const VkOpticalFlowSessionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkOpticalFlowSessionNV* pSession) {
	auto __fn = tl_deviceHookTable.table->vkCreateOpticalFlowSessionNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateOpticalFlowSessionNV) {
		__fn = tl_deviceHookTable.replace->vkCreateOpticalFlowSessionNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateOpticalFlowSessionNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pSession);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateOpticalFlowSessionNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyOpticalFlowSessionNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyOpticalFlowSessionNV) {
		__fn = tl_deviceHookTable.replace->vkDestroyOpticalFlowSessionNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyOpticalFlowSessionNV", (PFN_vkVoidFunction)__fn); }
	__fn(device, session, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyOpticalFlowSessionNV", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkBindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout) {
	auto __fn = tl_deviceHookTable.table->vkBindOpticalFlowSessionImageNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkBindOpticalFlowSessionImageNV) {
		__fn = tl_deviceHookTable.replace->vkBindOpticalFlowSessionImageNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkBindOpticalFlowSessionImageNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, session, bindingPoint, view, layout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkBindOpticalFlowSessionImageNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV* pExecuteInfo) {
	auto __fn = tl_deviceHookTable.table->vkCmdOpticalFlowExecuteNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdOpticalFlowExecuteNV) {
		__fn = tl_deviceHookTable.replace->vkCmdOpticalFlowExecuteNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdOpticalFlowExecuteNV", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, session, pExecuteInfo);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdOpticalFlowExecuteNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_optical_flow) */

#if defined(VK_KHR_maintenance5)

static void xl_hook_tl_deviceHookTable_vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindIndexBuffer2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindIndexBuffer2KHR) {
		__fn = tl_deviceHookTable.replace->vkCmdBindIndexBuffer2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindIndexBuffer2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, buffer, offset, size, indexType);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindIndexBuffer2KHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfoKHR* pRenderingAreaInfo, VkExtent2D* pGranularity) {
	auto __fn = tl_deviceHookTable.table->vkGetRenderingAreaGranularityKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetRenderingAreaGranularityKHR) {
		__fn = tl_deviceHookTable.replace->vkGetRenderingAreaGranularityKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetRenderingAreaGranularityKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pRenderingAreaInfo, pGranularity);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetRenderingAreaGranularityKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfoKHR* pInfo, VkSubresourceLayout2KHR* pLayout) {
	auto __fn = tl_deviceHookTable.table->vkGetDeviceImageSubresourceLayoutKHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDeviceImageSubresourceLayoutKHR) {
		__fn = tl_deviceHookTable.replace->vkGetDeviceImageSubresourceLayoutKHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDeviceImageSubresourceLayoutKHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, pInfo, pLayout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDeviceImageSubresourceLayoutKHR", (PFN_vkVoidFunction)__fn); }
}

static void xl_hook_tl_deviceHookTable_vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, const VkImageSubresource2KHR* pSubresource, VkSubresourceLayout2KHR* pLayout) {
	auto __fn = tl_deviceHookTable.table->vkGetImageSubresourceLayout2KHR;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetImageSubresourceLayout2KHR) {
		__fn = tl_deviceHookTable.replace->vkGetImageSubresourceLayout2KHR;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetImageSubresourceLayout2KHR", (PFN_vkVoidFunction)__fn); }
	__fn(device, image, pSubresource, pLayout);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetImageSubresourceLayout2KHR", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_KHR_maintenance5) */

#if defined(VK_EXT_shader_object)

static VkResult xl_hook_tl_deviceHookTable_vkCreateShadersEXT(VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkShaderEXT* pShaders) {
	auto __fn = tl_deviceHookTable.table->vkCreateShadersEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateShadersEXT) {
		__fn = tl_deviceHookTable.replace->vkCreateShadersEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateShadersEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateShadersEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroyShaderEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroyShaderEXT) {
		__fn = tl_deviceHookTable.replace->vkDestroyShaderEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroyShaderEXT", (PFN_vkVoidFunction)__fn); }
	__fn(device, shader, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroyShaderEXT", (PFN_vkVoidFunction)__fn); }
}

static VkResult xl_hook_tl_deviceHookTable_vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, size_t* pDataSize, void* pData) {
	auto __fn = tl_deviceHookTable.table->vkGetShaderBinaryDataEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetShaderBinaryDataEXT) {
		__fn = tl_deviceHookTable.replace->vkGetShaderBinaryDataEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetShaderBinaryDataEXT", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, shader, pDataSize, pData);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetShaderBinaryDataEXT", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkCmdBindShadersEXT(VkCommandBuffer commandBuffer, uint32_t stageCount, const VkShaderStageFlagBits* pStages, const VkShaderEXT* pShaders) {
	auto __fn = tl_deviceHookTable.table->vkCmdBindShadersEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdBindShadersEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdBindShadersEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdBindShadersEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, stageCount, pStages, pShaders);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdBindShadersEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_shader_object) */

#if defined(VK_QCOM_tile_properties)

static VkResult xl_hook_tl_deviceHookTable_vkGetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, uint32_t* pPropertiesCount, VkTilePropertiesQCOM* pProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetFramebufferTilePropertiesQCOM;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetFramebufferTilePropertiesQCOM) {
		__fn = tl_deviceHookTable.replace->vkGetFramebufferTilePropertiesQCOM;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetFramebufferTilePropertiesQCOM", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, framebuffer, pPropertiesCount, pProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetFramebufferTilePropertiesQCOM", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static VkResult xl_hook_tl_deviceHookTable_vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device, const VkRenderingInfo* pRenderingInfo, VkTilePropertiesQCOM* pProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetDynamicRenderingTilePropertiesQCOM;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetDynamicRenderingTilePropertiesQCOM) {
		__fn = tl_deviceHookTable.replace->vkGetDynamicRenderingTilePropertiesQCOM;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetDynamicRenderingTilePropertiesQCOM", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pRenderingInfo, pProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetDynamicRenderingTilePropertiesQCOM", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_QCOM_tile_properties) */

#if defined(VK_NV_external_sci_sync2)

static VkResult xl_hook_tl_deviceHookTable_vkCreateSemaphoreSciSyncPoolNV(VkDevice device, const VkSemaphoreSciSyncPoolCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphoreSciSyncPoolNV* pSemaphorePool) {
	auto __fn = tl_deviceHookTable.table->vkCreateSemaphoreSciSyncPoolNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCreateSemaphoreSciSyncPoolNV) {
		__fn = tl_deviceHookTable.replace->vkCreateSemaphoreSciSyncPoolNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCreateSemaphoreSciSyncPoolNV", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, pCreateInfo, pAllocator, pSemaphorePool);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCreateSemaphoreSciSyncPoolNV", (PFN_vkVoidFunction)__fn); }
	return ret;
}

static void xl_hook_tl_deviceHookTable_vkDestroySemaphoreSciSyncPoolNV(VkDevice device, VkSemaphoreSciSyncPoolNV semaphorePool, const VkAllocationCallbacks* pAllocator) {
	auto __fn = tl_deviceHookTable.table->vkDestroySemaphoreSciSyncPoolNV;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkDestroySemaphoreSciSyncPoolNV) {
		__fn = tl_deviceHookTable.replace->vkDestroySemaphoreSciSyncPoolNV;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkDestroySemaphoreSciSyncPoolNV", (PFN_vkVoidFunction)__fn); }
	__fn(device, semaphorePool, pAllocator);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkDestroySemaphoreSciSyncPoolNV", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_NV_external_sci_sync2) */

#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)

static void xl_hook_tl_deviceHookTable_vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask) {
	auto __fn = tl_deviceHookTable.table->vkCmdSetAttachmentFeedbackLoopEnableEXT;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkCmdSetAttachmentFeedbackLoopEnableEXT) {
		__fn = tl_deviceHookTable.replace->vkCmdSetAttachmentFeedbackLoopEnableEXT;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkCmdSetAttachmentFeedbackLoopEnableEXT", (PFN_vkVoidFunction)__fn); }
	__fn(commandBuffer, aspectMask);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkCmdSetAttachmentFeedbackLoopEnableEXT", (PFN_vkVoidFunction)__fn); }
}

#endif /* defined(VK_EXT_attachment_feedback_loop_dynamic_state) */

#if defined(VK_QNX_external_memory_screen_buffer)

static VkResult xl_hook_tl_deviceHookTable_vkGetScreenBufferPropertiesQNX(VkDevice device, const struct _screen_buffer* buffer, VkScreenBufferPropertiesQNX* pProperties) {
	auto __fn = tl_deviceHookTable.table->vkGetScreenBufferPropertiesQNX;
	if (tl_deviceHookTable.replace && tl_deviceHookTable.replace->vkGetScreenBufferPropertiesQNX) {
		__fn = tl_deviceHookTable.replace->vkGetScreenBufferPropertiesQNX;
	}
	if (tl_deviceHookTable.preCall) { tl_deviceHookTable.preCall(tl_deviceHookTable.ctx, "vkGetScreenBufferPropertiesQNX", (PFN_vkVoidFunction)__fn); }
	auto ret = __fn(device, buffer, pProperties);
	if (tl_deviceHookTable.postCall) { tl_deviceHookTable.postCall(tl_deviceHookTable.ctx, "vkGetScreenBufferPropertiesQNX", (PFN_vkVoidFunction)__fn); }
	return ret;
}

#endif /* defined(VK_QNX_external_memory_screen_buffer) */


static PFN_vkVoidFunction getInstanceHookAddr(VkInstance instance, const char* pName) {
#if defined(VK_VERSION_1_0)
	if (strcmp(pName, "vkGetInstanceProcAddr") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetInstanceProcAddr; }
	if (strcmp(pName, "vkDestroyInstance") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkDestroyInstance; }
	if (strcmp(pName, "vkEnumeratePhysicalDevices") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkEnumeratePhysicalDevices; }
	if (strcmp(pName, "vkGetPhysicalDeviceFeatures") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFeatures; }
	if (strcmp(pName, "vkGetPhysicalDeviceFormatProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFormatProperties; }
	if (strcmp(pName, "vkGetPhysicalDeviceImageFormatProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceImageFormatProperties; }
	if (strcmp(pName, "vkGetPhysicalDeviceProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceProperties; }
	if (strcmp(pName, "vkGetPhysicalDeviceQueueFamilyProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceQueueFamilyProperties; }
	if (strcmp(pName, "vkGetPhysicalDeviceMemoryProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceMemoryProperties; }
	if (strcmp(pName, "vkGetDeviceProcAddr") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetDeviceProcAddr; }
	if (strcmp(pName, "vkCreateDevice") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateDevice; }
	if (strcmp(pName, "vkEnumerateDeviceExtensionProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkEnumerateDeviceExtensionProperties; }
	if (strcmp(pName, "vkEnumerateDeviceLayerProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkEnumerateDeviceLayerProperties; }
	if (strcmp(pName, "vkGetPhysicalDeviceSparseImageFormatProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSparseImageFormatProperties; }
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
	if (strcmp(pName, "vkEnumeratePhysicalDeviceGroups") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkEnumeratePhysicalDeviceGroups; }
	if (strcmp(pName, "vkGetPhysicalDeviceFeatures2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFeatures2; }
	if (strcmp(pName, "vkGetPhysicalDeviceProperties2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceProperties2; }
	if (strcmp(pName, "vkGetPhysicalDeviceFormatProperties2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFormatProperties2; }
	if (strcmp(pName, "vkGetPhysicalDeviceImageFormatProperties2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceImageFormatProperties2; }
	if (strcmp(pName, "vkGetPhysicalDeviceQueueFamilyProperties2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceQueueFamilyProperties2; }
	if (strcmp(pName, "vkGetPhysicalDeviceMemoryProperties2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceMemoryProperties2; }
	if (strcmp(pName, "vkGetPhysicalDeviceSparseImageFormatProperties2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSparseImageFormatProperties2; }
	if (strcmp(pName, "vkGetPhysicalDeviceExternalBufferProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalBufferProperties; }
	if (strcmp(pName, "vkGetPhysicalDeviceExternalFenceProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalFenceProperties; }
	if (strcmp(pName, "vkGetPhysicalDeviceExternalSemaphoreProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalSemaphoreProperties; }
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_3)
	if (strcmp(pName, "vkGetPhysicalDeviceToolProperties") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceToolProperties; }
#endif /* defined(VK_VERSION_1_3) */
#if defined(VK_KHR_surface)
	if (strcmp(pName, "vkDestroySurfaceKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkDestroySurfaceKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceSurfaceSupportKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceSupportKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceCapabilitiesKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceSurfaceFormatsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceFormatsKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceSurfacePresentModesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfacePresentModesKHR; }
#endif /* defined(VK_KHR_surface) */
#if (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
	if (strcmp(pName, "vkGetPhysicalDevicePresentRectanglesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDevicePresentRectanglesKHR; }
#endif /* (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) */
#if defined(VK_KHR_display)
	if (strcmp(pName, "vkGetPhysicalDeviceDisplayPropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDisplayPropertiesKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDisplayPlanePropertiesKHR; }
	if (strcmp(pName, "vkGetDisplayPlaneSupportedDisplaysKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetDisplayPlaneSupportedDisplaysKHR; }
	if (strcmp(pName, "vkGetDisplayModePropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetDisplayModePropertiesKHR; }
	if (strcmp(pName, "vkCreateDisplayModeKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateDisplayModeKHR; }
	if (strcmp(pName, "vkGetDisplayPlaneCapabilitiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetDisplayPlaneCapabilitiesKHR; }
	if (strcmp(pName, "vkCreateDisplayPlaneSurfaceKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateDisplayPlaneSurfaceKHR; }
#endif /* defined(VK_KHR_display) */
#if defined(VK_KHR_xlib_surface)
	if (strcmp(pName, "vkCreateXlibSurfaceKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateXlibSurfaceKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceXlibPresentationSupportKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceXlibPresentationSupportKHR; }
#endif /* defined(VK_KHR_xlib_surface) */
#if defined(VK_KHR_xcb_surface)
	if (strcmp(pName, "vkCreateXcbSurfaceKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateXcbSurfaceKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceXcbPresentationSupportKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceXcbPresentationSupportKHR; }
#endif /* defined(VK_KHR_xcb_surface) */
#if defined(VK_KHR_wayland_surface)
	if (strcmp(pName, "vkCreateWaylandSurfaceKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateWaylandSurfaceKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceWaylandPresentationSupportKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceWaylandPresentationSupportKHR; }
#endif /* defined(VK_KHR_wayland_surface) */
#if defined(VK_KHR_android_surface)
	if (strcmp(pName, "vkCreateAndroidSurfaceKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateAndroidSurfaceKHR; }
#endif /* defined(VK_KHR_android_surface) */
#if defined(VK_KHR_win32_surface)
	if (strcmp(pName, "vkCreateWin32SurfaceKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateWin32SurfaceKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceWin32PresentationSupportKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceWin32PresentationSupportKHR; }
#endif /* defined(VK_KHR_win32_surface) */
#if defined(VK_EXT_debug_report)
	if (strcmp(pName, "vkCreateDebugReportCallbackEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateDebugReportCallbackEXT; }
	if (strcmp(pName, "vkDestroyDebugReportCallbackEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkDestroyDebugReportCallbackEXT; }
	if (strcmp(pName, "vkDebugReportMessageEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkDebugReportMessageEXT; }
#endif /* defined(VK_EXT_debug_report) */
#if defined(VK_KHR_video_queue)
	if (strcmp(pName, "vkGetPhysicalDeviceVideoCapabilitiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceVideoCapabilitiesKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceVideoFormatPropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceVideoFormatPropertiesKHR; }
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_GGP_stream_descriptor_surface)
	if (strcmp(pName, "vkCreateStreamDescriptorSurfaceGGP") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateStreamDescriptorSurfaceGGP; }
#endif /* defined(VK_GGP_stream_descriptor_surface) */
#if defined(VK_NV_external_memory_capabilities)
	if (strcmp(pName, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalImageFormatPropertiesNV; }
#endif /* defined(VK_NV_external_memory_capabilities) */
#if defined(VK_KHR_get_physical_device_properties2)
	if (strcmp(pName, "vkGetPhysicalDeviceFeatures2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFeatures2KHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceProperties2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceProperties2KHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceFormatProperties2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFormatProperties2KHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceImageFormatProperties2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceImageFormatProperties2KHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceQueueFamilyProperties2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceQueueFamilyProperties2KHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceMemoryProperties2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceMemoryProperties2KHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSparseImageFormatProperties2KHR; }
#endif /* defined(VK_KHR_get_physical_device_properties2) */
#if defined(VK_NN_vi_surface)
	if (strcmp(pName, "vkCreateViSurfaceNN") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateViSurfaceNN; }
#endif /* defined(VK_NN_vi_surface) */
#if defined(VK_KHR_device_group_creation)
	if (strcmp(pName, "vkEnumeratePhysicalDeviceGroupsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkEnumeratePhysicalDeviceGroupsKHR; }
#endif /* defined(VK_KHR_device_group_creation) */
#if defined(VK_KHR_external_memory_capabilities)
	if (strcmp(pName, "vkGetPhysicalDeviceExternalBufferPropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalBufferPropertiesKHR; }
#endif /* defined(VK_KHR_external_memory_capabilities) */
#if defined(VK_KHR_external_semaphore_capabilities)
	if (strcmp(pName, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR; }
#endif /* defined(VK_KHR_external_semaphore_capabilities) */
#if defined(VK_EXT_direct_mode_display)
	if (strcmp(pName, "vkReleaseDisplayEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkReleaseDisplayEXT; }
#endif /* defined(VK_EXT_direct_mode_display) */
#if defined(VK_EXT_acquire_xlib_display)
	if (strcmp(pName, "vkAcquireXlibDisplayEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkAcquireXlibDisplayEXT; }
	if (strcmp(pName, "vkGetRandROutputDisplayEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetRandROutputDisplayEXT; }
#endif /* defined(VK_EXT_acquire_xlib_display) */
#if defined(VK_EXT_display_surface_counter)
	if (strcmp(pName, "vkGetPhysicalDeviceSurfaceCapabilities2EXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceCapabilities2EXT; }
#endif /* defined(VK_EXT_display_surface_counter) */
#if defined(VK_KHR_external_fence_capabilities)
	if (strcmp(pName, "vkGetPhysicalDeviceExternalFencePropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalFencePropertiesKHR; }
#endif /* defined(VK_KHR_external_fence_capabilities) */
#if defined(VK_KHR_performance_query)
	if (strcmp(pName, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR; }
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_KHR_get_surface_capabilities2)
	if (strcmp(pName, "vkGetPhysicalDeviceSurfaceCapabilities2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceCapabilities2KHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceSurfaceFormats2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfaceFormats2KHR; }
#endif /* defined(VK_KHR_get_surface_capabilities2) */
#if defined(VK_KHR_get_display_properties2)
	if (strcmp(pName, "vkGetPhysicalDeviceDisplayProperties2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDisplayProperties2KHR; }
	if (strcmp(pName, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDisplayPlaneProperties2KHR; }
	if (strcmp(pName, "vkGetDisplayModeProperties2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetDisplayModeProperties2KHR; }
	if (strcmp(pName, "vkGetDisplayPlaneCapabilities2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetDisplayPlaneCapabilities2KHR; }
#endif /* defined(VK_KHR_get_display_properties2) */
#if defined(VK_MVK_ios_surface)
	if (strcmp(pName, "vkCreateIOSSurfaceMVK") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateIOSSurfaceMVK; }
#endif /* defined(VK_MVK_ios_surface) */
#if defined(VK_MVK_macos_surface)
	if (strcmp(pName, "vkCreateMacOSSurfaceMVK") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateMacOSSurfaceMVK; }
#endif /* defined(VK_MVK_macos_surface) */
#if defined(VK_EXT_debug_utils)
	if (strcmp(pName, "vkSetDebugUtilsObjectNameEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkSetDebugUtilsObjectNameEXT; }
	if (strcmp(pName, "vkSetDebugUtilsObjectTagEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkSetDebugUtilsObjectTagEXT; }
	if (strcmp(pName, "vkQueueBeginDebugUtilsLabelEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkQueueBeginDebugUtilsLabelEXT; }
	if (strcmp(pName, "vkQueueEndDebugUtilsLabelEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkQueueEndDebugUtilsLabelEXT; }
	if (strcmp(pName, "vkQueueInsertDebugUtilsLabelEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkQueueInsertDebugUtilsLabelEXT; }
	if (strcmp(pName, "vkCmdBeginDebugUtilsLabelEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCmdBeginDebugUtilsLabelEXT; }
	if (strcmp(pName, "vkCmdEndDebugUtilsLabelEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCmdEndDebugUtilsLabelEXT; }
	if (strcmp(pName, "vkCmdInsertDebugUtilsLabelEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCmdInsertDebugUtilsLabelEXT; }
	if (strcmp(pName, "vkCreateDebugUtilsMessengerEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateDebugUtilsMessengerEXT; }
	if (strcmp(pName, "vkDestroyDebugUtilsMessengerEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkDestroyDebugUtilsMessengerEXT; }
	if (strcmp(pName, "vkSubmitDebugUtilsMessageEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkSubmitDebugUtilsMessageEXT; }
#endif /* defined(VK_EXT_debug_utils) */
#if defined(VK_EXT_sample_locations)
	if (strcmp(pName, "vkGetPhysicalDeviceMultisamplePropertiesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceMultisamplePropertiesEXT; }
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_EXT_calibrated_timestamps)
	if (strcmp(pName, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT; }
#endif /* defined(VK_EXT_calibrated_timestamps) */
#if defined(VK_FUCHSIA_imagepipe_surface)
	if (strcmp(pName, "vkCreateImagePipeSurfaceFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateImagePipeSurfaceFUCHSIA; }
#endif /* defined(VK_FUCHSIA_imagepipe_surface) */
#if defined(VK_EXT_metal_surface)
	if (strcmp(pName, "vkCreateMetalSurfaceEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateMetalSurfaceEXT; }
#endif /* defined(VK_EXT_metal_surface) */
#if defined(VK_KHR_fragment_shading_rate)
	if (strcmp(pName, "vkGetPhysicalDeviceFragmentShadingRatesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceFragmentShadingRatesKHR; }
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_EXT_tooling_info)
	if (strcmp(pName, "vkGetPhysicalDeviceToolPropertiesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceToolPropertiesEXT; }
#endif /* defined(VK_EXT_tooling_info) */
#if defined(VK_NV_cooperative_matrix)
	if (strcmp(pName, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV; }
#endif /* defined(VK_NV_cooperative_matrix) */
#if defined(VK_NV_coverage_reduction_mode)
	if (strcmp(pName, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV; }
#endif /* defined(VK_NV_coverage_reduction_mode) */
#if defined(VK_EXT_full_screen_exclusive)
	if (strcmp(pName, "vkGetPhysicalDeviceSurfacePresentModes2EXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSurfacePresentModes2EXT; }
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if defined(VK_EXT_headless_surface)
	if (strcmp(pName, "vkCreateHeadlessSurfaceEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateHeadlessSurfaceEXT; }
#endif /* defined(VK_EXT_headless_surface) */
#if defined(VK_EXT_acquire_drm_display)
	if (strcmp(pName, "vkAcquireDrmDisplayEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkAcquireDrmDisplayEXT; }
	if (strcmp(pName, "vkGetDrmDisplayEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetDrmDisplayEXT; }
#endif /* defined(VK_EXT_acquire_drm_display) */
#if defined(VK_KHR_video_encode_queue)
	if (strcmp(pName, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR; }
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_object_refresh)
	if (strcmp(pName, "vkGetPhysicalDeviceRefreshableObjectTypesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceRefreshableObjectTypesKHR; }
#endif /* defined(VK_KHR_object_refresh) */
#if defined(VK_NV_acquire_winrt_display)
	if (strcmp(pName, "vkAcquireWinrtDisplayNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkAcquireWinrtDisplayNV; }
	if (strcmp(pName, "vkGetWinrtDisplayNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetWinrtDisplayNV; }
#endif /* defined(VK_NV_acquire_winrt_display) */
#if defined(VK_EXT_directfb_surface)
	if (strcmp(pName, "vkCreateDirectFBSurfaceEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateDirectFBSurfaceEXT; }
	if (strcmp(pName, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceDirectFBPresentationSupportEXT; }
#endif /* defined(VK_EXT_directfb_surface) */
#if defined(VK_NV_external_sci_sync)
	if (strcmp(pName, "vkGetPhysicalDeviceSciSyncAttributesNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSciSyncAttributesNV; }
#endif /* defined(VK_NV_external_sci_sync) */
#if defined(VK_NV_external_memory_sci_buf)
	if (strcmp(pName, "vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV; }
	if (strcmp(pName, "vkGetPhysicalDeviceSciBufAttributesNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceSciBufAttributesNV; }
#endif /* defined(VK_NV_external_memory_sci_buf) */
#if defined(VK_QNX_screen_surface)
	if (strcmp(pName, "vkCreateScreenSurfaceQNX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkCreateScreenSurfaceQNX; }
	if (strcmp(pName, "vkGetPhysicalDeviceScreenPresentationSupportQNX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceScreenPresentationSupportQNX; }
#endif /* defined(VK_QNX_screen_surface) */
#if defined(VK_NV_optical_flow)
	if (strcmp(pName, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceOpticalFlowImageFormatsNV; }
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_KHR_cooperative_matrix)
	if (strcmp(pName, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_instanceHookTable_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR; }
#endif /* defined(VK_KHR_cooperative_matrix) */
	return nullptr;
}


static PFN_vkVoidFunction getDeviceHookAddr(VkDevice instance, const char* pName) {
#if defined(VK_VERSION_1_0)
	if (strcmp(pName, "vkGetDeviceProcAddr") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceProcAddr; }
	if (strcmp(pName, "vkDestroyDevice") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyDevice; }
	if (strcmp(pName, "vkGetDeviceQueue") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceQueue; }
	if (strcmp(pName, "vkQueueSubmit") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkQueueSubmit; }
	if (strcmp(pName, "vkQueueWaitIdle") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkQueueWaitIdle; }
	if (strcmp(pName, "vkDeviceWaitIdle") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDeviceWaitIdle; }
	if (strcmp(pName, "vkAllocateMemory") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkAllocateMemory; }
	if (strcmp(pName, "vkFreeMemory") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkFreeMemory; }
	if (strcmp(pName, "vkMapMemory") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkMapMemory; }
	if (strcmp(pName, "vkUnmapMemory") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkUnmapMemory; }
	if (strcmp(pName, "vkFlushMappedMemoryRanges") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkFlushMappedMemoryRanges; }
	if (strcmp(pName, "vkInvalidateMappedMemoryRanges") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkInvalidateMappedMemoryRanges; }
	if (strcmp(pName, "vkGetDeviceMemoryCommitment") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceMemoryCommitment; }
	if (strcmp(pName, "vkBindBufferMemory") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBindBufferMemory; }
	if (strcmp(pName, "vkBindImageMemory") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBindImageMemory; }
	if (strcmp(pName, "vkGetBufferMemoryRequirements") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferMemoryRequirements; }
	if (strcmp(pName, "vkGetImageMemoryRequirements") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageMemoryRequirements; }
	if (strcmp(pName, "vkGetImageSparseMemoryRequirements") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageSparseMemoryRequirements; }
	if (strcmp(pName, "vkQueueBindSparse") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkQueueBindSparse; }
	if (strcmp(pName, "vkCreateFence") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateFence; }
	if (strcmp(pName, "vkDestroyFence") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyFence; }
	if (strcmp(pName, "vkResetFences") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkResetFences; }
	if (strcmp(pName, "vkGetFenceStatus") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetFenceStatus; }
	if (strcmp(pName, "vkWaitForFences") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkWaitForFences; }
	if (strcmp(pName, "vkCreateSemaphore") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateSemaphore; }
	if (strcmp(pName, "vkDestroySemaphore") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroySemaphore; }
	if (strcmp(pName, "vkCreateEvent") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateEvent; }
	if (strcmp(pName, "vkDestroyEvent") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyEvent; }
	if (strcmp(pName, "vkGetEventStatus") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetEventStatus; }
	if (strcmp(pName, "vkSetEvent") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSetEvent; }
	if (strcmp(pName, "vkResetEvent") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkResetEvent; }
	if (strcmp(pName, "vkCreateQueryPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateQueryPool; }
	if (strcmp(pName, "vkDestroyQueryPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyQueryPool; }
	if (strcmp(pName, "vkGetQueryPoolResults") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetQueryPoolResults; }
	if (strcmp(pName, "vkCreateBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateBuffer; }
	if (strcmp(pName, "vkDestroyBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyBuffer; }
	if (strcmp(pName, "vkCreateBufferView") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateBufferView; }
	if (strcmp(pName, "vkDestroyBufferView") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyBufferView; }
	if (strcmp(pName, "vkCreateImage") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateImage; }
	if (strcmp(pName, "vkDestroyImage") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyImage; }
	if (strcmp(pName, "vkGetImageSubresourceLayout") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageSubresourceLayout; }
	if (strcmp(pName, "vkCreateImageView") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateImageView; }
	if (strcmp(pName, "vkDestroyImageView") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyImageView; }
	if (strcmp(pName, "vkCreateShaderModule") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateShaderModule; }
	if (strcmp(pName, "vkDestroyShaderModule") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyShaderModule; }
	if (strcmp(pName, "vkCreatePipelineCache") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreatePipelineCache; }
	if (strcmp(pName, "vkDestroyPipelineCache") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyPipelineCache; }
	if (strcmp(pName, "vkGetPipelineCacheData") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPipelineCacheData; }
	if (strcmp(pName, "vkMergePipelineCaches") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkMergePipelineCaches; }
	if (strcmp(pName, "vkCreateGraphicsPipelines") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateGraphicsPipelines; }
	if (strcmp(pName, "vkCreateComputePipelines") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateComputePipelines; }
	if (strcmp(pName, "vkDestroyPipeline") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyPipeline; }
	if (strcmp(pName, "vkCreatePipelineLayout") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreatePipelineLayout; }
	if (strcmp(pName, "vkDestroyPipelineLayout") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyPipelineLayout; }
	if (strcmp(pName, "vkCreateSampler") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateSampler; }
	if (strcmp(pName, "vkDestroySampler") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroySampler; }
	if (strcmp(pName, "vkCreateDescriptorSetLayout") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateDescriptorSetLayout; }
	if (strcmp(pName, "vkDestroyDescriptorSetLayout") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyDescriptorSetLayout; }
	if (strcmp(pName, "vkCreateDescriptorPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateDescriptorPool; }
	if (strcmp(pName, "vkDestroyDescriptorPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyDescriptorPool; }
	if (strcmp(pName, "vkResetDescriptorPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkResetDescriptorPool; }
	if (strcmp(pName, "vkAllocateDescriptorSets") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkAllocateDescriptorSets; }
	if (strcmp(pName, "vkFreeDescriptorSets") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkFreeDescriptorSets; }
	if (strcmp(pName, "vkUpdateDescriptorSets") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkUpdateDescriptorSets; }
	if (strcmp(pName, "vkCreateFramebuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateFramebuffer; }
	if (strcmp(pName, "vkDestroyFramebuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyFramebuffer; }
	if (strcmp(pName, "vkCreateRenderPass") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateRenderPass; }
	if (strcmp(pName, "vkDestroyRenderPass") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyRenderPass; }
	if (strcmp(pName, "vkGetRenderAreaGranularity") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetRenderAreaGranularity; }
	if (strcmp(pName, "vkCreateCommandPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateCommandPool; }
	if (strcmp(pName, "vkDestroyCommandPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyCommandPool; }
	if (strcmp(pName, "vkResetCommandPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkResetCommandPool; }
	if (strcmp(pName, "vkAllocateCommandBuffers") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkAllocateCommandBuffers; }
	if (strcmp(pName, "vkFreeCommandBuffers") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkFreeCommandBuffers; }
	if (strcmp(pName, "vkBeginCommandBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBeginCommandBuffer; }
	if (strcmp(pName, "vkEndCommandBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkEndCommandBuffer; }
	if (strcmp(pName, "vkResetCommandBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkResetCommandBuffer; }
	if (strcmp(pName, "vkCmdBindPipeline") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindPipeline; }
	if (strcmp(pName, "vkCmdSetViewport") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetViewport; }
	if (strcmp(pName, "vkCmdSetScissor") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetScissor; }
	if (strcmp(pName, "vkCmdSetLineWidth") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetLineWidth; }
	if (strcmp(pName, "vkCmdSetDepthBias") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthBias; }
	if (strcmp(pName, "vkCmdSetBlendConstants") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetBlendConstants; }
	if (strcmp(pName, "vkCmdSetDepthBounds") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthBounds; }
	if (strcmp(pName, "vkCmdSetStencilCompareMask") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetStencilCompareMask; }
	if (strcmp(pName, "vkCmdSetStencilWriteMask") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetStencilWriteMask; }
	if (strcmp(pName, "vkCmdSetStencilReference") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetStencilReference; }
	if (strcmp(pName, "vkCmdBindDescriptorSets") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindDescriptorSets; }
	if (strcmp(pName, "vkCmdBindIndexBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindIndexBuffer; }
	if (strcmp(pName, "vkCmdBindVertexBuffers") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindVertexBuffers; }
	if (strcmp(pName, "vkCmdDraw") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDraw; }
	if (strcmp(pName, "vkCmdDrawIndexed") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndexed; }
	if (strcmp(pName, "vkCmdDrawIndirect") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndirect; }
	if (strcmp(pName, "vkCmdDrawIndexedIndirect") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndexedIndirect; }
	if (strcmp(pName, "vkCmdDispatch") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDispatch; }
	if (strcmp(pName, "vkCmdDispatchIndirect") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDispatchIndirect; }
	if (strcmp(pName, "vkCmdCopyBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyBuffer; }
	if (strcmp(pName, "vkCmdCopyImage") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyImage; }
	if (strcmp(pName, "vkCmdBlitImage") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBlitImage; }
	if (strcmp(pName, "vkCmdCopyBufferToImage") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyBufferToImage; }
	if (strcmp(pName, "vkCmdCopyImageToBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyImageToBuffer; }
	if (strcmp(pName, "vkCmdUpdateBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdUpdateBuffer; }
	if (strcmp(pName, "vkCmdFillBuffer") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdFillBuffer; }
	if (strcmp(pName, "vkCmdClearColorImage") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdClearColorImage; }
	if (strcmp(pName, "vkCmdClearDepthStencilImage") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdClearDepthStencilImage; }
	if (strcmp(pName, "vkCmdClearAttachments") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdClearAttachments; }
	if (strcmp(pName, "vkCmdResolveImage") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdResolveImage; }
	if (strcmp(pName, "vkCmdSetEvent") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetEvent; }
	if (strcmp(pName, "vkCmdResetEvent") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdResetEvent; }
	if (strcmp(pName, "vkCmdWaitEvents") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWaitEvents; }
	if (strcmp(pName, "vkCmdPipelineBarrier") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdPipelineBarrier; }
	if (strcmp(pName, "vkCmdBeginQuery") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginQuery; }
	if (strcmp(pName, "vkCmdEndQuery") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndQuery; }
	if (strcmp(pName, "vkCmdResetQueryPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdResetQueryPool; }
	if (strcmp(pName, "vkCmdWriteTimestamp") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWriteTimestamp; }
	if (strcmp(pName, "vkCmdCopyQueryPoolResults") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyQueryPoolResults; }
	if (strcmp(pName, "vkCmdPushConstants") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdPushConstants; }
	if (strcmp(pName, "vkCmdBeginRenderPass") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginRenderPass; }
	if (strcmp(pName, "vkCmdNextSubpass") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdNextSubpass; }
	if (strcmp(pName, "vkCmdEndRenderPass") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndRenderPass; }
	if (strcmp(pName, "vkCmdExecuteCommands") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdExecuteCommands; }
#endif /* defined(VK_VERSION_1_0) */
#if defined(VK_VERSION_1_1)
	if (strcmp(pName, "vkBindBufferMemory2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBindBufferMemory2; }
	if (strcmp(pName, "vkBindImageMemory2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBindImageMemory2; }
	if (strcmp(pName, "vkGetDeviceGroupPeerMemoryFeatures") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceGroupPeerMemoryFeatures; }
	if (strcmp(pName, "vkCmdSetDeviceMask") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDeviceMask; }
	if (strcmp(pName, "vkCmdDispatchBase") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDispatchBase; }
	if (strcmp(pName, "vkGetImageMemoryRequirements2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageMemoryRequirements2; }
	if (strcmp(pName, "vkGetBufferMemoryRequirements2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferMemoryRequirements2; }
	if (strcmp(pName, "vkGetImageSparseMemoryRequirements2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageSparseMemoryRequirements2; }
	if (strcmp(pName, "vkTrimCommandPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkTrimCommandPool; }
	if (strcmp(pName, "vkGetDeviceQueue2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceQueue2; }
	if (strcmp(pName, "vkCreateSamplerYcbcrConversion") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateSamplerYcbcrConversion; }
	if (strcmp(pName, "vkDestroySamplerYcbcrConversion") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroySamplerYcbcrConversion; }
	if (strcmp(pName, "vkCreateDescriptorUpdateTemplate") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateDescriptorUpdateTemplate; }
	if (strcmp(pName, "vkDestroyDescriptorUpdateTemplate") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyDescriptorUpdateTemplate; }
	if (strcmp(pName, "vkUpdateDescriptorSetWithTemplate") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkUpdateDescriptorSetWithTemplate; }
	if (strcmp(pName, "vkGetDescriptorSetLayoutSupport") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutSupport; }
#endif /* defined(VK_VERSION_1_1) */
#if defined(VK_VERSION_1_2)
	if (strcmp(pName, "vkCmdDrawIndirectCount") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndirectCount; }
	if (strcmp(pName, "vkCmdDrawIndexedIndirectCount") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndexedIndirectCount; }
	if (strcmp(pName, "vkCreateRenderPass2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateRenderPass2; }
	if (strcmp(pName, "vkCmdBeginRenderPass2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginRenderPass2; }
	if (strcmp(pName, "vkCmdNextSubpass2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdNextSubpass2; }
	if (strcmp(pName, "vkCmdEndRenderPass2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndRenderPass2; }
	if (strcmp(pName, "vkResetQueryPool") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkResetQueryPool; }
	if (strcmp(pName, "vkGetSemaphoreCounterValue") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSemaphoreCounterValue; }
	if (strcmp(pName, "vkWaitSemaphores") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkWaitSemaphores; }
	if (strcmp(pName, "vkSignalSemaphore") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSignalSemaphore; }
	if (strcmp(pName, "vkGetBufferDeviceAddress") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferDeviceAddress; }
	if (strcmp(pName, "vkGetBufferOpaqueCaptureAddress") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferOpaqueCaptureAddress; }
	if (strcmp(pName, "vkGetDeviceMemoryOpaqueCaptureAddress") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceMemoryOpaqueCaptureAddress; }
#endif /* defined(VK_VERSION_1_2) */
#if defined(VK_VERSION_1_3)
	if (strcmp(pName, "vkCreatePrivateDataSlot") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreatePrivateDataSlot; }
	if (strcmp(pName, "vkDestroyPrivateDataSlot") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyPrivateDataSlot; }
	if (strcmp(pName, "vkSetPrivateData") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSetPrivateData; }
	if (strcmp(pName, "vkGetPrivateData") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPrivateData; }
	if (strcmp(pName, "vkCmdSetEvent2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetEvent2; }
	if (strcmp(pName, "vkCmdResetEvent2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdResetEvent2; }
	if (strcmp(pName, "vkCmdWaitEvents2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWaitEvents2; }
	if (strcmp(pName, "vkCmdPipelineBarrier2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdPipelineBarrier2; }
	if (strcmp(pName, "vkCmdWriteTimestamp2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWriteTimestamp2; }
	if (strcmp(pName, "vkQueueSubmit2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkQueueSubmit2; }
	if (strcmp(pName, "vkCmdCopyBuffer2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyBuffer2; }
	if (strcmp(pName, "vkCmdCopyImage2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyImage2; }
	if (strcmp(pName, "vkCmdCopyBufferToImage2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyBufferToImage2; }
	if (strcmp(pName, "vkCmdCopyImageToBuffer2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyImageToBuffer2; }
	if (strcmp(pName, "vkCmdBlitImage2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBlitImage2; }
	if (strcmp(pName, "vkCmdResolveImage2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdResolveImage2; }
	if (strcmp(pName, "vkCmdBeginRendering") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginRendering; }
	if (strcmp(pName, "vkCmdEndRendering") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndRendering; }
	if (strcmp(pName, "vkCmdSetCullMode") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCullMode; }
	if (strcmp(pName, "vkCmdSetFrontFace") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetFrontFace; }
	if (strcmp(pName, "vkCmdSetPrimitiveTopology") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetPrimitiveTopology; }
	if (strcmp(pName, "vkCmdSetViewportWithCount") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetViewportWithCount; }
	if (strcmp(pName, "vkCmdSetScissorWithCount") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetScissorWithCount; }
	if (strcmp(pName, "vkCmdBindVertexBuffers2") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindVertexBuffers2; }
	if (strcmp(pName, "vkCmdSetDepthTestEnable") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthTestEnable; }
	if (strcmp(pName, "vkCmdSetDepthWriteEnable") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthWriteEnable; }
	if (strcmp(pName, "vkCmdSetDepthCompareOp") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthCompareOp; }
	if (strcmp(pName, "vkCmdSetDepthBoundsTestEnable") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthBoundsTestEnable; }
	if (strcmp(pName, "vkCmdSetStencilTestEnable") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetStencilTestEnable; }
	if (strcmp(pName, "vkCmdSetStencilOp") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetStencilOp; }
	if (strcmp(pName, "vkCmdSetRasterizerDiscardEnable") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetRasterizerDiscardEnable; }
	if (strcmp(pName, "vkCmdSetDepthBiasEnable") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthBiasEnable; }
	if (strcmp(pName, "vkCmdSetPrimitiveRestartEnable") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetPrimitiveRestartEnable; }
	if (strcmp(pName, "vkGetDeviceBufferMemoryRequirements") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceBufferMemoryRequirements; }
	if (strcmp(pName, "vkGetDeviceImageMemoryRequirements") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceImageMemoryRequirements; }
	if (strcmp(pName, "vkGetDeviceImageSparseMemoryRequirements") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceImageSparseMemoryRequirements; }
#endif /* defined(VK_VERSION_1_3) */
#if defined(VKSC_VERSION_1_0)
	if (strcmp(pName, "vkGetCommandPoolMemoryConsumption") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetCommandPoolMemoryConsumption; }
	if (strcmp(pName, "vkGetFaultData") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetFaultData; }
#endif /* defined(VKSC_VERSION_1_0) */
#if defined(VK_KHR_swapchain)
	if (strcmp(pName, "vkCreateSwapchainKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateSwapchainKHR; }
	if (strcmp(pName, "vkDestroySwapchainKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroySwapchainKHR; }
	if (strcmp(pName, "vkGetSwapchainImagesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSwapchainImagesKHR; }
	if (strcmp(pName, "vkAcquireNextImageKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkAcquireNextImageKHR; }
	if (strcmp(pName, "vkQueuePresentKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkQueuePresentKHR; }
#endif /* defined(VK_KHR_swapchain) */
#if (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface))
	if (strcmp(pName, "vkGetDeviceGroupPresentCapabilitiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceGroupPresentCapabilitiesKHR; }
	if (strcmp(pName, "vkGetDeviceGroupSurfacePresentModesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceGroupSurfacePresentModesKHR; }
#endif /* (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_surface)) */
#if (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain))
	if (strcmp(pName, "vkAcquireNextImage2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkAcquireNextImage2KHR; }
#endif /* (defined(VK_KHR_swapchain) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_device_group) && defined(VK_KHR_swapchain)) */
#if defined(VK_KHR_display_swapchain)
	if (strcmp(pName, "vkCreateSharedSwapchainsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateSharedSwapchainsKHR; }
#endif /* defined(VK_KHR_display_swapchain) */
#if defined(VK_EXT_debug_marker)
	if (strcmp(pName, "vkDebugMarkerSetObjectTagEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDebugMarkerSetObjectTagEXT; }
	if (strcmp(pName, "vkDebugMarkerSetObjectNameEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDebugMarkerSetObjectNameEXT; }
	if (strcmp(pName, "vkCmdDebugMarkerBeginEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDebugMarkerBeginEXT; }
	if (strcmp(pName, "vkCmdDebugMarkerEndEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDebugMarkerEndEXT; }
	if (strcmp(pName, "vkCmdDebugMarkerInsertEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDebugMarkerInsertEXT; }
#endif /* defined(VK_EXT_debug_marker) */
#if defined(VK_KHR_video_queue)
	if (strcmp(pName, "vkCreateVideoSessionKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateVideoSessionKHR; }
	if (strcmp(pName, "vkDestroyVideoSessionKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyVideoSessionKHR; }
	if (strcmp(pName, "vkGetVideoSessionMemoryRequirementsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetVideoSessionMemoryRequirementsKHR; }
	if (strcmp(pName, "vkBindVideoSessionMemoryKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBindVideoSessionMemoryKHR; }
	if (strcmp(pName, "vkCreateVideoSessionParametersKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateVideoSessionParametersKHR; }
	if (strcmp(pName, "vkUpdateVideoSessionParametersKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkUpdateVideoSessionParametersKHR; }
	if (strcmp(pName, "vkDestroyVideoSessionParametersKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyVideoSessionParametersKHR; }
	if (strcmp(pName, "vkCmdBeginVideoCodingKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginVideoCodingKHR; }
	if (strcmp(pName, "vkCmdEndVideoCodingKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndVideoCodingKHR; }
	if (strcmp(pName, "vkCmdControlVideoCodingKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdControlVideoCodingKHR; }
#endif /* defined(VK_KHR_video_queue) */
#if defined(VK_KHR_video_decode_queue)
	if (strcmp(pName, "vkCmdDecodeVideoKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDecodeVideoKHR; }
#endif /* defined(VK_KHR_video_decode_queue) */
#if defined(VK_EXT_transform_feedback)
	if (strcmp(pName, "vkCmdBindTransformFeedbackBuffersEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindTransformFeedbackBuffersEXT; }
	if (strcmp(pName, "vkCmdBeginTransformFeedbackEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginTransformFeedbackEXT; }
	if (strcmp(pName, "vkCmdEndTransformFeedbackEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndTransformFeedbackEXT; }
	if (strcmp(pName, "vkCmdBeginQueryIndexedEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginQueryIndexedEXT; }
	if (strcmp(pName, "vkCmdEndQueryIndexedEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndQueryIndexedEXT; }
	if (strcmp(pName, "vkCmdDrawIndirectByteCountEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndirectByteCountEXT; }
#endif /* defined(VK_EXT_transform_feedback) */
#if defined(VK_NVX_binary_import)
	if (strcmp(pName, "vkCreateCuModuleNVX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateCuModuleNVX; }
	if (strcmp(pName, "vkCreateCuFunctionNVX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateCuFunctionNVX; }
	if (strcmp(pName, "vkDestroyCuModuleNVX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyCuModuleNVX; }
	if (strcmp(pName, "vkDestroyCuFunctionNVX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyCuFunctionNVX; }
	if (strcmp(pName, "vkCmdCuLaunchKernelNVX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCuLaunchKernelNVX; }
#endif /* defined(VK_NVX_binary_import) */
#if defined(VK_NVX_image_view_handle)
	if (strcmp(pName, "vkGetImageViewHandleNVX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageViewHandleNVX; }
	if (strcmp(pName, "vkGetImageViewAddressNVX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageViewAddressNVX; }
#endif /* defined(VK_NVX_image_view_handle) */
#if defined(VK_AMD_draw_indirect_count)
	if (strcmp(pName, "vkCmdDrawIndirectCountAMD") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndirectCountAMD; }
	if (strcmp(pName, "vkCmdDrawIndexedIndirectCountAMD") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndexedIndirectCountAMD; }
#endif /* defined(VK_AMD_draw_indirect_count) */
#if defined(VK_AMD_shader_info)
	if (strcmp(pName, "vkGetShaderInfoAMD") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetShaderInfoAMD; }
#endif /* defined(VK_AMD_shader_info) */
#if defined(VK_KHR_dynamic_rendering)
	if (strcmp(pName, "vkCmdBeginRenderingKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginRenderingKHR; }
	if (strcmp(pName, "vkCmdEndRenderingKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndRenderingKHR; }
#endif /* defined(VK_KHR_dynamic_rendering) */
#if defined(VK_NV_external_memory_win32)
	if (strcmp(pName, "vkGetMemoryWin32HandleNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryWin32HandleNV; }
#endif /* defined(VK_NV_external_memory_win32) */
#if defined(VK_KHR_device_group)
	if (strcmp(pName, "vkGetDeviceGroupPeerMemoryFeaturesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceGroupPeerMemoryFeaturesKHR; }
	if (strcmp(pName, "vkCmdSetDeviceMaskKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDeviceMaskKHR; }
	if (strcmp(pName, "vkCmdDispatchBaseKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDispatchBaseKHR; }
#endif /* defined(VK_KHR_device_group) */
#if defined(VK_KHR_maintenance1)
	if (strcmp(pName, "vkTrimCommandPoolKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkTrimCommandPoolKHR; }
#endif /* defined(VK_KHR_maintenance1) */
#if defined(VK_KHR_external_memory_win32)
	if (strcmp(pName, "vkGetMemoryWin32HandleKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryWin32HandleKHR; }
	if (strcmp(pName, "vkGetMemoryWin32HandlePropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryWin32HandlePropertiesKHR; }
#endif /* defined(VK_KHR_external_memory_win32) */
#if defined(VK_KHR_external_memory_fd)
	if (strcmp(pName, "vkGetMemoryFdKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryFdKHR; }
	if (strcmp(pName, "vkGetMemoryFdPropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryFdPropertiesKHR; }
#endif /* defined(VK_KHR_external_memory_fd) */
#if defined(VK_KHR_external_semaphore_win32)
	if (strcmp(pName, "vkImportSemaphoreWin32HandleKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkImportSemaphoreWin32HandleKHR; }
	if (strcmp(pName, "vkGetSemaphoreWin32HandleKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSemaphoreWin32HandleKHR; }
#endif /* defined(VK_KHR_external_semaphore_win32) */
#if defined(VK_KHR_external_semaphore_fd)
	if (strcmp(pName, "vkImportSemaphoreFdKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkImportSemaphoreFdKHR; }
	if (strcmp(pName, "vkGetSemaphoreFdKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSemaphoreFdKHR; }
#endif /* defined(VK_KHR_external_semaphore_fd) */
#if defined(VK_KHR_push_descriptor)
	if (strcmp(pName, "vkCmdPushDescriptorSetKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdPushDescriptorSetKHR; }
#endif /* defined(VK_KHR_push_descriptor) */
#if (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) || (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor))
	if (strcmp(pName, "vkCmdPushDescriptorSetWithTemplateKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdPushDescriptorSetWithTemplateKHR; }
#endif /* (defined(VK_KHR_push_descriptor) && defined(VK_VERSION_1_1)) || (defined(VK_KHR_push_descriptor) && defined(VK_KHR_descriptor_update_template)) || (defined(VK_KHR_descriptor_update_template) && defined(VK_KHR_push_descriptor)) */
#if defined(VK_EXT_conditional_rendering)
	if (strcmp(pName, "vkCmdBeginConditionalRenderingEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginConditionalRenderingEXT; }
	if (strcmp(pName, "vkCmdEndConditionalRenderingEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndConditionalRenderingEXT; }
#endif /* defined(VK_EXT_conditional_rendering) */
#if defined(VK_KHR_descriptor_update_template)
	if (strcmp(pName, "vkCreateDescriptorUpdateTemplateKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateDescriptorUpdateTemplateKHR; }
	if (strcmp(pName, "vkDestroyDescriptorUpdateTemplateKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyDescriptorUpdateTemplateKHR; }
	if (strcmp(pName, "vkUpdateDescriptorSetWithTemplateKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkUpdateDescriptorSetWithTemplateKHR; }
#endif /* defined(VK_KHR_descriptor_update_template) */
#if defined(VK_NV_clip_space_w_scaling)
	if (strcmp(pName, "vkCmdSetViewportWScalingNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetViewportWScalingNV; }
#endif /* defined(VK_NV_clip_space_w_scaling) */
#if defined(VK_EXT_display_control)
	if (strcmp(pName, "vkDisplayPowerControlEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDisplayPowerControlEXT; }
	if (strcmp(pName, "vkRegisterDeviceEventEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkRegisterDeviceEventEXT; }
	if (strcmp(pName, "vkRegisterDisplayEventEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkRegisterDisplayEventEXT; }
	if (strcmp(pName, "vkGetSwapchainCounterEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSwapchainCounterEXT; }
#endif /* defined(VK_EXT_display_control) */
#if defined(VK_GOOGLE_display_timing)
	if (strcmp(pName, "vkGetRefreshCycleDurationGOOGLE") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetRefreshCycleDurationGOOGLE; }
	if (strcmp(pName, "vkGetPastPresentationTimingGOOGLE") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPastPresentationTimingGOOGLE; }
#endif /* defined(VK_GOOGLE_display_timing) */
#if defined(VK_EXT_discard_rectangles)
	if (strcmp(pName, "vkCmdSetDiscardRectangleEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDiscardRectangleEXT; }
	if (strcmp(pName, "vkCmdSetDiscardRectangleEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDiscardRectangleEnableEXT; }
	if (strcmp(pName, "vkCmdSetDiscardRectangleModeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDiscardRectangleModeEXT; }
#endif /* defined(VK_EXT_discard_rectangles) */
#if defined(VK_EXT_hdr_metadata)
	if (strcmp(pName, "vkSetHdrMetadataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSetHdrMetadataEXT; }
#endif /* defined(VK_EXT_hdr_metadata) */
#if defined(VK_KHR_create_renderpass2)
	if (strcmp(pName, "vkCreateRenderPass2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateRenderPass2KHR; }
	if (strcmp(pName, "vkCmdBeginRenderPass2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBeginRenderPass2KHR; }
	if (strcmp(pName, "vkCmdNextSubpass2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdNextSubpass2KHR; }
	if (strcmp(pName, "vkCmdEndRenderPass2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEndRenderPass2KHR; }
#endif /* defined(VK_KHR_create_renderpass2) */
#if defined(VK_KHR_shared_presentable_image)
	if (strcmp(pName, "vkGetSwapchainStatusKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSwapchainStatusKHR; }
#endif /* defined(VK_KHR_shared_presentable_image) */
#if defined(VK_KHR_external_fence_win32)
	if (strcmp(pName, "vkImportFenceWin32HandleKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkImportFenceWin32HandleKHR; }
	if (strcmp(pName, "vkGetFenceWin32HandleKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetFenceWin32HandleKHR; }
#endif /* defined(VK_KHR_external_fence_win32) */
#if defined(VK_KHR_external_fence_fd)
	if (strcmp(pName, "vkImportFenceFdKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkImportFenceFdKHR; }
	if (strcmp(pName, "vkGetFenceFdKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetFenceFdKHR; }
#endif /* defined(VK_KHR_external_fence_fd) */
#if defined(VK_KHR_performance_query)
	if (strcmp(pName, "vkAcquireProfilingLockKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkAcquireProfilingLockKHR; }
	if (strcmp(pName, "vkReleaseProfilingLockKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkReleaseProfilingLockKHR; }
#endif /* defined(VK_KHR_performance_query) */
#if defined(VK_ANDROID_external_memory_android_hardware_buffer)
	if (strcmp(pName, "vkGetAndroidHardwareBufferPropertiesANDROID") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetAndroidHardwareBufferPropertiesANDROID; }
	if (strcmp(pName, "vkGetMemoryAndroidHardwareBufferANDROID") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryAndroidHardwareBufferANDROID; }
#endif /* defined(VK_ANDROID_external_memory_android_hardware_buffer) */
#if defined(VK_AMDX_shader_enqueue)
	if (strcmp(pName, "vkCreateExecutionGraphPipelinesAMDX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateExecutionGraphPipelinesAMDX; }
	if (strcmp(pName, "vkGetExecutionGraphPipelineScratchSizeAMDX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetExecutionGraphPipelineScratchSizeAMDX; }
	if (strcmp(pName, "vkGetExecutionGraphPipelineNodeIndexAMDX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetExecutionGraphPipelineNodeIndexAMDX; }
	if (strcmp(pName, "vkCmdInitializeGraphScratchMemoryAMDX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdInitializeGraphScratchMemoryAMDX; }
	if (strcmp(pName, "vkCmdDispatchGraphAMDX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDispatchGraphAMDX; }
	if (strcmp(pName, "vkCmdDispatchGraphIndirectAMDX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDispatchGraphIndirectAMDX; }
	if (strcmp(pName, "vkCmdDispatchGraphIndirectCountAMDX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDispatchGraphIndirectCountAMDX; }
#endif /* defined(VK_AMDX_shader_enqueue) */
#if defined(VK_EXT_sample_locations)
	if (strcmp(pName, "vkCmdSetSampleLocationsEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetSampleLocationsEXT; }
#endif /* defined(VK_EXT_sample_locations) */
#if defined(VK_KHR_get_memory_requirements2)
	if (strcmp(pName, "vkGetImageMemoryRequirements2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageMemoryRequirements2KHR; }
	if (strcmp(pName, "vkGetBufferMemoryRequirements2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferMemoryRequirements2KHR; }
	if (strcmp(pName, "vkGetImageSparseMemoryRequirements2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageSparseMemoryRequirements2KHR; }
#endif /* defined(VK_KHR_get_memory_requirements2) */
#if defined(VK_KHR_acceleration_structure)
	if (strcmp(pName, "vkCreateAccelerationStructureKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateAccelerationStructureKHR; }
	if (strcmp(pName, "vkDestroyAccelerationStructureKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyAccelerationStructureKHR; }
	if (strcmp(pName, "vkCmdBuildAccelerationStructuresKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBuildAccelerationStructuresKHR; }
	if (strcmp(pName, "vkCmdBuildAccelerationStructuresIndirectKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBuildAccelerationStructuresIndirectKHR; }
	if (strcmp(pName, "vkBuildAccelerationStructuresKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBuildAccelerationStructuresKHR; }
	if (strcmp(pName, "vkCopyAccelerationStructureKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCopyAccelerationStructureKHR; }
	if (strcmp(pName, "vkCopyAccelerationStructureToMemoryKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCopyAccelerationStructureToMemoryKHR; }
	if (strcmp(pName, "vkCopyMemoryToAccelerationStructureKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCopyMemoryToAccelerationStructureKHR; }
	if (strcmp(pName, "vkWriteAccelerationStructuresPropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkWriteAccelerationStructuresPropertiesKHR; }
	if (strcmp(pName, "vkCmdCopyAccelerationStructureKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyAccelerationStructureKHR; }
	if (strcmp(pName, "vkCmdCopyAccelerationStructureToMemoryKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyAccelerationStructureToMemoryKHR; }
	if (strcmp(pName, "vkCmdCopyMemoryToAccelerationStructureKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyMemoryToAccelerationStructureKHR; }
	if (strcmp(pName, "vkGetAccelerationStructureDeviceAddressKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetAccelerationStructureDeviceAddressKHR; }
	if (strcmp(pName, "vkCmdWriteAccelerationStructuresPropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWriteAccelerationStructuresPropertiesKHR; }
	if (strcmp(pName, "vkGetDeviceAccelerationStructureCompatibilityKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceAccelerationStructureCompatibilityKHR; }
	if (strcmp(pName, "vkGetAccelerationStructureBuildSizesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetAccelerationStructureBuildSizesKHR; }
#endif /* defined(VK_KHR_acceleration_structure) */
#if defined(VK_KHR_ray_tracing_pipeline)
	if (strcmp(pName, "vkCmdTraceRaysKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdTraceRaysKHR; }
	if (strcmp(pName, "vkCreateRayTracingPipelinesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateRayTracingPipelinesKHR; }
	if (strcmp(pName, "vkGetRayTracingShaderGroupHandlesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetRayTracingShaderGroupHandlesKHR; }
	if (strcmp(pName, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR; }
	if (strcmp(pName, "vkCmdTraceRaysIndirectKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdTraceRaysIndirectKHR; }
	if (strcmp(pName, "vkGetRayTracingShaderGroupStackSizeKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetRayTracingShaderGroupStackSizeKHR; }
	if (strcmp(pName, "vkCmdSetRayTracingPipelineStackSizeKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetRayTracingPipelineStackSizeKHR; }
#endif /* defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_KHR_sampler_ycbcr_conversion)
	if (strcmp(pName, "vkCreateSamplerYcbcrConversionKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateSamplerYcbcrConversionKHR; }
	if (strcmp(pName, "vkDestroySamplerYcbcrConversionKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroySamplerYcbcrConversionKHR; }
#endif /* defined(VK_KHR_sampler_ycbcr_conversion) */
#if defined(VK_KHR_bind_memory2)
	if (strcmp(pName, "vkBindBufferMemory2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBindBufferMemory2KHR; }
	if (strcmp(pName, "vkBindImageMemory2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBindImageMemory2KHR; }
#endif /* defined(VK_KHR_bind_memory2) */
#if defined(VK_EXT_image_drm_format_modifier)
	if (strcmp(pName, "vkGetImageDrmFormatModifierPropertiesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageDrmFormatModifierPropertiesEXT; }
#endif /* defined(VK_EXT_image_drm_format_modifier) */
#if defined(VK_EXT_validation_cache)
	if (strcmp(pName, "vkCreateValidationCacheEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateValidationCacheEXT; }
	if (strcmp(pName, "vkDestroyValidationCacheEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyValidationCacheEXT; }
	if (strcmp(pName, "vkMergeValidationCachesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkMergeValidationCachesEXT; }
	if (strcmp(pName, "vkGetValidationCacheDataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetValidationCacheDataEXT; }
#endif /* defined(VK_EXT_validation_cache) */
#if defined(VK_NV_shading_rate_image)
	if (strcmp(pName, "vkCmdBindShadingRateImageNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindShadingRateImageNV; }
	if (strcmp(pName, "vkCmdSetViewportShadingRatePaletteNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetViewportShadingRatePaletteNV; }
	if (strcmp(pName, "vkCmdSetCoarseSampleOrderNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCoarseSampleOrderNV; }
#endif /* defined(VK_NV_shading_rate_image) */
#if defined(VK_NV_ray_tracing)
	if (strcmp(pName, "vkCreateAccelerationStructureNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateAccelerationStructureNV; }
	if (strcmp(pName, "vkDestroyAccelerationStructureNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyAccelerationStructureNV; }
	if (strcmp(pName, "vkGetAccelerationStructureMemoryRequirementsNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetAccelerationStructureMemoryRequirementsNV; }
	if (strcmp(pName, "vkBindAccelerationStructureMemoryNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBindAccelerationStructureMemoryNV; }
	if (strcmp(pName, "vkCmdBuildAccelerationStructureNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBuildAccelerationStructureNV; }
	if (strcmp(pName, "vkCmdCopyAccelerationStructureNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyAccelerationStructureNV; }
	if (strcmp(pName, "vkCmdTraceRaysNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdTraceRaysNV; }
	if (strcmp(pName, "vkCreateRayTracingPipelinesNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateRayTracingPipelinesNV; }
	if (strcmp(pName, "vkGetRayTracingShaderGroupHandlesNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetRayTracingShaderGroupHandlesNV; }
	if (strcmp(pName, "vkGetAccelerationStructureHandleNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetAccelerationStructureHandleNV; }
	if (strcmp(pName, "vkCmdWriteAccelerationStructuresPropertiesNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWriteAccelerationStructuresPropertiesNV; }
	if (strcmp(pName, "vkCompileDeferredNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCompileDeferredNV; }
#endif /* defined(VK_NV_ray_tracing) */
#if defined(VK_KHR_maintenance3)
	if (strcmp(pName, "vkGetDescriptorSetLayoutSupportKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutSupportKHR; }
#endif /* defined(VK_KHR_maintenance3) */
#if defined(VK_KHR_draw_indirect_count)
	if (strcmp(pName, "vkCmdDrawIndirectCountKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndirectCountKHR; }
	if (strcmp(pName, "vkCmdDrawIndexedIndirectCountKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawIndexedIndirectCountKHR; }
#endif /* defined(VK_KHR_draw_indirect_count) */
#if defined(VK_EXT_external_memory_host)
	if (strcmp(pName, "vkGetMemoryHostPointerPropertiesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryHostPointerPropertiesEXT; }
#endif /* defined(VK_EXT_external_memory_host) */
#if defined(VK_AMD_buffer_marker)
	if (strcmp(pName, "vkCmdWriteBufferMarkerAMD") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWriteBufferMarkerAMD; }
#endif /* defined(VK_AMD_buffer_marker) */
#if defined(VK_EXT_calibrated_timestamps)
	if (strcmp(pName, "vkGetCalibratedTimestampsEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetCalibratedTimestampsEXT; }
#endif /* defined(VK_EXT_calibrated_timestamps) */
#if defined(VK_NV_mesh_shader)
	if (strcmp(pName, "vkCmdDrawMeshTasksNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksNV; }
	if (strcmp(pName, "vkCmdDrawMeshTasksIndirectNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksIndirectNV; }
	if (strcmp(pName, "vkCmdDrawMeshTasksIndirectCountNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksIndirectCountNV; }
#endif /* defined(VK_NV_mesh_shader) */
#if defined(VK_NV_scissor_exclusive)
	if (strcmp(pName, "vkCmdSetExclusiveScissorEnableNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetExclusiveScissorEnableNV; }
	if (strcmp(pName, "vkCmdSetExclusiveScissorNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetExclusiveScissorNV; }
#endif /* defined(VK_NV_scissor_exclusive) */
#if defined(VK_NV_device_diagnostic_checkpoints)
	if (strcmp(pName, "vkCmdSetCheckpointNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCheckpointNV; }
	if (strcmp(pName, "vkGetQueueCheckpointDataNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetQueueCheckpointDataNV; }
#endif /* defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_KHR_timeline_semaphore)
	if (strcmp(pName, "vkGetSemaphoreCounterValueKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSemaphoreCounterValueKHR; }
	if (strcmp(pName, "vkWaitSemaphoresKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkWaitSemaphoresKHR; }
	if (strcmp(pName, "vkSignalSemaphoreKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSignalSemaphoreKHR; }
#endif /* defined(VK_KHR_timeline_semaphore) */
#if defined(VK_INTEL_performance_query)
	if (strcmp(pName, "vkInitializePerformanceApiINTEL") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkInitializePerformanceApiINTEL; }
	if (strcmp(pName, "vkUninitializePerformanceApiINTEL") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkUninitializePerformanceApiINTEL; }
	if (strcmp(pName, "vkCmdSetPerformanceMarkerINTEL") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetPerformanceMarkerINTEL; }
	if (strcmp(pName, "vkCmdSetPerformanceStreamMarkerINTEL") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetPerformanceStreamMarkerINTEL; }
	if (strcmp(pName, "vkCmdSetPerformanceOverrideINTEL") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetPerformanceOverrideINTEL; }
	if (strcmp(pName, "vkAcquirePerformanceConfigurationINTEL") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkAcquirePerformanceConfigurationINTEL; }
	if (strcmp(pName, "vkReleasePerformanceConfigurationINTEL") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkReleasePerformanceConfigurationINTEL; }
	if (strcmp(pName, "vkQueueSetPerformanceConfigurationINTEL") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkQueueSetPerformanceConfigurationINTEL; }
	if (strcmp(pName, "vkGetPerformanceParameterINTEL") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPerformanceParameterINTEL; }
#endif /* defined(VK_INTEL_performance_query) */
#if defined(VK_AMD_display_native_hdr)
	if (strcmp(pName, "vkSetLocalDimmingAMD") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSetLocalDimmingAMD; }
#endif /* defined(VK_AMD_display_native_hdr) */
#if defined(VK_KHR_fragment_shading_rate)
	if (strcmp(pName, "vkCmdSetFragmentShadingRateKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetFragmentShadingRateKHR; }
#endif /* defined(VK_KHR_fragment_shading_rate) */
#if defined(VK_EXT_buffer_device_address)
	if (strcmp(pName, "vkGetBufferDeviceAddressEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferDeviceAddressEXT; }
#endif /* defined(VK_EXT_buffer_device_address) */
#if defined(VK_KHR_present_wait)
	if (strcmp(pName, "vkWaitForPresentKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkWaitForPresentKHR; }
#endif /* defined(VK_KHR_present_wait) */
#if defined(VK_EXT_full_screen_exclusive)
	if (strcmp(pName, "vkAcquireFullScreenExclusiveModeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkAcquireFullScreenExclusiveModeEXT; }
	if (strcmp(pName, "vkReleaseFullScreenExclusiveModeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkReleaseFullScreenExclusiveModeEXT; }
#endif /* defined(VK_EXT_full_screen_exclusive) */
#if (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1))
	if (strcmp(pName, "vkGetDeviceGroupSurfacePresentModes2EXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceGroupSurfacePresentModes2EXT; }
#endif /* (defined(VK_EXT_full_screen_exclusive) && defined(VK_KHR_device_group)) || (defined(VK_EXT_full_screen_exclusive) && defined(VK_VERSION_1_1)) */
#if defined(VK_KHR_buffer_device_address)
	if (strcmp(pName, "vkGetBufferDeviceAddressKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferDeviceAddressKHR; }
	if (strcmp(pName, "vkGetBufferOpaqueCaptureAddressKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferOpaqueCaptureAddressKHR; }
	if (strcmp(pName, "vkGetDeviceMemoryOpaqueCaptureAddressKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceMemoryOpaqueCaptureAddressKHR; }
#endif /* defined(VK_KHR_buffer_device_address) */
#if defined(VK_EXT_line_rasterization)
	if (strcmp(pName, "vkCmdSetLineStippleEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetLineStippleEXT; }
#endif /* defined(VK_EXT_line_rasterization) */
#if defined(VK_EXT_host_query_reset)
	if (strcmp(pName, "vkResetQueryPoolEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkResetQueryPoolEXT; }
#endif /* defined(VK_EXT_host_query_reset) */
#if defined(VK_EXT_extended_dynamic_state)
	if (strcmp(pName, "vkCmdSetCullModeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCullModeEXT; }
	if (strcmp(pName, "vkCmdSetFrontFaceEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetFrontFaceEXT; }
	if (strcmp(pName, "vkCmdSetPrimitiveTopologyEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetPrimitiveTopologyEXT; }
	if (strcmp(pName, "vkCmdSetViewportWithCountEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetViewportWithCountEXT; }
	if (strcmp(pName, "vkCmdSetScissorWithCountEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetScissorWithCountEXT; }
	if (strcmp(pName, "vkCmdBindVertexBuffers2EXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindVertexBuffers2EXT; }
	if (strcmp(pName, "vkCmdSetDepthTestEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthTestEnableEXT; }
	if (strcmp(pName, "vkCmdSetDepthWriteEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthWriteEnableEXT; }
	if (strcmp(pName, "vkCmdSetDepthCompareOpEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthCompareOpEXT; }
	if (strcmp(pName, "vkCmdSetDepthBoundsTestEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthBoundsTestEnableEXT; }
	if (strcmp(pName, "vkCmdSetStencilTestEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetStencilTestEnableEXT; }
	if (strcmp(pName, "vkCmdSetStencilOpEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetStencilOpEXT; }
#endif /* defined(VK_EXT_extended_dynamic_state) */
#if defined(VK_KHR_deferred_host_operations)
	if (strcmp(pName, "vkCreateDeferredOperationKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateDeferredOperationKHR; }
	if (strcmp(pName, "vkDestroyDeferredOperationKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyDeferredOperationKHR; }
	if (strcmp(pName, "vkGetDeferredOperationMaxConcurrencyKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeferredOperationMaxConcurrencyKHR; }
	if (strcmp(pName, "vkGetDeferredOperationResultKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeferredOperationResultKHR; }
	if (strcmp(pName, "vkDeferredOperationJoinKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDeferredOperationJoinKHR; }
#endif /* defined(VK_KHR_deferred_host_operations) */
#if defined(VK_KHR_pipeline_executable_properties)
	if (strcmp(pName, "vkGetPipelineExecutablePropertiesKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPipelineExecutablePropertiesKHR; }
	if (strcmp(pName, "vkGetPipelineExecutableStatisticsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPipelineExecutableStatisticsKHR; }
	if (strcmp(pName, "vkGetPipelineExecutableInternalRepresentationsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPipelineExecutableInternalRepresentationsKHR; }
#endif /* defined(VK_KHR_pipeline_executable_properties) */
#if defined(VK_EXT_host_image_copy)
	if (strcmp(pName, "vkCopyMemoryToImageEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCopyMemoryToImageEXT; }
	if (strcmp(pName, "vkCopyImageToMemoryEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCopyImageToMemoryEXT; }
	if (strcmp(pName, "vkCopyImageToImageEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCopyImageToImageEXT; }
	if (strcmp(pName, "vkTransitionImageLayoutEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkTransitionImageLayoutEXT; }
	if (strcmp(pName, "vkGetImageSubresourceLayout2EXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageSubresourceLayout2EXT; }
#endif /* defined(VK_EXT_host_image_copy) */
#if defined(VK_KHR_map_memory2)
	if (strcmp(pName, "vkMapMemory2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkMapMemory2KHR; }
	if (strcmp(pName, "vkUnmapMemory2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkUnmapMemory2KHR; }
#endif /* defined(VK_KHR_map_memory2) */
#if defined(VK_EXT_swapchain_maintenance1)
	if (strcmp(pName, "vkReleaseSwapchainImagesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkReleaseSwapchainImagesEXT; }
#endif /* defined(VK_EXT_swapchain_maintenance1) */
#if defined(VK_NV_device_generated_commands)
	if (strcmp(pName, "vkGetGeneratedCommandsMemoryRequirementsNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetGeneratedCommandsMemoryRequirementsNV; }
	if (strcmp(pName, "vkCmdPreprocessGeneratedCommandsNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdPreprocessGeneratedCommandsNV; }
	if (strcmp(pName, "vkCmdExecuteGeneratedCommandsNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdExecuteGeneratedCommandsNV; }
	if (strcmp(pName, "vkCmdBindPipelineShaderGroupNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindPipelineShaderGroupNV; }
	if (strcmp(pName, "vkCreateIndirectCommandsLayoutNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateIndirectCommandsLayoutNV; }
	if (strcmp(pName, "vkDestroyIndirectCommandsLayoutNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyIndirectCommandsLayoutNV; }
#endif /* defined(VK_NV_device_generated_commands) */
#if defined(VK_EXT_depth_bias_control)
	if (strcmp(pName, "vkCmdSetDepthBias2EXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthBias2EXT; }
#endif /* defined(VK_EXT_depth_bias_control) */
#if defined(VK_EXT_private_data)
	if (strcmp(pName, "vkCreatePrivateDataSlotEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreatePrivateDataSlotEXT; }
	if (strcmp(pName, "vkDestroyPrivateDataSlotEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyPrivateDataSlotEXT; }
	if (strcmp(pName, "vkSetPrivateDataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSetPrivateDataEXT; }
	if (strcmp(pName, "vkGetPrivateDataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPrivateDataEXT; }
#endif /* defined(VK_EXT_private_data) */
#if defined(VK_KHR_video_encode_queue)
	if (strcmp(pName, "vkGetEncodedVideoSessionParametersKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetEncodedVideoSessionParametersKHR; }
	if (strcmp(pName, "vkCmdEncodeVideoKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdEncodeVideoKHR; }
#endif /* defined(VK_KHR_video_encode_queue) */
#if defined(VK_KHR_object_refresh)
	if (strcmp(pName, "vkCmdRefreshObjectsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdRefreshObjectsKHR; }
#endif /* defined(VK_KHR_object_refresh) */
#if defined(VK_EXT_metal_objects)
	if (strcmp(pName, "vkExportMetalObjectsEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkExportMetalObjectsEXT; }
#endif /* defined(VK_EXT_metal_objects) */
#if defined(VK_KHR_synchronization2)
	if (strcmp(pName, "vkCmdSetEvent2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetEvent2KHR; }
	if (strcmp(pName, "vkCmdResetEvent2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdResetEvent2KHR; }
	if (strcmp(pName, "vkCmdWaitEvents2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWaitEvents2KHR; }
	if (strcmp(pName, "vkCmdPipelineBarrier2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdPipelineBarrier2KHR; }
	if (strcmp(pName, "vkCmdWriteTimestamp2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWriteTimestamp2KHR; }
	if (strcmp(pName, "vkQueueSubmit2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkQueueSubmit2KHR; }
#endif /* defined(VK_KHR_synchronization2) */
#if defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker)
	if (strcmp(pName, "vkCmdWriteBufferMarker2AMD") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWriteBufferMarker2AMD; }
#endif /* defined(VK_KHR_synchronization2) && defined(VK_AMD_buffer_marker) */
#if defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints)
	if (strcmp(pName, "vkGetQueueCheckpointData2NV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetQueueCheckpointData2NV; }
#endif /* defined(VK_KHR_synchronization2) && defined(VK_NV_device_diagnostic_checkpoints) */
#if defined(VK_EXT_descriptor_buffer)
	if (strcmp(pName, "vkGetDescriptorSetLayoutSizeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutSizeEXT; }
	if (strcmp(pName, "vkGetDescriptorSetLayoutBindingOffsetEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutBindingOffsetEXT; }
	if (strcmp(pName, "vkGetDescriptorEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDescriptorEXT; }
	if (strcmp(pName, "vkCmdBindDescriptorBuffersEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindDescriptorBuffersEXT; }
	if (strcmp(pName, "vkCmdSetDescriptorBufferOffsetsEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDescriptorBufferOffsetsEXT; }
	if (strcmp(pName, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindDescriptorBufferEmbeddedSamplersEXT; }
	if (strcmp(pName, "vkGetBufferOpaqueCaptureDescriptorDataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferOpaqueCaptureDescriptorDataEXT; }
	if (strcmp(pName, "vkGetImageOpaqueCaptureDescriptorDataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageOpaqueCaptureDescriptorDataEXT; }
	if (strcmp(pName, "vkGetImageViewOpaqueCaptureDescriptorDataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageViewOpaqueCaptureDescriptorDataEXT; }
	if (strcmp(pName, "vkGetSamplerOpaqueCaptureDescriptorDataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSamplerOpaqueCaptureDescriptorDataEXT; }
#endif /* defined(VK_EXT_descriptor_buffer) */
#if (defined(VK_EXT_descriptor_buffer) && defined(VK_KHR_acceleration_structure)) || (defined(VK_EXT_descriptor_buffer) && defined(VK_NV_ray_tracing))
	if (strcmp(pName, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT; }
#endif /* (defined(VK_EXT_descriptor_buffer) && defined(VK_KHR_acceleration_structure)) || (defined(VK_EXT_descriptor_buffer) && defined(VK_NV_ray_tracing)) */
#if defined(VK_NV_fragment_shading_rate_enums)
	if (strcmp(pName, "vkCmdSetFragmentShadingRateEnumNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetFragmentShadingRateEnumNV; }
#endif /* defined(VK_NV_fragment_shading_rate_enums) */
#if defined(VK_EXT_mesh_shader)
	if (strcmp(pName, "vkCmdDrawMeshTasksEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksEXT; }
	if (strcmp(pName, "vkCmdDrawMeshTasksIndirectEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksIndirectEXT; }
	if (strcmp(pName, "vkCmdDrawMeshTasksIndirectCountEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawMeshTasksIndirectCountEXT; }
#endif /* defined(VK_EXT_mesh_shader) */
#if defined(VK_KHR_copy_commands2)
	if (strcmp(pName, "vkCmdCopyBuffer2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyBuffer2KHR; }
	if (strcmp(pName, "vkCmdCopyImage2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyImage2KHR; }
	if (strcmp(pName, "vkCmdCopyBufferToImage2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyBufferToImage2KHR; }
	if (strcmp(pName, "vkCmdCopyImageToBuffer2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyImageToBuffer2KHR; }
	if (strcmp(pName, "vkCmdBlitImage2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBlitImage2KHR; }
	if (strcmp(pName, "vkCmdResolveImage2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdResolveImage2KHR; }
#endif /* defined(VK_KHR_copy_commands2) */
#if defined(VK_EXT_device_fault)
	if (strcmp(pName, "vkGetDeviceFaultInfoEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceFaultInfoEXT; }
#endif /* defined(VK_EXT_device_fault) */
#if defined(VK_EXT_vertex_input_dynamic_state)
	if (strcmp(pName, "vkCmdSetVertexInputEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetVertexInputEXT; }
#endif /* defined(VK_EXT_vertex_input_dynamic_state) */
#if defined(VK_FUCHSIA_external_memory)
	if (strcmp(pName, "vkGetMemoryZirconHandleFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryZirconHandleFUCHSIA; }
	if (strcmp(pName, "vkGetMemoryZirconHandlePropertiesFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryZirconHandlePropertiesFUCHSIA; }
#endif /* defined(VK_FUCHSIA_external_memory) */
#if defined(VK_FUCHSIA_external_semaphore)
	if (strcmp(pName, "vkImportSemaphoreZirconHandleFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkImportSemaphoreZirconHandleFUCHSIA; }
	if (strcmp(pName, "vkGetSemaphoreZirconHandleFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSemaphoreZirconHandleFUCHSIA; }
#endif /* defined(VK_FUCHSIA_external_semaphore) */
#if defined(VK_FUCHSIA_buffer_collection)
	if (strcmp(pName, "vkCreateBufferCollectionFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateBufferCollectionFUCHSIA; }
	if (strcmp(pName, "vkSetBufferCollectionImageConstraintsFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSetBufferCollectionImageConstraintsFUCHSIA; }
	if (strcmp(pName, "vkSetBufferCollectionBufferConstraintsFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSetBufferCollectionBufferConstraintsFUCHSIA; }
	if (strcmp(pName, "vkDestroyBufferCollectionFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyBufferCollectionFUCHSIA; }
	if (strcmp(pName, "vkGetBufferCollectionPropertiesFUCHSIA") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetBufferCollectionPropertiesFUCHSIA; }
#endif /* defined(VK_FUCHSIA_buffer_collection) */
#if defined(VK_HUAWEI_subpass_shading)
	if (strcmp(pName, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI; }
	if (strcmp(pName, "vkCmdSubpassShadingHUAWEI") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSubpassShadingHUAWEI; }
#endif /* defined(VK_HUAWEI_subpass_shading) */
#if defined(VK_HUAWEI_invocation_mask)
	if (strcmp(pName, "vkCmdBindInvocationMaskHUAWEI") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindInvocationMaskHUAWEI; }
#endif /* defined(VK_HUAWEI_invocation_mask) */
#if defined(VK_NV_external_memory_rdma)
	if (strcmp(pName, "vkGetMemoryRemoteAddressNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemoryRemoteAddressNV; }
#endif /* defined(VK_NV_external_memory_rdma) */
#if defined(VK_EXT_pipeline_properties)
	if (strcmp(pName, "vkGetPipelinePropertiesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPipelinePropertiesEXT; }
#endif /* defined(VK_EXT_pipeline_properties) */
#if defined(VK_NV_external_sci_sync)
	if (strcmp(pName, "vkGetFenceSciSyncFenceNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetFenceSciSyncFenceNV; }
	if (strcmp(pName, "vkGetFenceSciSyncObjNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetFenceSciSyncObjNV; }
	if (strcmp(pName, "vkImportFenceSciSyncFenceNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkImportFenceSciSyncFenceNV; }
	if (strcmp(pName, "vkImportFenceSciSyncObjNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkImportFenceSciSyncObjNV; }
	if (strcmp(pName, "vkGetSemaphoreSciSyncObjNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetSemaphoreSciSyncObjNV; }
	if (strcmp(pName, "vkImportSemaphoreSciSyncObjNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkImportSemaphoreSciSyncObjNV; }
#endif /* defined(VK_NV_external_sci_sync) */
#if defined(VK_NV_external_memory_sci_buf)
	if (strcmp(pName, "vkGetMemorySciBufNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMemorySciBufNV; }
#endif /* defined(VK_NV_external_memory_sci_buf) */
#if defined(VK_EXT_extended_dynamic_state2)
	if (strcmp(pName, "vkCmdSetPatchControlPointsEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetPatchControlPointsEXT; }
	if (strcmp(pName, "vkCmdSetRasterizerDiscardEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetRasterizerDiscardEnableEXT; }
	if (strcmp(pName, "vkCmdSetDepthBiasEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthBiasEnableEXT; }
	if (strcmp(pName, "vkCmdSetLogicOpEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetLogicOpEXT; }
	if (strcmp(pName, "vkCmdSetPrimitiveRestartEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetPrimitiveRestartEnableEXT; }
#endif /* defined(VK_EXT_extended_dynamic_state2) */
#if defined(VK_EXT_color_write_enable)
	if (strcmp(pName, "vkCmdSetColorWriteEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetColorWriteEnableEXT; }
#endif /* defined(VK_EXT_color_write_enable) */
#if defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline)
	if (strcmp(pName, "vkCmdTraceRaysIndirect2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdTraceRaysIndirect2KHR; }
#endif /* defined(VK_KHR_ray_tracing_maintenance1) && defined(VK_KHR_ray_tracing_pipeline) */
#if defined(VK_EXT_multi_draw)
	if (strcmp(pName, "vkCmdDrawMultiEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawMultiEXT; }
	if (strcmp(pName, "vkCmdDrawMultiIndexedEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawMultiIndexedEXT; }
#endif /* defined(VK_EXT_multi_draw) */
#if defined(VK_EXT_opacity_micromap)
	if (strcmp(pName, "vkCreateMicromapEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateMicromapEXT; }
	if (strcmp(pName, "vkDestroyMicromapEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyMicromapEXT; }
	if (strcmp(pName, "vkCmdBuildMicromapsEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBuildMicromapsEXT; }
	if (strcmp(pName, "vkBuildMicromapsEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBuildMicromapsEXT; }
	if (strcmp(pName, "vkCopyMicromapEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCopyMicromapEXT; }
	if (strcmp(pName, "vkCopyMicromapToMemoryEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCopyMicromapToMemoryEXT; }
	if (strcmp(pName, "vkCopyMemoryToMicromapEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCopyMemoryToMicromapEXT; }
	if (strcmp(pName, "vkWriteMicromapsPropertiesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkWriteMicromapsPropertiesEXT; }
	if (strcmp(pName, "vkCmdCopyMicromapEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyMicromapEXT; }
	if (strcmp(pName, "vkCmdCopyMicromapToMemoryEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyMicromapToMemoryEXT; }
	if (strcmp(pName, "vkCmdCopyMemoryToMicromapEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyMemoryToMicromapEXT; }
	if (strcmp(pName, "vkCmdWriteMicromapsPropertiesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdWriteMicromapsPropertiesEXT; }
	if (strcmp(pName, "vkGetDeviceMicromapCompatibilityEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceMicromapCompatibilityEXT; }
	if (strcmp(pName, "vkGetMicromapBuildSizesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetMicromapBuildSizesEXT; }
#endif /* defined(VK_EXT_opacity_micromap) */
#if defined(VK_HUAWEI_cluster_culling_shader)
	if (strcmp(pName, "vkCmdDrawClusterHUAWEI") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawClusterHUAWEI; }
	if (strcmp(pName, "vkCmdDrawClusterIndirectHUAWEI") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDrawClusterIndirectHUAWEI; }
#endif /* defined(VK_HUAWEI_cluster_culling_shader) */
#if defined(VK_EXT_pageable_device_local_memory)
	if (strcmp(pName, "vkSetDeviceMemoryPriorityEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkSetDeviceMemoryPriorityEXT; }
#endif /* defined(VK_EXT_pageable_device_local_memory) */
#if defined(VK_KHR_maintenance4)
	if (strcmp(pName, "vkGetDeviceBufferMemoryRequirementsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceBufferMemoryRequirementsKHR; }
	if (strcmp(pName, "vkGetDeviceImageMemoryRequirementsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceImageMemoryRequirementsKHR; }
	if (strcmp(pName, "vkGetDeviceImageSparseMemoryRequirementsKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceImageSparseMemoryRequirementsKHR; }
#endif /* defined(VK_KHR_maintenance4) */
#if defined(VK_VALVE_descriptor_set_host_mapping)
	if (strcmp(pName, "vkGetDescriptorSetLayoutHostMappingInfoVALVE") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDescriptorSetLayoutHostMappingInfoVALVE; }
	if (strcmp(pName, "vkGetDescriptorSetHostMappingVALVE") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDescriptorSetHostMappingVALVE; }
#endif /* defined(VK_VALVE_descriptor_set_host_mapping) */
#if defined(VK_NV_copy_memory_indirect)
	if (strcmp(pName, "vkCmdCopyMemoryIndirectNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyMemoryIndirectNV; }
	if (strcmp(pName, "vkCmdCopyMemoryToImageIndirectNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdCopyMemoryToImageIndirectNV; }
#endif /* defined(VK_NV_copy_memory_indirect) */
#if defined(VK_NV_memory_decompression)
	if (strcmp(pName, "vkCmdDecompressMemoryNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDecompressMemoryNV; }
	if (strcmp(pName, "vkCmdDecompressMemoryIndirectCountNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdDecompressMemoryIndirectCountNV; }
#endif /* defined(VK_NV_memory_decompression) */
#if defined(VK_NV_device_generated_commands_compute)
	if (strcmp(pName, "vkGetPipelineIndirectMemoryRequirementsNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPipelineIndirectMemoryRequirementsNV; }
	if (strcmp(pName, "vkCmdUpdatePipelineIndirectBufferNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdUpdatePipelineIndirectBufferNV; }
	if (strcmp(pName, "vkGetPipelineIndirectDeviceAddressNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetPipelineIndirectDeviceAddressNV; }
#endif /* defined(VK_NV_device_generated_commands_compute) */
#if defined(VK_EXT_extended_dynamic_state3)
	if (strcmp(pName, "vkCmdSetTessellationDomainOriginEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetTessellationDomainOriginEXT; }
	if (strcmp(pName, "vkCmdSetDepthClampEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthClampEnableEXT; }
	if (strcmp(pName, "vkCmdSetPolygonModeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetPolygonModeEXT; }
	if (strcmp(pName, "vkCmdSetRasterizationSamplesEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetRasterizationSamplesEXT; }
	if (strcmp(pName, "vkCmdSetSampleMaskEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetSampleMaskEXT; }
	if (strcmp(pName, "vkCmdSetAlphaToCoverageEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetAlphaToCoverageEnableEXT; }
	if (strcmp(pName, "vkCmdSetAlphaToOneEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetAlphaToOneEnableEXT; }
	if (strcmp(pName, "vkCmdSetLogicOpEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetLogicOpEnableEXT; }
	if (strcmp(pName, "vkCmdSetColorBlendEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetColorBlendEnableEXT; }
	if (strcmp(pName, "vkCmdSetColorBlendEquationEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetColorBlendEquationEXT; }
	if (strcmp(pName, "vkCmdSetColorWriteMaskEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetColorWriteMaskEXT; }
	if (strcmp(pName, "vkCmdSetRasterizationStreamEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetRasterizationStreamEXT; }
	if (strcmp(pName, "vkCmdSetConservativeRasterizationModeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetConservativeRasterizationModeEXT; }
	if (strcmp(pName, "vkCmdSetExtraPrimitiveOverestimationSizeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetExtraPrimitiveOverestimationSizeEXT; }
	if (strcmp(pName, "vkCmdSetDepthClipEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthClipEnableEXT; }
	if (strcmp(pName, "vkCmdSetSampleLocationsEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetSampleLocationsEnableEXT; }
	if (strcmp(pName, "vkCmdSetColorBlendAdvancedEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetColorBlendAdvancedEXT; }
	if (strcmp(pName, "vkCmdSetProvokingVertexModeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetProvokingVertexModeEXT; }
	if (strcmp(pName, "vkCmdSetLineRasterizationModeEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetLineRasterizationModeEXT; }
	if (strcmp(pName, "vkCmdSetLineStippleEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetLineStippleEnableEXT; }
	if (strcmp(pName, "vkCmdSetDepthClipNegativeOneToOneEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetDepthClipNegativeOneToOneEXT; }
#endif /* defined(VK_EXT_extended_dynamic_state3) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling))
	if (strcmp(pName, "vkCmdSetViewportWScalingEnableNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetViewportWScalingEnableNV; }
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_clip_space_w_scaling)) || (defined(VK_EXT_shader_object) && defined(VK_NV_clip_space_w_scaling)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode))
	if (strcmp(pName, "vkCmdSetCoverageReductionModeNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCoverageReductionModeNV; }
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_coverage_reduction_mode)) || (defined(VK_EXT_shader_object) && defined(VK_NV_coverage_reduction_mode)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color))
	if (strcmp(pName, "vkCmdSetCoverageToColorEnableNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCoverageToColorEnableNV; }
	if (strcmp(pName, "vkCmdSetCoverageToColorLocationNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCoverageToColorLocationNV; }
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_fragment_coverage_to_color)) || (defined(VK_EXT_shader_object) && defined(VK_NV_fragment_coverage_to_color)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples))
	if (strcmp(pName, "vkCmdSetCoverageModulationModeNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCoverageModulationModeNV; }
	if (strcmp(pName, "vkCmdSetCoverageModulationTableEnableNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCoverageModulationTableEnableNV; }
	if (strcmp(pName, "vkCmdSetCoverageModulationTableNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetCoverageModulationTableNV; }
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_framebuffer_mixed_samples)) || (defined(VK_EXT_shader_object) && defined(VK_NV_framebuffer_mixed_samples)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test))
	if (strcmp(pName, "vkCmdSetRepresentativeFragmentTestEnableNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetRepresentativeFragmentTestEnableNV; }
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_representative_fragment_test)) || (defined(VK_EXT_shader_object) && defined(VK_NV_representative_fragment_test)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image))
	if (strcmp(pName, "vkCmdSetShadingRateImageEnableNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetShadingRateImageEnableNV; }
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_shading_rate_image)) || (defined(VK_EXT_shader_object) && defined(VK_NV_shading_rate_image)) */
#if (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle))
	if (strcmp(pName, "vkCmdSetViewportSwizzleNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetViewportSwizzleNV; }
#endif /* (defined(VK_EXT_extended_dynamic_state3) && defined(VK_NV_viewport_swizzle)) || (defined(VK_EXT_shader_object) && defined(VK_NV_viewport_swizzle)) */
#if defined(VK_EXT_shader_module_identifier)
	if (strcmp(pName, "vkGetShaderModuleIdentifierEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetShaderModuleIdentifierEXT; }
	if (strcmp(pName, "vkGetShaderModuleCreateInfoIdentifierEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetShaderModuleCreateInfoIdentifierEXT; }
#endif /* defined(VK_EXT_shader_module_identifier) */
#if defined(VK_NV_optical_flow)
	if (strcmp(pName, "vkCreateOpticalFlowSessionNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateOpticalFlowSessionNV; }
	if (strcmp(pName, "vkDestroyOpticalFlowSessionNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyOpticalFlowSessionNV; }
	if (strcmp(pName, "vkBindOpticalFlowSessionImageNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkBindOpticalFlowSessionImageNV; }
	if (strcmp(pName, "vkCmdOpticalFlowExecuteNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdOpticalFlowExecuteNV; }
#endif /* defined(VK_NV_optical_flow) */
#if defined(VK_KHR_maintenance5)
	if (strcmp(pName, "vkCmdBindIndexBuffer2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindIndexBuffer2KHR; }
	if (strcmp(pName, "vkGetRenderingAreaGranularityKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetRenderingAreaGranularityKHR; }
	if (strcmp(pName, "vkGetDeviceImageSubresourceLayoutKHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDeviceImageSubresourceLayoutKHR; }
	if (strcmp(pName, "vkGetImageSubresourceLayout2KHR") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetImageSubresourceLayout2KHR; }
#endif /* defined(VK_KHR_maintenance5) */
#if defined(VK_EXT_shader_object)
	if (strcmp(pName, "vkCreateShadersEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateShadersEXT; }
	if (strcmp(pName, "vkDestroyShaderEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroyShaderEXT; }
	if (strcmp(pName, "vkGetShaderBinaryDataEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetShaderBinaryDataEXT; }
	if (strcmp(pName, "vkCmdBindShadersEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdBindShadersEXT; }
#endif /* defined(VK_EXT_shader_object) */
#if defined(VK_QCOM_tile_properties)
	if (strcmp(pName, "vkGetFramebufferTilePropertiesQCOM") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetFramebufferTilePropertiesQCOM; }
	if (strcmp(pName, "vkGetDynamicRenderingTilePropertiesQCOM") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetDynamicRenderingTilePropertiesQCOM; }
#endif /* defined(VK_QCOM_tile_properties) */
#if defined(VK_NV_external_sci_sync2)
	if (strcmp(pName, "vkCreateSemaphoreSciSyncPoolNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCreateSemaphoreSciSyncPoolNV; }
	if (strcmp(pName, "vkDestroySemaphoreSciSyncPoolNV") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkDestroySemaphoreSciSyncPoolNV; }
#endif /* defined(VK_NV_external_sci_sync2) */
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state)
	if (strcmp(pName, "vkCmdSetAttachmentFeedbackLoopEnableEXT") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkCmdSetAttachmentFeedbackLoopEnableEXT; }
#endif /* defined(VK_EXT_attachment_feedback_loop_dynamic_state) */
#if defined(VK_QNX_external_memory_screen_buffer)
	if (strcmp(pName, "vkGetScreenBufferPropertiesQNX") == 0) { return (PFN_vkVoidFunction)&xl_hook_tl_deviceHookTable_vkGetScreenBufferPropertiesQNX; }
#endif /* defined(VK_QNX_external_memory_screen_buffer) */
	return nullptr;
}

InstanceTable InstanceTable::makeHooks() {
	return InstanceTable(&getInstanceHookAddr, nullptr);
}

DeviceTable DeviceTable::makeHooks() {
	return DeviceTable(&getDeviceHookAddr, nullptr);
}

#endif /* VK_HOOK_DEBUG */

}
