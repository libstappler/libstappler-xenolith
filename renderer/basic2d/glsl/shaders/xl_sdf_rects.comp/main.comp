#version 450
#extension GL_GOOGLE_include_directive : enable

#include "XL2dGlslVertexData.h"
#include "XL2dGlslShadowData.h"
#include "XL2dGlslSdfData.h"

layout (local_size_x = 64) in;

#include "XL2dGlslSdfDescriptors.h"

void main() {
	const uint gID = gl_GlobalInvocationID.x;

    if (gID < shadowData.rectsCount) {
		Sdf2DObjectData rect;
		rect.object = gID + shadowData.rectsFirst;
		rect.type = 2;

		const Rect2DIndex idx = RECT_INDEX_BUFFER[gID];
		const mat4 transform = inverse(TRANSFORM_BUFFER[idx.transform].transform);
		const vec4 scale = TRANSFORM_BUFFER[idx.transform].padding;
		const vec2 size = VERTEX_BUFFER[idx.origin].zw;
		const vec4 origin = vec4(VERTEX_BUFFER[idx.origin].xy, 0, 1);

		rect.a = VERTEX_BUFFER[idx.origin].xy * shadowData.shadowDensity * shadowData.density;
		rect.b = size * shadowData.shadowDensity;
		rect.value = idx.value;
		rect.opacity = idx.opacity;
		rect.transform = idx.transform;

		vec4 radiusX1 = transform * (origin + vec4(size.x, size.y, 0, 0)) * shadowData.shadowDensity;
		vec4 radiusX2 = transform * (origin + vec4(-size.x, -size.y, 0, 0)) * shadowData.shadowDensity;
		vec4 radiusY1 = transform * (origin + vec4(-size.x, size.y, 0, 0)) * shadowData.shadowDensity;
		vec4 radiusY2 = transform * (origin + vec4(size.x, -size.y, 0, 0)) * shadowData.shadowDensity;

		rect.bbMin = vec2(min(min(radiusX1.xy, radiusX2.xy), min(radiusY1.xy, radiusY2.xy))) - shadowData.bbOffset.xx;
		rect.bbMax = vec2(max(max(radiusX1.xy, radiusX2.xy), max(radiusY1.xy, radiusY2.xy))) + shadowData.bbOffset.xx;

		ivec2 minCell = ivec2(trunc(rect.bbMin / vec2(shadowData.gridSize, shadowData.gridSize)));
		ivec2 maxCell = ivec2(floor(rect.bbMax / vec2(shadowData.gridSize, shadowData.gridSize)));

		for (int i = minCell.x; i <= maxCell.x; ++ i) {
			for (int j = minCell.y; j <= maxCell.y; ++ j) {
				emplaceIntoGrid(i, j, rect.object);
			}
		}

		OBJECTS_DATA_BUFFER[rect.object] = rect;
    }
}
