/* Copyright (C) 2020 - 2022 OPPO. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 450 core
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

#define PRECISION mediump
precision PRECISION float;
#define OUTPUT_FORMAT rgba16f

layout(local_size_x = WG_X, local_size_y = WG_Y, local_size_z = WG_Z) in;

layout(set=0, binding=0, OUTPUT_FORMAT) writeonly uniform PRECISION image3D uOutput;
layout(set=0, binding=1, OUTPUT_FORMAT) readonly uniform PRECISION image3D uInput;

layout (push_constant) uniform pcb {
    ivec4 inputSize;
    int activationType;
    float leakyValue;
};

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    ivec3 inSize = inputSize.xyz;
    if (all(lessThan(pos, inSize)))
    {
        vec4 color = imageLoad(uInput, pos.xyz);
        if (activationType == 0) {  //No activation
            imageStore(uOutput, pos, color);
            return;
        } 
        if (activationType == 1) {  //RELU
            color = max(color, vec4(0));
            imageStore(uOutput, pos, color);
            return;
        } 
        if (activationType == 2) { //RELU6
            color = clamp(color, vec4(0), vec4(6));
            imageStore(uOutput, pos, color);
            return;
        } 
        if (activationType == 3) { //TANH
            color = tanh(color);
            imageStore(uOutput, pos, color);
            return;
        } 
        if (activationType == 4) { //SIGMOID
            color  = vec4(1.0f)/(vec4(1.0f)+ exp(-color));
            imageStore(uOutput, pos, color);
            return;
        }         
        if (activationType == 5) { //LEAKYRELU
            color   = max(color,  (color * vec4(leakyValue)));
            imageStore(uOutput, pos, color);
            return;
        } 
        if (activationType == 6) {  //SILU
            color    = color  * vec4(1.0f)/(vec4(1.0f)+ exp(-color));
            imageStore(uOutput, pos, color);
            return;
        }
    }
}
