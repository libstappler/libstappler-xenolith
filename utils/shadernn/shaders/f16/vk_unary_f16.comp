/* Copyright (C) 2020 - 2022 OPPO. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 450 core
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

#define PRECISION mediump
precision PRECISION float;
#define OUTPUT_FORMAT rgba16f

layout(local_size_x = WG_X, local_size_y = WG_Y, local_size_z = WG_Z) in;

layout(set=0, binding=0, OUTPUT_FORMAT) writeonly uniform PRECISION image3D uOutput;
layout(set=0, binding=1) uniform PRECISION sampler3D uInput;

layout(set=0, binding=2) uniform constBuffer {
    int unaryType;
    float value;
} uConstant;

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    ivec3 inSize = textureSize(uInput, 0);
    int unaryType = uConstant.unaryType;
    float value = uConstant.value;
    if (all(lessThan(pos, inSize)))
    {
        vec4 color = texelFetch(uInput, pos.xyz, 0);
        if (unaryType == 0) {  //No touch
            imageStore(uOutput, pos, color);
            return;
        } 
        if (unaryType == 1) {  //Fixed value
            color = vec4(value);        
            imageStore(uOutput, pos, color);
            return;
        } 
        if (unaryType == 2) { //-
            color = vec4(0) - color;
            imageStore(uOutput, pos, color);
            return;
        } 
        if (unaryType == 3) { //1/x
            color = vec4(1)/color;
            imageStore(uOutput, pos, color);
            return;
        } 
        if (unaryType == 4) { //x*x
            color  = color*color;
            imageStore(uOutput, pos, color);
            return;
        }         
        if (unaryType == 5) { //exp(x)
            color   = exp(color);
            imageStore(uOutput, pos, color);
            return;
        }
        if (unaryType == 6) {  //abs
            color = abs(color);
            imageStore(uOutput, pos, color);
            return;
        } 
    }
}

