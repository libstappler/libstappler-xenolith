/* Copyright (C) 2020 - 2022 OPPO. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 450 core
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

#define PRECISION mediump
precision PRECISION float;
#define OUTPUT_FORMAT rgba16f

layout(local_size_x = WG_X, local_size_y = WG_Y, local_size_z = WG_Z) in;

layout(set=0, binding=0, OUTPUT_FORMAT) writeonly uniform PRECISION image3D uOutput;
layout(set=0, binding=1) uniform PRECISION sampler3D uInput;

layout(set=0, binding=2) uniform constBuffer {
    ivec4 inputSize;
    ivec4 outputSize;
    ivec2 padType;
    ivec2 pad;
} uConstant;

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    ivec3 uInputSize = uConstant.inputSize.xyz;    
    ivec3 uOutputSize = uConstant.outputSize.xyz;
    int padType = uConstant.padType.x;
    ivec2 uPad = uConstant.pad;
    if (all(lessThan(pos, uOutputSize)))
    {
        ivec2 s0 = pos.xy-uPad;
        int sx = s0.x;
        int sy = s0.y;
        if (padType == 0) {         //CONSTANT_PADDING   
            sx = ((sx >= 0) && (sx < uInputSize.x)) ? sx: uInputSize.x;        
            sy = ((sy >= 0) && (sy < uInputSize.y)) ? sy: uInputSize.y;
        } else if (padType == 1) {  // REPLICATE_PADDING
            sx = min(max(sx, 0), uInputSize.x-1);            
            sy = min(max(sy, 0), uInputSize.y-1); 
        } else if (padType == 2) {  // REFLECT_PADDING
            sx = (sx < 0) ? -sx:sx;
            sx = (sx >= uInputSize.x) ? 2*uInputSize.x-2-sx:sx;   
            sy = (sy < 0) ? -sy:sy;
            sy = (sy >= uInputSize.y) ? 2*uInputSize.y-2-sy:sy;  
        }
        vec4 sum = texelFetch(uInput, ivec3(sx, sy, pos.z), 0); 
        //sum = vec4(sx, sy, uPad.x, uPad.y);
        imageStore(uOutput, pos, sum);   
    }
}

