/* Copyright (C) 2020 - 2022 OPPO. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 440 core
layout(std430) buffer;

#define PRECISION mediump
precision PRECISION float;
#define OUTPUT_FORMAT rgba16f

layout(set=0, binding=0, OUTPUT_FORMAT) writeonly restrict uniform PRECISION image3D uOutput;
layout(set=0, binding=1) uniform PRECISION sampler3D uInput0;
layout(set=0, binding=2) uniform PRECISION sampler3D uInput1;

layout(set=0, binding=3) uniform constBuffer {
    ivec4 inputSize;
    int activationType;
    float leakyValue;
} uConstant;

layout(local_size_x = WG_X, local_size_y = WG_Y, local_size_z = WG_Z) in;

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    ivec3 inSize = uConstant.inputSize.xyz;
    int activationType = uConstant.activationType;
    float leakyValue = uConstant.leakyValue;
    if (all(lessThan(pos, inSize)))
    {
        vec4 sum = texelFetch(uInput0, pos, 0) + texelFetch(uInput1, pos, 0);
        if (activationType == 0) {  //No activation
            imageStore(uOutput, pos, sum);
            return;
        } 
        if (activationType == 1) {  //RELU
            sum = max(sum, vec4(0));
            imageStore(uOutput, pos, sum);
            return;
        } 
        if (activationType == 2) { //RELU6
            sum = clamp(sum, vec4(0), vec4(6));
            imageStore(uOutput, pos, sum);
            return;
        } 
        if (activationType == 3) { //TANH
            sum = tanh(sum);
            imageStore(uOutput, pos, sum);
            return;
        } 
        if (activationType == 4) { //SIGMOID
            sum  = vec4(1.0f)/(vec4(1.0f)+ exp(-sum));
            imageStore(uOutput, pos, sum);
            return;
        }         
        if (activationType == 5) { //LEAKYRELU
            sum   = max(sum,  (sum * vec4(leakyValue)));
            imageStore(uOutput, pos, sum);
            return;
        } 
        if (activationType == 6) {  //SILU
            sum    = sum  * vec4(1.0f)/(vec4(1.0f)+ exp(-sum));
            imageStore(uOutput, pos, sum);
            return;
        } 
    }
}