/* Copyright (C) 2020 - 2022 OPPO. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 450 core
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

#define PRECISION highp  // T.B.D., mediump not matched for style stransfer
precision PRECISION float;
#define OUTPUT_FORMAT rgba16f

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;
//layout(local_size_x = WG_X, local_size_y = WG_Y, local_size_z = WG_Z) in;

layout(set=0, binding=0, OUTPUT_FORMAT) writeonly uniform PRECISION image3D uOutput;
layout(set=0, binding=1) uniform PRECISION sampler3D uInput;

layout(set=0, binding=2) uniform constBuffer {
    ivec4 inputSize;
    ivec2 workGroup;
    int activationType;
    float leakyValue;
} uConstant;

layout(set=0, binding=3) readonly buffer beta{
    vec4 data[];
} uBeta;
layout(set=0, binding=4) readonly buffer gamma{
    vec4 data[];
} uGamma;

void retirePhase() { memoryBarrierShared(); barrier(); }
shared vec4 shared_mem[256]; 

void main()
{
    ivec3 gid = ivec3(gl_GlobalInvocationID); 
    ivec3 uInputSize = uConstant.inputSize.xyz;    
    ivec3 outputSize = uConstant.inputSize.xyz;
    int activationType = uConstant.activationType;
    float leakyValue = uConstant.leakyValue;

    int tid = int(gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
    if (all(lessThan(gid, outputSize)))
    {
        int width  = uInputSize.x; 
        int height = uInputSize.y; 
        //int thread_count = WG_X * WG_Y; 
        //ivec2 tg_size = ivec2(WG_X, WG_Y); 
        int thread_count = uConstant.workGroup.x * uConstant.workGroup.y; 
        ivec2 tg_size = uConstant.workGroup; 
        vec4 sum = vec4(0.0f); 
        for(int xIndex = gid.x; xIndex < width; xIndex += tg_size.x) { 
            for(int yIndex = gid.y; yIndex < height; yIndex += tg_size.y) { 
                vec4 val = texelFetch(uInput, ivec3(xIndex, yIndex, gid.z), 0);                 
                sum += val; 
            } 
        } 
        shared_mem[tid] = sum; 
        retirePhase(); 
        sum = vec4(0.0f);
        if (tid < 32) { 
            for (int i = tid + 32; i < thread_count; i += 32) { 
                sum += shared_mem[i]; 
            } 
        } 
        shared_mem[tid] += sum; 
        retirePhase(); 
        // Calculate mean 
        sum = vec4(0.0f);; 
        if (tid == 0) { 
            int top = min(int(32), thread_count); 
            for (int i = 0; i < top; i += 1) { 
                sum += shared_mem[i]; 
            } 
            shared_mem[0] = sum / float(width * height); 
        } 
        retirePhase(); 
        vec4 mean = shared_mem[0]; 
        retirePhase(); 
        // Variance     
        sum = vec4(0.0f); 
        for(int xIndex = gid.x; xIndex < width; xIndex += tg_size.x) { 
            for(int yIndex = gid.y; yIndex < height; yIndex += tg_size.y) { 
                vec4 val = texelFetch(uInput, ivec3(xIndex, yIndex, gid.z), 0);                 
                sum += (val-mean) * (val-mean); 
            } 
        } 
        shared_mem[tid] = sum; 
        retirePhase(); 
        // Reduce to 32 values  
        sum = vec4(0.0f); 
        if (tid < 32) { 
            for (int i = tid + 32; i < thread_count; i += 32) { 
                sum += shared_mem[i]; 
            } 
        } 
        shared_mem[tid] += sum; 
        retirePhase(); 
        // Calculate variance   
        sum = vec4(0.0f); 
        if (tid == 0) { 
            int top = min(int(32), thread_count); 
            for (int i = 0; i < top; i += 1) { 
                sum += shared_mem[i]; 
            } 
            shared_mem[0] = sum / float(width * height); 
        } 
        retirePhase(); 
        vec4 sigma = sqrt(shared_mem[0] + vec4(0.00001f)); 
        vec4 multiplier = uGamma.data[gid.z] / sigma; 
        for(int xIndex = gid.x; xIndex < width; xIndex += tg_size.x) { 
            for(int yIndex = gid.y; yIndex < height; yIndex += tg_size.y) { 
                vec4 val = texelFetch(uInput, ivec3(xIndex, yIndex, gid.z), 0);                 
                vec4 color = (val - mean) * multiplier + uBeta.data[gid.z];                   

                if (activationType == 0) {  //No activation
                    imageStore(uOutput, ivec3(xIndex, yIndex, gid.z), color);
                } 
                if (activationType == 1) {  //RELU
                    color = max(color, vec4(0));
                    imageStore(uOutput, ivec3(xIndex, yIndex, gid.z), color);
                } 
                if (activationType == 2) { //RELU6
                    color = clamp(color, vec4(0), vec4(6));
                    imageStore(uOutput, ivec3(xIndex, yIndex, gid.z), color);
                } 
                if (activationType == 3) { //TANH
                    color = tanh(color);
                    imageStore(uOutput, ivec3(xIndex, yIndex, gid.z), color);
                } 
                if (activationType == 4) { //SIGMOID
                    color  = vec4(1.0f)/(vec4(1.0f)+ exp(-color));
                    imageStore(uOutput, ivec3(xIndex, yIndex, gid.z), color);
                }         
                if (activationType == 5) { //LEAKYRELU
                    color   = max(color,  (color * vec4(leakyValue)));
                    imageStore(uOutput, ivec3(xIndex, yIndex, gid.z), color);
                } 
                if (activationType == 6) {  //SILU
                    color    = color  * vec4(1.0f)/(vec4(1.0f)+ exp(-color));
                    imageStore(uOutput, ivec3(xIndex, yIndex, gid.z), color);
                } 
            } 
        }            
    }
}
