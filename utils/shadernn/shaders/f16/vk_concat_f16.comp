/* Copyright (C) 2020 - 2022 OPPO. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
#version 440 core
layout(std430) buffer;

#define PRECISION mediump
precision PRECISION float;
#define OUTPUT_FORMAT rgba16f

layout(set=0, binding=0, OUTPUT_FORMAT) writeonly restrict uniform PRECISION image3D uOutput;
layout(set=0, binding=1) uniform PRECISION sampler3D uInput0;
layout(set=0, binding=2) uniform PRECISION sampler3D uInput1;

layout(set=0, binding=3) uniform constBuffer {
    ivec2 inImgDepths;
} uConstant;

layout(local_size_x = WG_X, local_size_y = WG_Y, local_size_z = WG_Z) in;

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    
    vec4 outValue;
    if(pos.z < uConstant.inImgDepths.x)
    {
        outValue = texelFetch(uInput0, pos, 0);
    } else {
        outValue = texelFetch(uInput1, ivec3(pos.x, pos.y, pos.z - uConstant.inImgDepths.x), 0);
    }
    
    imageStore(uOutput, pos, outValue);
}