/* Copyright (C) 2020 - 2022 OPPO. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 450 core
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

#define PRECISION mediump
precision PRECISION float;
#define OUTPUT_FORMAT rgba16f

layout(local_size_x = WG_X, local_size_y = WG_Y, local_size_z = WG_Z) in;

layout(set=0, binding=0, OUTPUT_FORMAT) writeonly uniform PRECISION image3D uOutput;
layout(set=0, binding=1) uniform PRECISION sampler3D uInput;

layout(set=0, binding=2) buffer InputBuffer {
    ivec4 inputSize;    // Need vector of 4, because of the alignment rules
    ivec4 outputSize;   // Need vector of 4, because of the alignment rules
    vec4 means;
    vec4 norms;
    vec2 scale;
} uParams;

void main()
{
    ivec3 pos = ivec3(gl_GlobalInvocationID);
    ivec3 inputImgSize = uParams.inputSize.xyz;
    ivec3 outputImgSize = uParams.outputSize.xyz;
    
    if(pos.x < outputImgSize.x && pos.y < outputImgSize.y && pos.z < outputImgSize.z)
    {
        float offsetX = 0.5 - 0.5 * uParams.scale.x;
        float offsetY = 0.5 - 0.5 * uParams.scale.y;

        float srcX = float(pos.x) * uParams.scale.x;
        srcX = srcX - offsetX;
        srcX = clamp(srcX, 0, inputImgSize.x - 1);
        int x11 = int(floor(srcX));
        int x12 = x11 + 1;

        float srcY = float(pos.y) * uParams.scale.y;
        srcY = srcY - offsetY;
        srcY = clamp(srcY, 0, inputImgSize.y - 1);
        int y11 = int(floor(srcY));
        int y12 = y11 + 1;

        vec4 res4 = texelFetch(uInput, ivec3(x11, y12, pos.z), 0);
        vec4 res3 = texelFetch(uInput, ivec3(x12, y12, pos.z), 0);
        vec4 res1 = texelFetch(uInput, ivec3(x11, y11, pos.z), 0);
        vec4 res2 = texelFetch(uInput, ivec3(x12, y11, pos.z), 0);

        vec4 outValue = res1 * vec4((float(x12) - srcX) * (float(y12) - srcY)) +
        res2 * vec4((srcX - float(x11)) * (float(y12) - srcY)) +
        res3 * vec4((srcX - float(x11)) * (srcY - float(y11))) +
        res4 * vec4((float(x12) - srcX) * (srcY - float(y11)));
        outValue = (outValue - uParams.means) * uParams.norms;
        imageStore(uOutput, pos, outValue);
    }
    
}