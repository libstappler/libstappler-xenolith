/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/

#version 450

precision highp float;

#define ID_X	(int(gl_GlobalInvocationID.x))
#define ID_Y	(int(gl_GlobalInvocationID.y))
#define ID_Z	(int(gl_GlobalInvocationID.z))

#define XL_Out buffers[OUTPUT_BUFFER_INDEX].data 
#define XL_InLeft buffers[INPUT_BUFFER_LEFT_INDEX].data 
#define XL_InRight buffers[INPUT_BUFFER_RIGHT_INDEX].data 

layout (constant_id = 0) const int BUFFERS_ARRAY_SIZE = 16;
layout (constant_id = 1) const int OUTPUT_BUFFER_INDEX = 0;
layout (constant_id = 2) const int INPUT_BUFFER_LEFT_INDEX = 1;
layout (constant_id = 3) const int INPUT_BUFFER_RIGHT_INDEX = 2;

layout (constant_id = 4) const int MODIFIERS_ENABLED = 0;
layout (constant_id = 5) const int PARAMETERS_INDEX = 0;
layout (constant_id = 6) const int MULTIPLIER_PARAMETER_OFFSET = 0;
layout (constant_id = 7) const int MIN_PARAMETER_OFFSET = 0;
layout (constant_id = 8) const int MAX_PARAMETER_OFFSET = 0;

layout (set = 0, binding = 0) buffer Buffers {
	float data[];
} buffers[BUFFERS_ARRAY_SIZE];

layout (local_size_x = 8) in;
layout (local_size_y = 8) in;
layout (local_size_z = 1) in;

struct Data {
	int height;
	int width;
};

layout(push_constant) uniform Push {
	Data P;
};

void main()
{
	int y4 = ID_X;
	int x = ID_Y;

	if( x >= P.width || y4 >= ( P.height + 3 ) / 4 ) {
		return;
	}

	int leftPos = y4 * 4;
	int rightPos = y4 * 4 * P.width + x;

	vec4 leftData;
	vec4 rightData;

	int rest = P.height - y4 * 4;
	switch(rest) {
	default:
		leftData = vec4(XL_InLeft[leftPos], XL_InLeft[leftPos + 1], XL_InLeft[leftPos + 2], XL_InLeft[leftPos + 3]);
		rightData = vec4(XL_InRight[rightPos], XL_InRight[rightPos + P.width], XL_InRight[rightPos + 2 * P.width], XL_InRight[rightPos + 3 * P.width] );
		break;
	case 3:
		leftData = vec4(XL_InLeft[leftPos], XL_InLeft[leftPos + 1], XL_InLeft[leftPos + 2], 0);
		rightData = vec4(XL_InRight[rightPos], XL_InRight[rightPos + P.width], XL_InRight[rightPos + 2 * P.width], 0 );
		break;
	case 2:
		leftData = vec4(XL_InLeft[leftPos], XL_InLeft[leftPos + 1], 0, 0);
		rightData = vec4(XL_InRight[rightPos], XL_InRight[rightPos + P.width], 0, 0 );
		break;
	case 1:
		leftData = vec4(XL_InLeft[leftPos], 0, 0, 0);
		rightData = vec4(XL_InRight[rightPos], 0, 0, 0 );
		break;
	}

	vec4 resultData = leftData * rightData;

	if (MODIFIERS_ENABLED != 0) {
		const float multiplier = buffers[PARAMETERS_INDEX].data[MULTIPLIER_PARAMETER_OFFSET];
		const float minValue = buffers[PARAMETERS_INDEX].data[MIN_PARAMETER_OFFSET];
		const float maxValue = buffers[PARAMETERS_INDEX].data[MAX_PARAMETER_OFFSET];

		XL_Out[rightPos] = max(min(resultData.x * multiplier, maxValue), minValue);
		if(rest > 1) {
			XL_Out[rightPos + P.width] = max(min(resultData.y * multiplier, maxValue), minValue);
			if(rest > 2) {
				XL_Out[rightPos + 2 * P.width] = max(min(resultData.z * multiplier, maxValue), minValue);
				if(rest > 3) {
					XL_Out[rightPos + 3 * P.width] = max(min(resultData.w * multiplier, maxValue), minValue);
				}
			}
		}
	} else {
		XL_Out[rightPos] = resultData.x;
		if(rest > 1) {
			XL_Out[rightPos + P.width] = resultData.y;
			if(rest > 2) {
				XL_Out[rightPos + 2 * P.width] = resultData.z;
				if(rest > 3) {
					XL_Out[rightPos + 3 * P.width] = resultData.w;
				}
			}
		}
	}
}
