/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/
#version 450

precision highp float;

#define ID_X	(int(gl_GlobalInvocationID.x))
#define ID_Y	(int(gl_GlobalInvocationID.y))
#define ID_Z	(int(gl_GlobalInvocationID.z))
#define MAX_X (int(gl_WorkGroupSize.x) * int(gl_NumWorkGroups.x))
#define MAX_Y (int(gl_WorkGroupSize.y) * int(gl_NumWorkGroups.y))
#define MAX_Z (int(gl_WorkGroupSize.z) * int(gl_NumWorkGroups.z))
#define ID_VEC (ID_Y * MAX_X + ID_X)
#define MAX_VEC (MAX_X * MAX_Y)

#define FLT_MIN_LOG	-87.33654474f
#define FLT_MAX_LOG	88.f
#define FLT_MAX		3.402823466e+38f
#define FLT_MIN		1.175494351e-38F        // min normalized positive value

#define LOCAL_ID_X	(int(gl_LocalInvocationID.x))
#define LOCAL_ID_Y	(int(gl_LocalInvocationID.y))
#define LOCAL_ID_Z	(int(gl_LocalInvocationID.z))
#define LOCAL_MAX_X (int(gl_WorkGroupSize.x))
#define LOCAL_MAX_Y (int(gl_WorkGroupSize.y))
#define LOCAL_MAX_Z (int(gl_WorkGroupSize.z))
#define LOCAL_ID_POS ((LOCAL_ID_Z * LOCAL_MAX_Y + LOCAL_ID_Y) * LOCAL_MAX_X + LOCAL_ID_X)
#define LOCAL_ID_VEC (LOCAL_ID_Y * LOCAL_MAX_X + LOCAL_ID_X)
#define LOCAL_MAX_VEC (LOCAL_MAX_X * LOCAL_MAX_Y)

// The basic loop for vector operations
#define VECTOR_LOOP(indexName, baseVector)								\
	int _posStart = ID_VEC * 4;											\
	int _posEnd = min(_posStart + 4, int(baseVector.length()));			\
	for(int indexName = _posStart; indexName < _posEnd; ++indexName)

#define XL_Out buffers[OUTPUT_BUFFER_INDEX].data
#define XL_InA buffers[INPUT_BUFFER_A_INDEX].data
#define XL_InB buffers[INPUT_BUFFER_B_INDEX].data

layout (constant_id = 0) const int BUFFERS_ARRAY_SIZE = 16;
layout (constant_id = 1) const int OUTPUT_BUFFER_INDEX = 0;
layout (constant_id = 2) const int INPUT_BUFFER_A_INDEX = 1;
layout (constant_id = 3) const int INPUT_BUFFER_B_INDEX = 2;
layout (constant_id = 4) const int TARGET_OFFSET = 0;
layout (constant_id = 5) const int HAS_MULT = 0;
layout (constant_id = 6) const int MULT_OFFSET = 0;

layout (set = 0, binding = 0) buffer Buffers {
	float data[];
} buffers[BUFFERS_ARRAY_SIZE];

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

shared float partial[LOCAL_MAX_VEC];

// The number of additions in the intermediate sum
const int IntermediateSumStep = 32;

void main()
{
	partial[LOCAL_ID_VEC] = 0;
	for(int i = ID_VEC; i < int(XL_InA.length()); i += MAX_VEC) {
		partial[LOCAL_ID_VEC] += XL_InA[i] * XL_InB[i];
	}

	barrier();

	float sum = 0;
	for(int i = LOCAL_ID_VEC; i < LOCAL_MAX_VEC; i += IntermediateSumStep) {
		sum += partial[i];
	}
	partial[LOCAL_ID_VEC] = sum;

	barrier();

	for(int i = 1; i < IntermediateSumStep && i < LOCAL_MAX_VEC; ++i) {
		sum += partial[i];
	}

	if(LOCAL_ID_VEC == 0) {
		if (HAS_MULT != 0) {
			XL_Out[TARGET_OFFSET] = sum * XL_Out[MULT_OFFSET];
		} else {
			XL_Out[TARGET_OFFSET] = sum;
		}
	}
}
