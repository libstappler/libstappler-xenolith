/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/

#version 450

precision highp float;

#define ID_X	(int(gl_GlobalInvocationID.x))
#define ID_Y	(int(gl_GlobalInvocationID.y))
#define LOCAL_ID_X	(int(gl_LocalInvocationID.x))
#define LOCAL_ID_Y	(int(gl_LocalInvocationID.y))

#define FLT_MIN_LOG	-87.33654474f
#define FLT_MAX_LOG	88.f
#define FLT_MAX		3.402823466e+38f
#define FLT_MIN		1.175494351e-38F        // min normalized positive value

// The exponent with limitations to avoid NaN
#define ExponentFunc(f) ((f < FLT_MIN_LOG) ? 0.f : ((f > FLT_MAX_LOG) ? FLT_MAX : exp(f)))

#define XL_Out buffers[OUTPUT_BUFFER_INDEX].data 
#define XL_In buffers[INPUT_BUFFER_INDEX].data 

layout (constant_id = 0) const int BUFFERS_ARRAY_SIZE = 16;
layout (constant_id = 1) const int OUTPUT_BUFFER_INDEX = 0;
layout (constant_id = 2) const int INPUT_BUFFER_INDEX = 1;

layout (set = 0, binding = 0) buffer Buffers {
	float data[];
} buffers[BUFFERS_ARRAY_SIZE];

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

shared float bufferValues[gl_WorkGroupSize.x * gl_WorkGroupSize.y];

struct Data {
	int matrixHeight;
	int matrixWidth;
};

layout (push_constant) uniform pcb {
	Data P;
};

float LogFunc1(float f)
{
    return log( min( max( f, FLT_MIN ), FLT_MAX ) );
}

void main()
{
    int bufferIndex = LOCAL_ID_Y * int(gl_WorkGroupSize.x) + LOCAL_ID_X;
    bufferValues[bufferIndex] = -FLT_MAX;
    
    const int row = ID_Y;
    const int column = ID_X;

    const int matrixStart = row * P.matrixWidth + column;
    const int matrixEnd = ( row + 1 ) * P.matrixWidth;

    if( row < P.matrixHeight && column < P.matrixWidth ) {
        int matrixIndex = matrixStart;
        while( matrixIndex < matrixEnd ) {
            if( bufferValues[bufferIndex] < XL_In[matrixIndex] ) {
                bufferValues[bufferIndex] = XL_In[matrixIndex];
            }
            matrixIndex += int(gl_WorkGroupSize.x);
        }
    }

    // Reduce 2D Max    
    barrier();
    uint s = 1;
    while( s * 2 < gl_WorkGroupSize.x ) {
        s = s * 2;
    }
    for( uint i = s; i >= 1; i = i >> 1 ) {
        if( LOCAL_ID_X < i && LOCAL_ID_X + i < gl_WorkGroupSize.x ) {
            if( bufferValues[bufferIndex] <= bufferValues[bufferIndex + i] ) {
                bufferValues[bufferIndex] = bufferValues[bufferIndex + i];
            }
        }
    }

    const float maxVal = bufferValues[LOCAL_ID_Y * int(gl_WorkGroupSize.x)];
    bufferValues[bufferIndex] = 0;
    
    if( row < P.matrixHeight && column < P.matrixWidth ) {
        int matrixIndex = matrixStart;
        while( matrixIndex < matrixEnd ) {
            float val = ExponentFunc(XL_In[matrixIndex] - maxVal);
            XL_Out[matrixIndex] = val;
            bufferValues[bufferIndex] += val;
            matrixIndex += int(gl_WorkGroupSize.x);
        }
    }

    // Reduce 2D Sum    
    barrier();
    s = 1;
    while( s * 2 < gl_WorkGroupSize.x ) {
        s = s * 2;
    }
    for( uint i = s; i >= 1; i = i >> 1 ) {
        if( LOCAL_ID_X < i && LOCAL_ID_X + i < gl_WorkGroupSize.x ) {
            bufferValues[bufferIndex] += bufferValues[bufferIndex + i];
        }
    }

    if( row < P.matrixHeight && column < P.matrixWidth ) {
        int matrixIndex = matrixStart;
        while( matrixIndex < matrixEnd ) {
            XL_Out[matrixIndex] *= 1.f / bufferValues[LOCAL_ID_Y * int(gl_WorkGroupSize.x)];
            matrixIndex += int(gl_WorkGroupSize.x);
        }
    }
}
