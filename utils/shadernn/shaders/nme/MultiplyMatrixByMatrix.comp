/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/

#version 450

precision highp float;

#define ID_X	(int(gl_GlobalInvocationID.x))
#define ID_Y	(int(gl_GlobalInvocationID.y))
#define ID_Z	(int(gl_GlobalInvocationID.z))

#define XL_Out buffers[OUTPUT_BUFFER_INDEX].data 
#define XL_InA buffers[INPUT_BUFFER_A_INDEX].data 
#define XL_InB buffers[INPUT_BUFFER_B_INDEX].data 

layout (constant_id = 0) const int BUFFERS_ARRAY_SIZE = 16;
layout (constant_id = 1) const int OUTPUT_BUFFER_INDEX = 0;
layout (constant_id = 2) const int INPUT_BUFFER_A_INDEX = 1;
layout (constant_id = 3) const int INPUT_BUFFER_B_INDEX = 2;
layout (constant_id = 4) const int RENDER_PASS_INDEX = 0;

layout (set = 0, binding = 0) buffer Buffers {
	float data[];
} buffers[BUFFERS_ARRAY_SIZE];

layout (local_size_x = 8) in;
layout (local_size_y = 8) in;
layout (local_size_z = 1) in;

struct Data {
	int batchSize;
	int firstHeight;
	int firstWidth;
	int firstRowSize;
	int secondWidth;
	int secondRowSize;
	int resultRowSize;
	int toAdd;
};

layout(push_constant) uniform Push {
	Data P;
};

void computeMultiplyMatrixByMatrixFor4x4Block(int aOffset, int bOffset, inout vec4 acc0, inout vec4 acc1, inout vec4 acc2, inout vec4 acc3 )
{
    int i = 0;
    while( i <= P.firstWidth - 4 ) {
        vec4 a0 = vec4(XL_InA[aOffset], XL_InA[aOffset + 1], XL_InA[aOffset + 2], XL_InA[aOffset + 3]);
        vec4 a1 = vec4(XL_InA[aOffset + P.firstRowSize], XL_InA[aOffset + P.firstRowSize + 1], XL_InA[aOffset + P.firstRowSize + 2], XL_InA[aOffset + P.firstRowSize + 3]);
        vec4 a2 = vec4(XL_InA[aOffset + 2 * P.firstRowSize], XL_InA[aOffset + 2 * P.firstRowSize + 1], XL_InA[aOffset + 2 * P.firstRowSize + 2], XL_InA[aOffset + 2 * P.firstRowSize + 3]);
        vec4 a3 = vec4(XL_InA[aOffset + 3 * P.firstRowSize], XL_InA[aOffset + 3 * P.firstRowSize + 1], XL_InA[aOffset + 3 * P.firstRowSize + 2], XL_InA[aOffset + 3 * P.firstRowSize + 3]);

        vec4 b0 = vec4(XL_InB[bOffset], XL_InB[bOffset + 1], XL_InB[bOffset + 2], XL_InB[bOffset + 3]);
        bOffset += P.secondRowSize;

        acc0.x = fma(a0.x, b0.x, acc0.x);
        acc0.y = fma(a0.x, b0.y, acc0.y);
        acc0.z = fma(a0.x, b0.z, acc0.z);
        acc0.w = fma(a0.x, b0.w, acc0.w);

        acc1.x = fma(a1.x, b0.x, acc1.x);
        acc1.y = fma(a1.x, b0.y, acc1.y);
        acc1.z = fma(a1.x, b0.z, acc1.z);
        acc1.w = fma(a1.x, b0.w, acc1.w);

        acc2.x = fma(a2.x, b0.x, acc2.x);
        acc2.y = fma(a2.x, b0.y, acc2.y);
        acc2.z = fma(a2.x, b0.z, acc2.z);
        acc2.w = fma(a2.x, b0.w, acc2.w);

        acc3.x = fma(a3.x, b0.x, acc3.x);
        acc3.y = fma(a3.x, b0.y, acc3.y);
        acc3.z = fma(a3.x, b0.z, acc3.z);
        acc3.w = fma(a3.x, b0.w, acc3.w);

        b0 = vec4(XL_InB[bOffset], XL_InB[bOffset + 1], XL_InB[bOffset + 2], XL_InB[bOffset + 3]);
        bOffset += P.secondRowSize;

        acc0.x = fma(a0.y, b0.x, acc0.x);
        acc0.y = fma(a0.y, b0.y, acc0.y);
        acc0.z = fma(a0.y, b0.z, acc0.z);
        acc0.w = fma(a0.y, b0.w, acc0.w);

        acc1.x = fma(a1.y, b0.x, acc1.x);
        acc1.y = fma(a1.y, b0.y, acc1.y);
        acc1.z = fma(a1.y, b0.z, acc1.z);
        acc1.w = fma(a1.y, b0.w, acc1.w);

        acc2.x = fma(a2.y, b0.x, acc2.x);
        acc2.y = fma(a2.y, b0.y, acc2.y);
        acc2.z = fma(a2.y, b0.z, acc2.z);
        acc2.w = fma(a2.y, b0.w, acc2.w);

        acc3.x = fma(a3.y, b0.x, acc3.x);
        acc3.y = fma(a3.y, b0.y, acc3.y);
        acc3.z = fma(a3.y, b0.z, acc3.z);
        acc3.w = fma(a3.y, b0.w, acc3.w);

        b0 = vec4(XL_InB[bOffset], XL_InB[bOffset + 1], XL_InB[bOffset + 2], XL_InB[bOffset + 3]);
        bOffset += P.secondRowSize;

        acc0.x = fma(a0.z, b0.x, acc0.x);
        acc0.y = fma(a0.z, b0.y, acc0.y);
        acc0.z = fma(a0.z, b0.z, acc0.z);
        acc0.w = fma(a0.z, b0.w, acc0.w);

        acc1.x = fma(a1.z, b0.x, acc1.x);
        acc1.y = fma(a1.z, b0.y, acc1.y);
        acc1.z = fma(a1.z, b0.z, acc1.z);
        acc1.w = fma(a1.z, b0.w, acc1.w);

        acc2.x = fma(a2.z, b0.x, acc2.x);
        acc2.y = fma(a2.z, b0.y, acc2.y);
        acc2.z = fma(a2.z, b0.z, acc2.z);
        acc2.w = fma(a2.z, b0.w, acc2.w);

        acc3.x = fma(a3.z, b0.x, acc3.x);
        acc3.y = fma(a3.z, b0.y, acc3.y);
        acc3.z = fma(a3.z, b0.z, acc3.z);
        acc3.w = fma(a3.z, b0.w, acc3.w);

        b0 = vec4(XL_InB[bOffset], XL_InB[bOffset + 1], XL_InB[bOffset + 2], XL_InB[bOffset + 3]);
        bOffset += P.secondRowSize;

        acc0.x = fma(a0.w, b0.x, acc0.x);
        acc0.y = fma(a0.w, b0.y, acc0.y);
        acc0.z = fma(a0.w, b0.z, acc0.z);
        acc0.w = fma(a0.w, b0.w, acc0.w);

        acc1.x = fma(a1.w, b0.x, acc1.x);
        acc1.y = fma(a1.w, b0.y, acc1.y);
        acc1.z = fma(a1.w, b0.z, acc1.z);
        acc1.w = fma(a1.w, b0.w, acc1.w);

        acc2.x = fma(a2.w, b0.x, acc2.x);
        acc2.y = fma(a2.w, b0.y, acc2.y);
        acc2.z = fma(a2.w, b0.z, acc2.z);
        acc2.w = fma(a2.w, b0.w, acc2.w);

        acc3.x = fma(a3.w, b0.x, acc3.x);
        acc3.y = fma(a3.w, b0.y, acc3.y);
        acc3.z = fma(a3.w, b0.z, acc3.z);
        acc3.w = fma(a3.w, b0.w, acc3.w);

        aOffset += 4;
        i += 4;
    }

    while( i < P.firstWidth ) {
        float a0 = XL_InA[aOffset];
        float a1 = XL_InA[aOffset + P.firstRowSize];
        float a2 = XL_InA[aOffset + 2 * P.firstRowSize];
        float a3 = XL_InA[aOffset + 3 * P.firstRowSize];

        vec4 b0 = vec4(XL_InB[bOffset], XL_InB[bOffset + 1], XL_InB[bOffset + 2], XL_InB[bOffset + 3]);
        bOffset += P.secondRowSize;

        acc0.x = fma(a0, b0.x, acc0.x);
        acc0.y = fma(a0, b0.y, acc0.y);
        acc0.z = fma(a0, b0.z, acc0.z);
        acc0.w = fma(a0, b0.w, acc0.w);

        acc1.x = fma(a1, b0.x, acc1.x);
        acc1.y = fma(a1, b0.y, acc1.y);
        acc1.z = fma(a1, b0.z, acc1.z);
        acc1.w = fma(a1, b0.w, acc1.w);

        acc2.x = fma(a2, b0.x, acc2.x);
        acc2.y = fma(a2, b0.y, acc2.y);
        acc2.z = fma(a2, b0.z, acc2.z);
        acc2.w = fma(a2, b0.w, acc2.w);

        acc3.x = fma(a3, b0.x, acc3.x);
        acc3.y = fma(a3, b0.y, acc3.y);
        acc3.z = fma(a3, b0.z, acc3.z);
        acc3.w = fma(a3, b0.w, acc3.w);

        aOffset += 1;
        i++;
    }
}

void main() {
    if( ID_Y < P.firstHeight / 4 && ID_X < P.secondWidth / 4 && ID_Z < P.batchSize ) {
    	int x = ID_X;
    	int y = ID_Y;
        int batch = ID_Z;
        int aOffset = batch * P.firstRowSize * P.firstHeight + P.firstRowSize * y * 4;
        int bOffset = batch * P.secondRowSize * P.firstWidth + x * 4;
        int resultOffset = batch * P.firstHeight * P.resultRowSize + y * 4 * P.resultRowSize + x * 4;

        vec4 acc0 = vec4(0.0);
        vec4 acc1 = vec4(0.0);
        vec4 acc2 = vec4(0.0);
        vec4 acc3 = vec4(0.0);
        if( P.toAdd == 1 ) {
            int resultOffsetTemp = resultOffset;
            acc0 = vec4(XL_Out[resultOffsetTemp], XL_Out[resultOffsetTemp + 1], XL_Out[resultOffsetTemp + 2], XL_Out[resultOffsetTemp + 3]);
            resultOffsetTemp += P.resultRowSize;
            acc1 = vec4(XL_Out[resultOffsetTemp], XL_Out[resultOffsetTemp + 1], XL_Out[resultOffsetTemp + 2], XL_Out[resultOffsetTemp + 3]);
            resultOffsetTemp += P.resultRowSize;
            acc2 = vec4(XL_Out[resultOffsetTemp], XL_Out[resultOffsetTemp + 1], XL_Out[resultOffsetTemp + 2], XL_Out[resultOffsetTemp + 3]);
            resultOffsetTemp += P.resultRowSize;
            acc3 = vec4(XL_Out[resultOffsetTemp], XL_Out[resultOffsetTemp + 1], XL_Out[resultOffsetTemp + 2], XL_Out[resultOffsetTemp + 3]);
        }

        computeMultiplyMatrixByMatrixFor4x4Block( aOffset, bOffset, acc0, acc1, acc2, acc3 );

		if (RENDER_PASS_INDEX == 0) {

        XL_Out[resultOffset] = acc0.x + float(OUTPUT_BUFFER_INDEX);
        XL_Out[resultOffset + 1] = acc0.y + float(INPUT_BUFFER_A_INDEX);
        XL_Out[resultOffset + 2] = acc0.z + float(INPUT_BUFFER_B_INDEX);
        XL_Out[resultOffset + 3] = acc0.w + float(RENDER_PASS_INDEX);
        resultOffset += P.resultRowSize;
        XL_Out[resultOffset] = acc1.x + float(OUTPUT_BUFFER_INDEX);
        XL_Out[resultOffset + 1] = acc1.y + float(INPUT_BUFFER_A_INDEX);
	    XL_Out[resultOffset + 2] = acc1.z + float(INPUT_BUFFER_B_INDEX);
	    XL_Out[resultOffset + 3] = acc1.w + float(RENDER_PASS_INDEX);
        resultOffset += P.resultRowSize;
        XL_Out[resultOffset] = acc2.x + float(OUTPUT_BUFFER_INDEX);
        XL_Out[resultOffset + 1] = acc2.y + float(INPUT_BUFFER_A_INDEX);
        XL_Out[resultOffset + 2] = acc2.z + float(INPUT_BUFFER_B_INDEX);
        XL_Out[resultOffset + 3] = acc2.w + float(RENDER_PASS_INDEX);
        resultOffset += P.resultRowSize;
        XL_Out[resultOffset] = acc3.x + float(OUTPUT_BUFFER_INDEX);
        XL_Out[resultOffset + 1] = acc3.y + float(INPUT_BUFFER_A_INDEX);
        XL_Out[resultOffset + 2] = acc3.z + float(INPUT_BUFFER_B_INDEX);
        XL_Out[resultOffset + 3] = acc3.w + float(RENDER_PASS_INDEX);
        
        } else {
        
        XL_Out[resultOffset] = acc0.x;
        XL_Out[resultOffset + 1] = acc0.y;
        XL_Out[resultOffset + 2] = acc0.z;
        XL_Out[resultOffset + 3] = acc0.w;
        resultOffset += P.resultRowSize;
        XL_Out[resultOffset] = acc1.x;
        XL_Out[resultOffset + 1] = acc1.y;
	    XL_Out[resultOffset + 2] = acc1.z;
	    XL_Out[resultOffset + 3] = acc1.w;
        resultOffset += P.resultRowSize;
        XL_Out[resultOffset] = acc2.x;
        XL_Out[resultOffset + 1] = acc2.y;
        XL_Out[resultOffset + 2] = acc2.z;
        XL_Out[resultOffset + 3] = acc2.w;
        resultOffset += P.resultRowSize;
        XL_Out[resultOffset] = acc3.x;
        XL_Out[resultOffset + 1] = acc3.y;
        XL_Out[resultOffset + 2] = acc3.z;
        XL_Out[resultOffset + 3] = acc3.w;
        
        }
    }
}