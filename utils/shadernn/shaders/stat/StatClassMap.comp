#version 450
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 1, local_size_y = 64, local_size_z = 1) in;

layout(set = 0, binding = 2) buffer ClassSizeBuffer {
	uint classes[];
} classSizeBuffer[2];

layout(set = 0, binding = 2) buffer ClassIndexesBuffer {
	uint index[];
} classIndexBuffer[2];

layout(set=0, binding=1) readonly buffer Data { uint64_t data[]; };

struct InputInfo {
	int size;
	int fields;
	int classField;
	int classMin;
	int classMax;
	int fieldSource;
	int fieldTarget;
	int classCount;
};

layout (push_constant) uniform pcb {
	InputInfo inputInfo;
};

void main() {
	if (gl_GlobalInvocationID.y < inputInfo.size) {
		uint64_t classId = data[gl_GlobalInvocationID.y * inputInfo.fields + inputInfo.classField];
		if (classId >= inputInfo.classMin && classId <= inputInfo.classMax) {
			uint offsetClassId = uint(classId - inputInfo.classMin);
			uint target = atomicAdd(classSizeBuffer[0].classes[offsetClassId], 1);
			classIndexBuffer[1].index[offsetClassId * inputInfo.size + target] = gl_GlobalInvocationID.y;
		}
    }
}
